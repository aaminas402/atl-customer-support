[
  {
    "content": "Create custom metadata - Developer\nSkip to content\nCreate custom metadata\nÂ¶\nLike other objects in the SDK that you can create, custom metadata implements the builder pattern. This allows you to progressively build-up the structure you want to create.\nThere are limits to the number of custom metadata properties you can create\nAtlan currently preserves details of custom metadata in its audit log. This allows Atlan to retain an audit trail of actions users took on custom metadata on each asset, even if the custom metadata definition itself is deleted.\nHowever, this also places an upper limit on the number of custom metadata properties you can (structurally) define in Atlan. Even if you delete the custom metadata definitions, any that you have previously defined will still take up \"space\" within this limit.\nMore details\nBy default this is ~1000 properties. Note that this limit applies only to the structural definition of the properties themselves, not the values captured for assets. If you see an error like the following, it means you have reached this limit:\n{\n\"errorCode\"\n:\n\"ATLAS-500-00-001\"\n,\n\"errorMessage\"\n:\n\"Unable to push entity audits to ES\"\n,\n\"errorCause\"\n:",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 0
    }
  },
  {
    "content": "{\n\"errorCode\"\n:\n\"ATLAS-500-00-001\"\n,\n\"errorMessage\"\n:\n\"Unable to push entity audits to ES\"\n,\n\"errorCause\"\n:\n\"[{type=mapper_parsing_exception, reason=failed to parse, caused_by={type=illegal_argument_exception, reason=Limit of total fields [1000] has been exceeded while adding new fields [5]}}]\"\n}\nYou will need to contact Atlan support to extend this threshold if you reach it.\nBuild minimal object needed\nÂ¶\n7.0.0\n4.0.0\nFor example, to create a custom metadata structure to capture RACI assignments:\nJava\nPython\nKotlin\nRaw REST API\nBuild custom metadata definition for creation\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nCustomMetadataDef\ncustomMetadataDef\n=\nCustomMetadataDef\n.\ncreator\n(\n\"RACI\"\n)\n// (1)\n.\nattributeDef\n(\n// (2)\nAttributeDef\n.\nof\n(\nclient\n,\n\"Responsible\"\n,\n// (3)\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\n// (4)\nnull\n,\n// (5)\nfalse\n))\n// (6)\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\nclient\n,\n\"Accountable\"\n,\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\nfalse\n))\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\nclient\n,\n\"Consulted\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\nclient\n,\n\"Informed\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\noptions",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 1
    }
  },
  {
    "content": "(\nclient\n,\n\"Consulted\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\nclient\n,\n\"Informed\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\noptions\n(\nCustomMetadataOptions\n.\nwithImage\n(\n\"https://example.com/logo.png\"\n,\ntrue\n))\n// (7)\n.\noptions\n(\nCustomMetadataOptions\n.\nwithEmoji\n(\n\"ðŸ‘ª\"\n))\n// (8)\n.\noptions\n(\nCustomMetadataOptions\n.\nwithIcon\n(\nAtlanIcon\n.\nROCKET_LAUNCH\n,\nAtlanTagColor\n.\nRED\n))\n// (9)\n.\nbuild\n();\n// (10)\nWhen creating the custom metadata structure, you must provide a name (\nRACI\nin this example).\nYou can then add as many attributes to that structure as you want.\nEach attribute must have a name. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nEach attribute must have a type.\nIf the type is\nAtlanCustomAttributePrimitiveType.OPTIONS\nthen you must also specify the enumeration that defines the valid values for this attribute (in this example the type is not an enumeration, so this is\nnull\nand could even be left out as in the subsequent lines).",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 2
    }
  },
  {
    "content": "null\nand could even be left out as in the subsequent lines).\nYou must also specify whether the attribute allows multiple values to be captured on it (\ntrue\n) or only a single value (\nfalse\n).\nYou can also provide a custom logo for the custom metadata by providing a URL to an image. The second argument controls whether this custom metadata is editable via the UI â€” for\nfalse\nit is editable via the UI, while for\ntrue\nthe custom metadata will only be editable via APIs (including via SDK).\nOr you can use an emoji as the custom icon for the custom metadata.\nOr you can use a built-in icon for the custom metadata. The second argument controls the color to use for the icon.\nAs with all other builder patterns, you must\nbuild()\nthe object you've defined.\nBuild custom metadata definition for creation\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\nfrom\npyatlan.model.typedef\nimport\nAttributeDef\n,\nCustomMetadataDef\nfrom\npyatlan.model.enums\nimport\nAtlanCustomAttributePrimitiveType\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\ncm_def\n=\nCustomMetadataDef\n.\ncreate\n(\ndisplay_name\n=\n\"RACI\"\n)\n# (1)\ncm_def\n.\nattribute_defs\n=\n[\n# (2)\nAttributeDef\n.",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 3
    }
  },
  {
    "content": "AtlanCustomAttributePrimitiveType\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\ncm_def\n=\nCustomMetadataDef\n.\ncreate\n(\ndisplay_name\n=\n\"RACI\"\n)\n# (1)\ncm_def\n.\nattribute_defs\n=\n[\n# (2)\nAttributeDef\n.\ncreate\n(\nclient\n=\nclient\n,\n# (3)\ndisplay_name\n=\n\"Responsible\"\n,\n# (4)\nattribute_type\n=\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\n# (5)\noptions_name\n=\nNone\n,\n# (6)\nmulti_valued\n=\nFalse\n,\n# (7)\n),\nAttributeDef\n.\ncreate\n(\nclient\n=\nclient\n,\ndisplay_name\n=\n\"Accountable\"\n,\nattribute_type\n=\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\n),\nAttributeDef\n.\ncreate\n(\nclient\n=\nclient\n,\ndisplay_name\n=\n\"Consulted\"\n,\nattribute_type\n=\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\nmulti_valued\n=\nTrue\n,\n),\nAttributeDef\n.\ncreate\n(\nclient\n=\nclient\n,\ndisplay_name\n=\n\"Informed\"\n,\nattribute_type\n=\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\nmulti_valued\n=\nTrue\n,\n),\n]\ncm_def\n.\noptions\n=\nCustomMetadataDef\n.\nOptions\n.\nwith_logo_from_url\n(\n# (8)\nurl\n=\n\"https://example.com/logo.png\"\n,\nlocked\n=\nTrue\n)\ncm_def\n.\noptions\n=\nCustomMetadataDef\n.\nOptions\n.\nwith_logo_as_emoji\n(\n# (9)\nemoji\n=\n\"ðŸ‘ª\"\n,\nlocked\n=\nFalse\n)\nWhen creating the custom metadata structure, you must provide a name (\nRACI\nin this example).",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 4
    }
  },
  {
    "content": ".\noptions\n=\nCustomMetadataDef\n.\nOptions\n.\nwith_logo_as_emoji\n(\n# (9)\nemoji\n=\n\"ðŸ‘ª\"\n,\nlocked\n=\nFalse\n)\nWhen creating the custom metadata structure, you must provide a name (\nRACI\nin this example).\nYou can then add as many attributes to that structure as you want.\nYou must provide a client instance.\nEach attribute must have a name.\nEach attribute must have a type.\nIf the type is\nAtlanCustomAttributePrimitiveType.OPTIONS\nthen you must also specify the enumeration that defines the valid values for this attribute (in this example none are enumerations, so this is the default value for the argument:\nNone\n).\nYou can also specify whether the attribute allows multiple values to be captured on it (\nTrue\n) or only a single value (\nFalse\n) (the default).\nYou can also provide a custom logo for the custom metadata by providing a URL to an image. The second argument controls whether this custom metadata is editable via the UI â€” for\nlocked=False\nit is editable via the UI, while for\nlocked=True\nthe custom metadata will only be editable via APIs (including via SDK).\nOr you can use an emoji as the custom icon for the custom metadata.\nBuild custom metadata definition for creation\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 5
    }
  },
  {
    "content": "Or you can use an emoji as the custom icon for the custom metadata.\nBuild custom metadata definition for creation\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nval\ncustomMetadataDef\n=\nCustomMetadataDef\n.\ncreator\n(\n\"RACI\"\n)\n// (1)\n.\nattributeDef\n(\n// (2)\nAttributeDef\n.\nof\n(\nclient\n,\n\"Responsible\"\n,\n// (3)\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\n// (4)\nnull\n,\n// (5)\nfalse\n))\n// (6)\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\n\"Accountable\"\n,\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\nfalse\n))\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\n\"Consulted\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\nattributeDef\n(\nAttributeDef\n.\nof\n(\n\"Informed\"\n,\nAtlanCustomAttributePrimitiveType\n.\nGROUPS\n,\ntrue\n))\n.\noptions\n(\nCustomMetadataOptions\n.\nwithImage\n(\n\"https://example.com/logo.png\"\n,\ntrue\n))\n// (7)\n.\noptions\n(\nCustomMetadataOptions\n.\nwithEmoji\n(\n\"ðŸ‘ª\"\n))\n// (8)\n.\noptions\n(\nCustomMetadataOptions\n.\nwithIcon\n(\nAtlanIcon\n.\nROCKET_LAUNCH\n,\nAtlanTagColor\n.\nRED\n))\n// (9)\n.\nbuild\n()\n// (10)\nWhen creating the custom metadata structure, you must provide a name (\nRACI\nin this example).\nYou can then add as many attributes to that structure as you want.",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 6
    }
  },
  {
    "content": ".\nRED\n))\n// (9)\n.\nbuild\n()\n// (10)\nWhen creating the custom metadata structure, you must provide a name (\nRACI\nin this example).\nYou can then add as many attributes to that structure as you want.\nEach attribute must have a name. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nEach attribute must have a type.\nIf the type is\nAtlanCustomAttributePrimitiveType.OPTIONS\nthen you must also specify the enumeration that defines the valid values for this attribute (in this example the type is not an enumeration, so this is\nnull\nand could even be left out as in the subsequent lines).\nYou must also specify whether the attribute allows multiple values to be captured on it (\ntrue\n) or only a single value (\nfalse\n).\nYou can also provide a custom logo for the custom metadata by providing a URL to an image. The second argument controls whether this custom metadata is editable via the UI â€” for\nfalse\nit is editable via the UI, while for\ntrue\nthe custom metadata will only be editable via APIs (including via SDK).\nOr you can use an emoji as the custom icon for the custom metadata.",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 7
    }
  },
  {
    "content": "false\nit is editable via the UI, while for\ntrue\nthe custom metadata will only be editable via APIs (including via SDK).\nOr you can use an emoji as the custom icon for the custom metadata.\nOr you can use a built-in icon for the custom metadata. The second argument controls the color to use for the icon.\nAs with all other builder patterns, you must\nbuild()\nthe object you've defined.\nPOST /api/meta/types/typedefs\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n{\n\"businessMetadataDefs\"\n:\n[\n// (1)\n{\n\"category\"\n:\n\"BUSINESS_METADATA\"\n,\n// (2)\n\"name\"\n:\n\"RACI\"\n,\n// (3)\n\"attributeDefs\"\n:\n[\n// (4)\n{\n\"name\"\n:\n\"\"\n,\n// (5)\n\"displayName\"\n:\n\"Responsible\"\n,\n// (6)\n\"description\"\n:\n\"\"\n,\n\"typeName\"\n:\n\"string\"\n,\n\"isOptional\"\n:\ntrue\n,\n\"cardinality\"\n:\n\"SINGLE\"\n,\n\"valuesMinCount\"\n:\n0\n,\n\"valuesMaxCount\"\n:\n1\n,\n\"isUnique\"\n:\nfalse\n,\n\"isIndexable\"\n:\ntrue\n,\n\"includeInNotification\"\n:\nfalse\n,",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 8
    }
  },
  {
    "content": ",\n\"typeName\"\n:\n\"string\"\n,\n\"isOptional\"\n:\ntrue\n,\n\"cardinality\"\n:\n\"SINGLE\"\n,\n\"valuesMinCount\"\n:\n0\n,\n\"valuesMaxCount\"\n:\n1\n,\n\"isUnique\"\n:\nfalse\n,\n\"isIndexable\"\n:\ntrue\n,\n\"includeInNotification\"\n:\nfalse\n,\n\"options\"\n:\n{\n\"applicableEntityTypes\"\n:\n\"[\\\"Asset\\\"]\"\n,\n\"customApplicableEntityTypes\"\n:",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 9
    }
  },
  {
    "content": "\"[\\\"S3Object\\\",\\\"LookerLook\\\",\\\"TableauSite\\\",\\\"SnowflakeStream\\\",\\\"ModeCollection\\\",\\\"LookerDashboard\\\",\\\"PowerBIWorkspace\\\",\\\"Collection\\\",\\\"AtlasGlossaryCategory\\\",\\\"TableauFlow\\\",\\\"LookerView\\\",\\\"TableauProject\\\",\\\"LookerExplore\\\",\\\"ModeReport\\\",\\\"PowerBIColumn\\\",\\\"Query\\\",\\\"ColumnProcess\\\",\\\"SalesforceDashboard\\\",\\\"SalesforceObject\\\",\\\"BIProcess\\\",\\\"DbtModelColumn\\\",\\\"S3Bucket\\\",\\\"SigmaDataElement\\\",\\\"DataStudioAsset\\\",\\\"DbtProcess\\\",\\\"DbtModel\\\",\\\"PowerBIDataset\\\",\\\"Column\\\",\\\"DbtMetric\\\",\\\"TableauDashboard\\\",\\\"SigmaDataset\\\",\\\"LookerQuery\\\",\\\"APISpec\\\",\\\"MetabaseDashboard\\\",\\\"Process\\\",\\\"PowerBIDashboard\\\",\\\"APIPath\\\",\\\"ModeChart\\\",\\\"PowerBIDataflow\\\",\\\"SalesforceField\\\",\\\"GCSObject\\\",\\\"SalesforceReport\\\",\\\"View\\\",\\\"Folder\\\",\\\"TableauMetric\\\",\\\"MaterialisedView\\\",\\\"PresetDashboard\\\",\\\"PowerBIDatasource\\\",\\\"ModeWorkspace\\\",\\\"SigmaPage\\\",\\\"LookerField\\\",\\\"SigmaWorkbook\\\",\\\"PowerBIMeasure\\\",\\\"TableauWorkbook\\\",\\\"LookerModel\\\",\\\"MetabaseCollection\\\",\\\"ModeQuery\\\",\\\"GCSBucket\\\",\\\"LookerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorkshe",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 10
    }
  },
  {
    "content": "okerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorksheet\\\",\\\"MetabaseQuestion\\\",\\\"AtlasGlossary\\\",\\\"PresetChart\\\",\\\"PowerBITable\\\",\\\"LookerProject\\\",\\\"SnowflakePipe\\\",\\\"PowerBIReport\\\",\\\"SigmaDatasetColumn\\\",\\\"TableauDatasourceField\\\",\\\"TablePartition\\\",\\\"AtlasGlossaryTerm\\\",\\\"SigmaDataElementField\\\",\\\"Schema\\\",\\\"Database\\\",\\\"DbtColumnProcess\\\"]\"",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 11
    }
  },
  {
    "content": ",\n\"allowSearch\"\n:\nfalse\n,\n\"maxStrLength\"\n:\n\"100000000\"\n,\n\"allowFiltering\"\n:\ntrue\n,\n\"multiValueSelect\"\n:\ntrue\n,\n// (7)\n\"showInOverview\"\n:\nfalse\n,\n\"primitiveType\"\n:\n\"users\"\n,\n\"isEnum\"\n:\nfalse\n,\n\"customType\"\n:\n\"users\"\n// (8)\n},\n\"isNew\"\n:\ntrue\n// (9)\n},\n{\n\"name\"\n:\n\"\"\n,\n\"displayName\"\n:\n\"Accountable\"\n,\n\"description\"\n:\n\"\"\n,\n\"typeName\"\n:\n\"string\"\n,\n\"isOptional\"\n:\ntrue\n,\n\"cardinality\"\n:\n\"SINGLE\"\n,\n\"valuesMinCount\"\n:\n0\n,\n\"valuesMaxCount\"\n:\n1\n,\n\"isUnique\"\n:\nfalse\n,\n\"isIndexable\"\n:\ntrue\n,\n\"includeInNotification\"\n:\nfalse\n,\n\"options\"\n:\n{\n\"applicableEntityTypes\"\n:\n\"[\\\"Asset\\\"]\"\n,\n\"customApplicableEntityTypes\"\n:",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 12
    }
  },
  {
    "content": "\"[\\\"S3Object\\\",\\\"LookerLook\\\",\\\"TableauSite\\\",\\\"SnowflakeStream\\\",\\\"ModeCollection\\\",\\\"LookerDashboard\\\",\\\"PowerBIWorkspace\\\",\\\"Collection\\\",\\\"AtlasGlossaryCategory\\\",\\\"TableauFlow\\\",\\\"LookerView\\\",\\\"TableauProject\\\",\\\"LookerExplore\\\",\\\"ModeReport\\\",\\\"PowerBIColumn\\\",\\\"Query\\\",\\\"ColumnProcess\\\",\\\"SalesforceDashboard\\\",\\\"SalesforceObject\\\",\\\"BIProcess\\\",\\\"DbtModelColumn\\\",\\\"S3Bucket\\\",\\\"SigmaDataElement\\\",\\\"DataStudioAsset\\\",\\\"DbtProcess\\\",\\\"DbtModel\\\",\\\"PowerBIDataset\\\",\\\"Column\\\",\\\"DbtMetric\\\",\\\"TableauDashboard\\\",\\\"SigmaDataset\\\",\\\"LookerQuery\\\",\\\"APISpec\\\",\\\"MetabaseDashboard\\\",\\\"Process\\\",\\\"PowerBIDashboard\\\",\\\"APIPath\\\",\\\"ModeChart\\\",\\\"PowerBIDataflow\\\",\\\"SalesforceField\\\",\\\"GCSObject\\\",\\\"SalesforceReport\\\",\\\"View\\\",\\\"Folder\\\",\\\"TableauMetric\\\",\\\"MaterialisedView\\\",\\\"PresetDashboard\\\",\\\"PowerBIDatasource\\\",\\\"ModeWorkspace\\\",\\\"SigmaPage\\\",\\\"LookerField\\\",\\\"SigmaWorkbook\\\",\\\"PowerBIMeasure\\\",\\\"TableauWorkbook\\\",\\\"LookerModel\\\",\\\"MetabaseCollection\\\",\\\"ModeQuery\\\",\\\"GCSBucket\\\",\\\"LookerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorkshe",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 13
    }
  },
  {
    "content": "okerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorksheet\\\",\\\"MetabaseQuestion\\\",\\\"AtlasGlossary\\\",\\\"PresetChart\\\",\\\"PowerBITable\\\",\\\"LookerProject\\\",\\\"SnowflakePipe\\\",\\\"PowerBIReport\\\",\\\"SigmaDatasetColumn\\\",\\\"TableauDatasourceField\\\",\\\"TablePartition\\\",\\\"AtlasGlossaryTerm\\\",\\\"SigmaDataElementField\\\",\\\"Schema\\\",\\\"Database\\\",\\\"DbtColumnProcess\\\"]\"",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 14
    }
  },
  {
    "content": ",\n\"allowSearch\"\n:\nfalse\n,\n\"maxStrLength\"\n:\n\"100000000\"\n,\n\"allowFiltering\"\n:\ntrue\n,\n\"multiValueSelect\"\n:\nfalse\n,\n\"showInOverview\"\n:\nfalse\n,\n\"primitiveType\"\n:\n\"users\"\n,\n\"isEnum\"\n:\nfalse\n,\n\"customType\"\n:\n\"users\"\n},\n\"isNew\"\n:\ntrue\n},\n{\n\"name\"\n:\n\"\"\n,\n\"displayName\"\n:\n\"Consulted\"\n,\n\"description\"\n:\n\"\"\n,\n\"typeName\"\n:\n\"array<string>\"\n,\n\"isOptional\"\n:\ntrue\n,\n\"cardinality\"\n:\n\"SINGLE\"\n,\n\"valuesMinCount\"\n:\n0\n,\n\"valuesMaxCount\"\n:\n1\n,\n\"isUnique\"\n:\nfalse\n,\n\"isIndexable\"\n:\ntrue\n,\n\"includeInNotification\"\n:\nfalse\n,\n\"options\"\n:\n{\n\"applicableEntityTypes\"\n:\n\"[\\\"Asset\\\"]\"\n,\n\"customApplicableEntityTypes\"\n:",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 15
    }
  },
  {
    "content": "\"[\\\"S3Object\\\",\\\"LookerLook\\\",\\\"TableauSite\\\",\\\"SnowflakeStream\\\",\\\"ModeCollection\\\",\\\"LookerDashboard\\\",\\\"PowerBIWorkspace\\\",\\\"Collection\\\",\\\"AtlasGlossaryCategory\\\",\\\"TableauFlow\\\",\\\"LookerView\\\",\\\"TableauProject\\\",\\\"LookerExplore\\\",\\\"ModeReport\\\",\\\"PowerBIColumn\\\",\\\"Query\\\",\\\"ColumnProcess\\\",\\\"SalesforceDashboard\\\",\\\"SalesforceObject\\\",\\\"BIProcess\\\",\\\"DbtModelColumn\\\",\\\"S3Bucket\\\",\\\"SigmaDataElement\\\",\\\"DataStudioAsset\\\",\\\"DbtProcess\\\",\\\"DbtModel\\\",\\\"PowerBIDataset\\\",\\\"Column\\\",\\\"DbtMetric\\\",\\\"TableauDashboard\\\",\\\"SigmaDataset\\\",\\\"LookerQuery\\\",\\\"APISpec\\\",\\\"MetabaseDashboard\\\",\\\"Process\\\",\\\"PowerBIDashboard\\\",\\\"APIPath\\\",\\\"ModeChart\\\",\\\"PowerBIDataflow\\\",\\\"SalesforceField\\\",\\\"GCSObject\\\",\\\"SalesforceReport\\\",\\\"View\\\",\\\"Folder\\\",\\\"TableauMetric\\\",\\\"MaterialisedView\\\",\\\"PresetDashboard\\\",\\\"PowerBIDatasource\\\",\\\"ModeWorkspace\\\",\\\"SigmaPage\\\",\\\"LookerField\\\",\\\"SigmaWorkbook\\\",\\\"PowerBIMeasure\\\",\\\"TableauWorkbook\\\",\\\"LookerModel\\\",\\\"MetabaseCollection\\\",\\\"ModeQuery\\\",\\\"GCSBucket\\\",\\\"LookerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorkshe",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 16
    }
  },
  {
    "content": "okerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorksheet\\\",\\\"MetabaseQuestion\\\",\\\"AtlasGlossary\\\",\\\"PresetChart\\\",\\\"PowerBITable\\\",\\\"LookerProject\\\",\\\"SnowflakePipe\\\",\\\"PowerBIReport\\\",\\\"SigmaDatasetColumn\\\",\\\"TableauDatasourceField\\\",\\\"TablePartition\\\",\\\"AtlasGlossaryTerm\\\",\\\"SigmaDataElementField\\\",\\\"Schema\\\",\\\"Database\\\",\\\"DbtColumnProcess\\\"]\"",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 17
    }
  },
  {
    "content": ",\n\"allowSearch\"\n:\nfalse\n,\n\"maxStrLength\"\n:\n\"100000000\"\n,\n\"allowFiltering\"\n:\ntrue\n,\n\"multiValueSelect\"\n:\ntrue\n,\n\"showInOverview\"\n:\nfalse\n,\n\"primitiveType\"\n:\n\"groups\"\n,\n\"isEnum\"\n:\nfalse\n,\n\"customType\"\n:\n\"groups\"\n},\n\"isNew\"\n:\ntrue\n},\n{\n\"name\"\n:\n\"\"\n,\n\"displayName\"\n:\n\"Informed\"\n,\n\"description\"\n:\n\"\"\n,\n\"typeName\"\n:\n\"array<string>\"\n,\n\"isOptional\"\n:\ntrue\n,\n\"cardinality\"\n:\n\"SINGLE\"\n,\n\"valuesMinCount\"\n:\n0\n,\n\"valuesMaxCount\"\n:\n1\n,\n\"isUnique\"\n:\nfalse\n,\n\"isIndexable\"\n:\ntrue\n,\n\"includeInNotification\"\n:\nfalse\n,\n\"options\"\n:\n{\n\"applicableEntityTypes\"\n:\n\"[\\\"Asset\\\"]\"\n,\n\"customApplicableEntityTypes\"\n:",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 18
    }
  },
  {
    "content": "\"[\\\"S3Object\\\",\\\"LookerLook\\\",\\\"TableauSite\\\",\\\"SnowflakeStream\\\",\\\"ModeCollection\\\",\\\"LookerDashboard\\\",\\\"PowerBIWorkspace\\\",\\\"Collection\\\",\\\"AtlasGlossaryCategory\\\",\\\"TableauFlow\\\",\\\"LookerView\\\",\\\"TableauProject\\\",\\\"LookerExplore\\\",\\\"ModeReport\\\",\\\"PowerBIColumn\\\",\\\"Query\\\",\\\"ColumnProcess\\\",\\\"SalesforceDashboard\\\",\\\"SalesforceObject\\\",\\\"BIProcess\\\",\\\"DbtModelColumn\\\",\\\"S3Bucket\\\",\\\"SigmaDataElement\\\",\\\"DataStudioAsset\\\",\\\"DbtProcess\\\",\\\"DbtModel\\\",\\\"PowerBIDataset\\\",\\\"Column\\\",\\\"DbtMetric\\\",\\\"TableauDashboard\\\",\\\"SigmaDataset\\\",\\\"LookerQuery\\\",\\\"APISpec\\\",\\\"MetabaseDashboard\\\",\\\"Process\\\",\\\"PowerBIDashboard\\\",\\\"APIPath\\\",\\\"ModeChart\\\",\\\"PowerBIDataflow\\\",\\\"SalesforceField\\\",\\\"GCSObject\\\",\\\"SalesforceReport\\\",\\\"View\\\",\\\"Folder\\\",\\\"TableauMetric\\\",\\\"MaterialisedView\\\",\\\"PresetDashboard\\\",\\\"PowerBIDatasource\\\",\\\"ModeWorkspace\\\",\\\"SigmaPage\\\",\\\"LookerField\\\",\\\"SigmaWorkbook\\\",\\\"PowerBIMeasure\\\",\\\"TableauWorkbook\\\",\\\"LookerModel\\\",\\\"MetabaseCollection\\\",\\\"ModeQuery\\\",\\\"GCSBucket\\\",\\\"LookerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorkshe",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 19
    }
  },
  {
    "content": "okerTile\\\",\\\"Table\\\",\\\"PowerBITile\\\",\\\"PowerBIPage\\\",\\\"SalesforceOrganization\\\",\\\"PresetWorkspace\\\",\\\"TableauDatasource\\\",\\\"PresetDataset\\\",\\\"TableauCalculatedField\\\",\\\"LookerFolder\\\",\\\"TableauWorksheet\\\",\\\"MetabaseQuestion\\\",\\\"AtlasGlossary\\\",\\\"PresetChart\\\",\\\"PowerBITable\\\",\\\"LookerProject\\\",\\\"SnowflakePipe\\\",\\\"PowerBIReport\\\",\\\"SigmaDatasetColumn\\\",\\\"TableauDatasourceField\\\",\\\"TablePartition\\\",\\\"AtlasGlossaryTerm\\\",\\\"SigmaDataElementField\\\",\\\"Schema\\\",\\\"Database\\\",\\\"DbtColumnProcess\\\"]\"",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 20
    }
  },
  {
    "content": ",\n\"allowSearch\"\n:\nfalse\n,\n\"maxStrLength\"\n:\n\"100000000\"\n,\n\"allowFiltering\"\n:\ntrue\n,\n\"multiValueSelect\"\n:\ntrue\n,\n\"showInOverview\"\n:\nfalse\n,\n\"primitiveType\"\n:\n\"groups\"\n,\n\"isEnum\"\n:\nfalse\n,\n\"customType\"\n:\n\"groups\"\n},\n\"isNew\"\n:\ntrue\n}\n],\n\"displayName\"\n:\n\"RACI\"\n,\n// (10)\n\"options\"\n:\n{\n// (11)\n\"logoType\"\n:\n\"emoji\"\n,\n\"emoji\"\n:\n\"ðŸ‘ª\"\n}\n}\n]\n}\nAll custom metadata structural definitions must be specified within the\nbusinessMetadataDefs\narray.\nEach structural definition must be defined with a category set to\nBUSINESS_METADATA\n.\nWhatever name you provide for the structural definition will be replaced by a hashed-string generated name by the back-end.\nWithin the structural definition, you need to define each attribute inside the\nattributeDefs\narray.\nYou should leave the\nname\nof the attribute as an empty string. This will be generated by the back-end.\nInstead, provide the name for the attribute (as it should appear in the UI) to the\ndisplayName\n.\nThere are various properties of each attribute that define how the attribute is validated and will behave in the UI. You can use the\nmultiValueSelect",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 21
    }
  },
  {
    "content": "displayName\n.\nThere are various properties of each attribute that define how the attribute is validated and will behave in the UI. You can use the\nmultiValueSelect\nto specify whether to allow multiple values for this attribute on a single asset (in this example multiple values will be allowed).\nOne of the properties that must be specified is the type of the custom attribute. In this example, we use an Atlan-specific custom type to capture users.\nFor each attribute that is to be newly created and added to the structure, set the\nisNew\nto\ntrue\n.\nSpecify the name of the custom metadata structure, as it should appear in the UI, to the\ndisplayName\n.\nFinally, set options on the custom metadata structure to control its appearance â€” specifically the icon that should be used in the UI.\nCreate the custom metadata from the object\nÂ¶\n1.3.3\n4.0.0\nNow that the object is built, this\ncustomMetadataDef\nobject will have the required information for Atlan to create it.\nYou can then actually create the custom metadata definition in Atlan by calling the\ncreate()\nmethod on the object itself:\nJava\nPython\nKotlin\nRaw REST API\nCreate the custom metadata definition\n14\nCustomMetadataDef\nresponse\n=",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 22
    }
  },
  {
    "content": "create()\nmethod on the object itself:\nJava\nPython\nKotlin\nRaw REST API\nCreate the custom metadata definition\n14\nCustomMetadataDef\nresponse\n=\ncustomMetadataDef\n.\ncreate\n(\nclient\n);\n// (1)\nThe\ncreate()\noperation will actually create the custom metadata definition within Atlan, including all the attributes that were defined as part of it. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreate the custom metadata definition\n33\n34\n35\n36\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nresponse\n=\nclient\n.\ntypedef\n.\ncreate\n(\ncm_def\n)\n# (1)\nThe\ntypedef.create()\noperation will actually create the custom metadata definition within Atlan, including all the attributes that were defined as part of it.\nCreate the custom metadata definition\n14\nval\nresponse\n=\ncustomMetadataDef\n.\ncreate\n(\nclient\n)\n// (1)\nThe\ncreate()\noperation will actually create the custom metadata definition within Atlan, including all the attributes that were defined as part of it. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 23
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreation implicit in step above\nThe actual creation of the custom metadata structure is implicit in the example above.\nNow that the custom metadata structure has been created, you can\nset its values per asset\n.\nLimit applicability of an attribute\nÂ¶\n4.0.0\nYou can also limit the assets the custom metadata applies to in Atlan. Anywhere you create an attribute definition, you can:\nJava\nPython\nKotlin\nRaw REST API\nLimit applicability of an attribute\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nAttributeDef\nresponsible\n=\nAttributeDef\n.\nof\n(\nclient\n,\n\"Responsible\"\n,\n// (1)\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\nfalse\n);\nresponsible\n=\nresponsible\n.\ntoBuilder\n()\n// (2)\n.\noptions\n(\nresponsible\n.\ngetOptions\n().\ntoBuilder\n()\n// (3)\n.\nclearApplicableConnections\n()\n// (4)\n.\nclearApplicableAssetTypes\n()\n.\nclearApplicableGlossaries\n()\n.\nclearApplicableGlossaryTypes\n()\n.\napplicableConnection\n(\n\"default/snowflake/1234567890\"\n)\n// (5)\n.\napplicableAssetType\n(\nDatabase\n.\nTYPE_NAME\n)\n// (6)\n.\napplicableGlossary\n(\nGlossary\n.\nfindByName\n(\n\"Example\"\n).\ngetQualifiedName\n())\n// (7)\n.\napplicableGlossaryType\n(\nGlossaryTerm\n.\nTYPE_NAME\n)\n// (8)\n.",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 24
    }
  },
  {
    "content": "(\nDatabase\n.\nTYPE_NAME\n)\n// (6)\n.\napplicableGlossary\n(\nGlossary\n.\nfindByName\n(\n\"Example\"\n).\ngetQualifiedName\n())\n// (7)\n.\napplicableGlossaryType\n(\nGlossaryTerm\n.\nTYPE_NAME\n)\n// (8)\n.\nbuild\n())\n// (9)\n.\nbuild\n();\n// (10)\nWe still recommend creating the attribute using the\nAttribute.of()\nfactory method. This ensures all required settings are configured based on the type of the attribute.\nYou can then clone the attribute into a mutable form using\ntoBuilder()\n.\nSet the\noptions\non this clone to change its applicability. You can use the\ntoBuilder()\non the options themselves to get a mutable clone of the options that have already been setup by the\nAttributeDef.of()\nfactory method.\nBy default, the\nAttributeDef.of()\nmethod will ensure a custom metadata attribute applies to all assets. To limit its applicability, you need to remove these \"grants\" by clearing out:\nConnections the custom metadata attribute applies to (by default, all assets in all connections that existed when the attribute was created will be capable of using this custom metadata attribute).",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 25
    }
  },
  {
    "content": "Connections the custom metadata attribute applies to (by default, all assets in all connections that existed when the attribute was created will be capable of using this custom metadata attribute).\nAsset types the custom metadata attribute applies to (by default, all asset types will be capable of using this custom metadata attribute).\nGlossaries the custom metadata attribute applies to (by default, all objects in a glossary that existed when the attribute was created will be capable of using this custom metadata attribute).\nGlossary asset types the custom metadata applies to (by default, glossaries, terms and categories will be capable of using this custom metadata attribute).\nYou can chain any number of\napplicableConnection()\ncalls to specify the\nqualiedName\ns of connections. The custom metadata attribute will only be available to assets within these connections.\nTo use all connections\nTo select all connections, instead chain\n.applicableConnections(Connection.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableAssetType()",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 26
    }
  },
  {
    "content": "To use all connections\nTo select all connections, instead chain\n.applicableConnections(Connection.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableAssetType()\ncalls to specify the types of assets for the custom metadata attribute. The custom metadata attribute will only be available to assets of these types, within the connections specified in the line above.\nTo use all asset types\nTo select all asset types, instead chain\n.applicableAssetTypes(AttributeDefOptions.ALL_ASSET_TYPES)\n.\nYou can chain any number of\napplicableGlossary()\ncalls to specify the\nqualifiedName\ns of glossaries. The custom metadata attribute will only be available to assets within these glossaries.\nTo use all glossaries\nTo select all glossaries, instead chain\n.applicableGlossaries(Glossary.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableGlossaryType()\ncalls to specify the types of glossary assets for the custom metadata attribute. The custom metadata attribute will only be available to glossary assets of these types, within the glossaries specified in the line above.\nTo use all glossary asset types\nTo select all glossary asset types, instead use",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 27
    }
  },
  {
    "content": "To use all glossary asset types\nTo select all glossary asset types, instead use\n.applicableGlossaryTypes(AttributeDefOptions.ALL_GLOSSARY_TYPES)\n.\nYou then need to build all of these options.\nAnd finally you need to build the changes back into the attribute definition. You can then use the attribute definition (\nresponsible\nin this example) as you would any other attribute definition, for example passing it to the chained\n.attributeDef()\nas part of\nCustomMetadataDef.creator()\nshown earlier.\nComing soon\nLimit applicability of an attribute\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nvar\nresponsible\n=\nAttributeDef\n.\nof\n(\nclient\n,\n\"Responsible\"\n,\n// (1)\nAtlanCustomAttributePrimitiveType\n.\nUSERS\n,\nfalse\n)\nresponsible\n=\nresponsible\n.\ntoBuilder\n()\n// (2)\n.\noptions\n(\nresponsible\n.\noptions\n.\ntoBuilder\n()\n// (3)\n.\nclearApplicableConnections\n()\n// (4)\n.\nclearApplicableAssetTypes\n()\n.\nclearApplicableGlossaries\n()\n.\nclearApplicableGlossaryTypes\n()\n.\napplicableConnection\n(\n\"default/snowflake/1234567890\"\n)\n// (5)\n.\napplicableAssetType\n(\nDatabase\n.\nTYPE_NAME\n)\n// (6)\n.\napplicableGlossary\n(\nGlossary\n.\nfindByName\n(\n\"Example\"\n).\nqualifiedName\n)\n// (7)\n.\napplicableGlossaryType\n(\nGlossaryTerm\n.\nTYPE_NAME\n)",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 28
    }
  },
  {
    "content": ")\n// (5)\n.\napplicableAssetType\n(\nDatabase\n.\nTYPE_NAME\n)\n// (6)\n.\napplicableGlossary\n(\nGlossary\n.\nfindByName\n(\n\"Example\"\n).\nqualifiedName\n)\n// (7)\n.\napplicableGlossaryType\n(\nGlossaryTerm\n.\nTYPE_NAME\n)\n// (8)\n.\nbuild\n())\n// (9)\n.\nbuild\n()\n// (10)\nWe still recommend creating the attribute using the\nAttribute.of()\nfactory method. This ensures all required settings are configured based on the type of the attribute.\nYou can then clone the attribute into a mutable form using\ntoBuilder()\n.\nSet the\noptions\non this clone to change its applicability. You can use the\ntoBuilder()\non the options themselves to get a mutable clone of the options that have already been setup by the\nAttributeDef.of()\nfactory method.\nBy default, the\nAttributeDef.of()\nmethod will ensure a custom metadata attribute applies to all assets. To limit its applicability, you need to remove these \"grants\" by clearing out:\nConnections the custom metadata attribute applies to (by default, all assets in all connections that existed when the attribute was created will be capable of using this custom metadata attribute).",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 29
    }
  },
  {
    "content": "Connections the custom metadata attribute applies to (by default, all assets in all connections that existed when the attribute was created will be capable of using this custom metadata attribute).\nAsset types the custom metadata attribute applies to (by default, all asset types will be capable of using this custom metadata attribute).\nGlossaries the custom metadata attribute applies to (by default, all objects in a glossary that existed when the attribute was created will be capable of using this custom metadata attribute).\nGlossary asset types the custom metadata applies to (by default, glossaries, terms and categories will be capable of using this custom metadata attribute).\nYou can chain any number of\napplicableConnection()\ncalls to specify the\nqualiedName\ns of connections. The custom metadata attribute will only be available to assets within these connections.\nTo use all connections\nTo select all connections, instead chain\n.applicableConnections(Connection.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableAssetType()",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 30
    }
  },
  {
    "content": "To use all connections\nTo select all connections, instead chain\n.applicableConnections(Connection.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableAssetType()\ncalls to specify the types of assets for the custom metadata attribute. The custom metadata attribute will only be available to assets of these types, within the connections specified in the line above.\nTo use all asset types\nTo select all asset types, instead chain\n.applicableAssetTypes(AttributeDefOptions.ALL_ASSET_TYPES)\n.\nYou can chain any number of\napplicableGlossary()\ncalls to specify the\nqualifiedName\ns of glossaries. The custom metadata attribute will only be available to assets within these glossaries.\nTo use all glossaries\nTo select all glossaries, instead chain\n.applicableGlossaries(Glossary.getAllQualifiedNames())\n.\nYou can chain any number of\napplicableGlossaryType()\ncalls to specify the types of glossary assets for the custom metadata attribute. The custom metadata attribute will only be available to glossary assets of these types, within the glossaries specified in the line above.\nTo use all glossary asset types\nTo select all glossary asset types, instead use",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 31
    }
  },
  {
    "content": "To use all glossary asset types\nTo select all glossary asset types, instead use\n.applicableGlossaryTypes(AttributeDefOptions.ALL_GLOSSARY_TYPES)\n.\nYou then need to build all of these options.\nAnd finally you need to build the changes back into the attribute definition. You can then use the attribute definition (\nresponsible\nin this example) as you would any other attribute definition, for example passing it to the chained\n.attributeDef()\nas part of\nCustomMetadataDef.creator()\nshown earlier.\nComing soon\nApplicability is combined across connections and glossaries\nIf you specify both connections (and asset types) and glossaries (and glossary types), then the custom metadata attribute will be available across both data assets in those connections and glossary objects in those glossaries. In other words, these options are\nnot\nmutually exclusive, but are combined.\n2022-12-23\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 32
    }
  },
  {
    "content": "feedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_custom-metadata_create.html",
      "source_type": "sdk",
      "file": "snippets_custom-metadata_create.json",
      "chunk_id": 33
    }
  }
]