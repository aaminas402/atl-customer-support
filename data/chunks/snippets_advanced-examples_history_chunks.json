[
  {
    "content": "Viewing the history of an asset - Developer\nSkip to content\nViewing the history of an asset\n¶\nAccessing the history of an asset in Atlan is a flexible operation. This also makes it a bit more complex to understand than the other operations. To encapsulate the full flexibility of Atlan's search, the SDK provides a dedicated\nAuditSearchRequest\nobject.\nSimilar but not identical to searching in general\nAtlan's audit log that contains the history of an asset uses Elasticsearch. This makes the approach you use to access history similar to\nsearching\n. However, there are differences as the audit log uses a different index than the broader search. If you're feeling brave, feel free to experiment with the more complex search mechanisms outlined in the\nsearching\nsection. But this should be sufficient to get you started with accessing asset history.\nBuild the request\n¶\nTo retrieve an asset's history in Atlan, you need to define the request. For simplicity, we provide helper methods to retrieve a defined number of entries in reverse-chronological order (most recent entries first).\nBy GUID\n¶\n3.0.0\n4.0.0\nTo request the history of an asset by GUID:\nJava\nPython\nKotlin\nRaw REST API",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 0
    }
  },
  {
    "content": "By GUID\n¶\n3.0.0\n4.0.0\nTo request the history of an asset by GUID:\nJava\nPython\nKotlin\nRaw REST API\nBuild the query by GUID\n1\n2\n3\n4\n5\nAuditSearchRequest\nrequest\n=\nAuditSearchRequest\n.\nbyGuid\n(\n// (1)\nclient\n,\n// (2)\n\"6fc01478-1263-42ae-b8ca-c4a57da51392\"\n,\n// (3)\n10\n)\n// (4)\n.\nbuild\n();\n// (5)\nCreate a request for the history of an asset, by its GUID.\nBecause this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nSpecify the GUID of the asset.\nSpecify the amount of history (maximum number of activities). This will be in reverse-chronological order (most recent entries first).\nBuild the request.\nBuild the query by GUID\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\nlogging\nfrom\npyatlan.model.audit\nimport\nCustomMetadataAttributesAuditDetail\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.model.core\nimport\nAtlanTag\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.client.audit\nimport\nAuditSearchRequest\nfrom\npyatlan.model.search\nimport\nSortItem\nfrom\npyatlan.model.enums\nimport\nSortOrder\nLOGGER\n=\nlogging\n.\ngetLogger\n(\n__name__\n)\nLOGGER\n.\nsetLevel\n(\nlogging\n.\nINFO\n)\nclient\n=\nAtlanClient",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 1
    }
  },
  {
    "content": "from\npyatlan.model.search\nimport\nSortItem\nfrom\npyatlan.model.enums\nimport\nSortOrder\nLOGGER\n=\nlogging\n.\ngetLogger\n(\n__name__\n)\nLOGGER\n.\nsetLevel\n(\nlogging\n.\nINFO\n)\nclient\n=\nAtlanClient\n()\nrequest\n=\nAuditSearchRequest\n.\nby_guid\n(\n# (1)\nguid\n=\n\"6fc01478-1263-42ae-b8ca-c4a57da51392\"\n,\n# (2)\nsize\n=\n10\n,\n# (3)\nsort\n=\n[\nSortItem\n(\n\"created\"\n,\norder\n=\nSortOrder\n.\nDESCENDING\n)]\n# (4)\n)\nCreate a request for the history of an asset, by its GUID.\nSpecify the GUID of the asset.\n(optional) Specify the amount of history (maximum number of activities). Defaults to\n10\n.\n(optional) Specify sorting criteria for the results.\nBy default, it sorts in reverse-chronological order, with the most recent entries first.\nBuild the query by GUID\n1\n2\n3\n4\n5\nval\nrequest\n=\nAuditSearchRequest\n.\nbyGuid\n(\n// (1)\nclient\n,\n// (2)\n\"6fc01478-1263-42ae-b8ca-c4a57da51392\"\n,\n// (3)\n10\n// (4)\n).\nbuild\n()\n// (5)\nCreate a request for the history of an asset, by its GUID.\nBecause this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nSpecify the GUID of the asset.",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 2
    }
  },
  {
    "content": "Because this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nSpecify the GUID of the asset.\nSpecify the amount of history (maximum number of activities). This will be in reverse-chronological order (most recent entries first).\nBuild the request.\nBool query contents\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\"filter\"\n:\n[\n// (1)\n{\n\"term\"\n:\n{\n// (2)\n\"entityId\"\n:\n{\n// (3)\n\"value\"\n:\n\"6fc01478-1263-42ae-b8ca-c4a57da51392\"\n}\n}\n}\n]\nTo retrieve history for a specific asset by that asset's GUID, start with a filter.\nWithin the filter run a term query.\nAnd specifically filter by the field\nentityId\nin the index.\nBy qualifiedName\n¶\n3.0.0\n4.0.0\nTo request the history of an asset by qualifiedName:\nJava\nPython\nKotlin\nRaw REST API\nBuild the query by qualifiedName\n1\n2\n3\n4\n5\nAuditSearchRequest\nrequest\n=\nAuditSearchRequest\n.\nbyQualifiedName\n(\n// (1)\nclient\n,\n// (2)\nGlossary\n.\nTYPE_NAME\n,\n\"FzCMyPR2LxkPFgr8eNGrq\"\n,\n// (3)\n10\n)\n// (4)\n.\nbuild\n();\n// (5)\nCreate a request for the history of an asset, by its qualifiedName.\nBecause this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 3
    }
  },
  {
    "content": ".\nbuild\n();\n// (5)\nCreate a request for the history of an asset, by its qualifiedName.\nBecause this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nSpecify the type of the asset and qualifiedName of the asset.\nSpecify the amount of history (maximum number of activities). This will be in reverse-chronological order (most recent entries first).\nBuild the request.\nBuild the query by qualifiedName\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\nlogging\nfrom\npyatlan.model.audit\nimport\nCustomMetadataAttributesAuditDetail\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.model.core\nimport\nAtlanTag\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.client.audit\nimport\nAuditSearchRequest\nfrom\npyatlan.model.search\nimport\nSortItem\nfrom\npyatlan.model.enums\nimport\nSortOrder\nLOGGER\n=\nlogging\n.\ngetLogger\n(\n__name__\n)\nLOGGER\n.\nsetLevel\n(\nlogging\n.\nINFO\n)\nclient\n=\nAtlanClient\n()\nrequest\n=\nAuditSearchRequest\n.\nby_qualified_name\n(\n# (1)\ntype_name\n=\n\"AtlasGlossary\"\n,\n# (2)\nqualified_name\n=\n\"FzCMyPR2LxkPFgr8eNGrq\"\n,\n# (3)\nsize\n=\n10\n,\n# (4)\nsort\n=\n[\nSortItem\n(\n\"created\"\n,\norder\n=\nSortOrder\n.",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 4
    }
  },
  {
    "content": ".\nby_qualified_name\n(\n# (1)\ntype_name\n=\n\"AtlasGlossary\"\n,\n# (2)\nqualified_name\n=\n\"FzCMyPR2LxkPFgr8eNGrq\"\n,\n# (3)\nsize\n=\n10\n,\n# (4)\nsort\n=\n[\nSortItem\n(\n\"created\"\n,\norder\n=\nSortOrder\n.\nDESCENDING\n)]\n# (5)\n)\nCreate a request for the history of an asset, by its qualifiedName.\nSpecify the type of the asset\nSpecify the qualifiedName of the asset.\n(optional) Specify the amount of history (maximum number of activities). Defaults to\n10\n.\n(optional) Specify sorting criteria for the results.\nBy default, it sorts in reverse-chronological order, with the most recent entries first.\nBuild the query by qualifiedName\n1\n2\n3\n4\n5\nval\nrequest\n=\nAuditSearchRequest\n.\nbyQualifiedName\n(\n// (1)\nclient\n,\n// (2)\nGlossary\n.\nTYPE_NAME\n,\n\"FzCMyPR2LxkPFgr8eNGrq\"\n,\n// (3)\n10\n// (4)\n).\nbuild\n()\n// (5)\nCreate a request for the history of an asset, by its qualifiedName.\nBecause this operation will directly look up the asset's history in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nSpecify the type of the asset and qualifiedName of the asset.\nSpecify the amount of history (maximum number of activities). This will be in reverse-chronological order (most recent entries first).",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 5
    }
  },
  {
    "content": "Specify the type of the asset and qualifiedName of the asset.\nSpecify the amount of history (maximum number of activities). This will be in reverse-chronological order (most recent entries first).\nBuild the request.\nBool query contents\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\"must\"\n:\n[\n// (1)\n{\n\"term\"\n:\n{\n// (2)\n\"entityQualifiedName\"\n:\n{\n// (3)\n\"value\"\n:\n\"FzCMyPR2LxkPFgr8eNGrq\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"typeName\"\n:\n{\n// (4)\n\"value\"\n:\n\"AtlasGlossary\"\n}\n}\n}\n]\nTo retrieve history for a specific asset by that asset's qualifiedName, you need to combine several conditions.\nYou need a term query for both conditions.\nOne condition you must provide is for the\nentityQualifiedName\n, giving the qualifiedName of the asset for which you want to retrieve history.\nYou also need to define the\ntypeName\nof the asset for which you want to retrieve history, when retrieving by qualifiedName.\nRun the search\n¶\n3.0.0\n4.0.0\nTo now run the search, we call the\nsearch()\nmethod against our request object:\nJava\nPython\nKotlin\nRaw REST API\nRun the search\n5\n6\n7\nAuditSearchResponse\nresponse\n=\nrequest\n.\nsearch\n(\nclient\n);\nlog\n.\ninfo\n(\nresponse\n.\ngetCount\n());\n// (1)\nList\n<\nEntityAudit\n>\nresults\n=\nresponse\n.",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 6
    }
  },
  {
    "content": "Java\nPython\nKotlin\nRaw REST API\nRun the search\n5\n6\n7\nAuditSearchResponse\nresponse\n=\nrequest\n.\nsearch\n(\nclient\n);\nlog\n.\ninfo\n(\nresponse\n.\ngetCount\n());\n// (1)\nList\n<\nEntityAudit\n>\nresults\n=\nresponse\n.\ngetEntityAudits\n();\n// (2)\nThe\ngetCount()\nmethod gives the total number of activities. Note that this could be smaller than the number requested, if fewer activities have occurred against the asset than the number used in the request.\nThe details of each activity can be accessed through the\ngetEntityAudits()\nmethod on the response.\nRun the search\n17\n18\nresponse\n=\nclient\n.\naudit\n.\nsearch\n(\ncriteria\n=\nrequest\n,\nbulk\n=\nFalse\n)\n#(1)\nLOGGER\n.\ninfo\n(\nresponse\n.\ntotal_count\n)\n# (2)\nclient.audit.search()\nmethod takes following parameters:\ncriteria\n: defines the search query to execute the search.\nbulk\n(\ndefault: False\n): specifies whether to execute the search in audit bulk mode for retrieving the history of assets matching the criteria. This mode is optimized for handling large results (more than\n10,000\n). When enabled (\nTrue\n), the results will be reordered based on the creation timestamp to facilitate iterating through large datasets.\nNote",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 7
    }
  },
  {
    "content": "10,000\n). When enabled (\nTrue\n), the results will be reordered based on the creation timestamp to facilitate iterating through large datasets.\nNote\nIf the number of results exceeds the predefined threshold\n(\n10,000\nassets) audit search will be automatically converted into a\nbulk\naudit search.\nThe\ntotal_count\nproperty gives the total number of activities. Note that this could be smaller than the number requested, if fewer activities have occurred against the asset than the number used in the request.\nRun the search\n5\n6\n7\nval\nresponse\n:\nAuditSearchResponse\n=\nrequest\n.\nsearch\n(\nclient\n)\nlog\n.\ninfo\n(\nresponse\n.\ncount\n)\n// (1)\nval\nresults\n=\nresponse\n.\nentityAudits\n// (2)\nThe\n.count\nmember gives the total number of activities. Note that this could be smaller than the number requested, if fewer activities have occurred against the asset than the number used in the request.\nThe details of each activity can be accessed through the\nentityAudits\nmember on the response.\nPOST /api/meta/entity/auditSearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\"dsl\"\n:\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (1)\n}\n},\n\"sort\"\n:\n[\n{\n\"created\"\n:\n{\n\"order\"\n:\n\"desc\"\n}\n}\n],\n\"track_total_hits\"",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 8
    }
  },
  {
    "content": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\"dsl\"\n:\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (1)\n}\n},\n\"sort\"\n:\n[\n{\n\"created\"\n:\n{\n\"order\"\n:\n\"desc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n// (2)\n}\n}\nReplace the contents of the\nbool\nportion of the query with the appropriate snippet from the earlier steps.\nYou must set\ntrack_total_hits\nto\ntrue\nif you want an exact count of the number of results (in particular for pagination).\nReview details of each activity\n¶\nEach\nEntityAudit\nentry contains details of what occurred during an activity.\nContextual details\n¶\n3.0.0\n1.0.0\nTo access contextual details about the activity:\nJava\nPython\nKotlin\nRaw REST API\nAccess contextual details about each activity\n8\n9\n10\n11\n12\n13\nfor\n(\nEntityAudit\nresult\n:\nresults\n)\n{\n// (1)\nAuditActionType\naction\n=\nresult\n.\ngetAction\n();\n// (2)\nString\nuser\n=\nresult\n.\ngetUser\n();\n// (3)\nLong\nwhen\n=\nresult\n.\ngetTimestamp\n();\n// (4)\nAuditDetail\ndetail\n=\nresult\n.\ngetDetail\n();\n// (5)\n...\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through\ngetAction()",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 9
    }
  },
  {
    "content": "detail\n=\nresult\n.\ngetDetail\n();\n// (5)\n...\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through\ngetAction()\n. This will tell you whether attributes were updated on the asset, an Atlan tag was added, custom metadata was changed, and so on.\nYou can access who carried out the activity through\ngetUser()\n. This will give you the username (or API token) that made the change.\nYou can review when the activity occurred through\ngetTimestamp()\n. This gives an epoch-based time (in milliseconds) for when the activity occurred.\nYou can also review what specifically changed through the activity, using\ngetDetail()\n. More information on what this includes is in the section below.\nAccess contextual details about each activity\n19\n20\n21\n22\n23\nfor\nresult\nin\nresponse\n:\n# (1)\naction\n=\nresult\n.\naction\n# (2)\nuser\n=\nresult\n.\nuser\n# (3)\nwhen\n=\nresult\n.\ntimestamp\n# (4)\ndetail\n=\nresult\n.\ndetail\n# (5)\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through the\naction",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 10
    }
  },
  {
    "content": ".\ntimestamp\n# (4)\ndetail\n=\nresult\n.\ndetail\n# (5)\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through the\naction\nproperty. This will tell you whether attributes were updated on the asset, an Atlan tag was added, custom metadata was changed, and so on.\nYou can access who carried out the activity through the\nuser\nproperty. This will give you the username (or API token) that made the change.\nYou can review when the activity occurred through then\ntimestamp\nproperty. This gives an epoch-based time (in milliseconds) for when the activity occurred.\nYou can also review what specifically changed through the activity, using the\ndetail\nproperty. More information on what this includes is in the section below.\nAccess contextual details about each activity\n8\n9\n10\n11\n12\n13\nfor\n(\nresult\nin\nresults\n)\n{\n// (1)\nval\naction\n=\nresult\n.\naction\n// (2)\nval\nuser\n=\nresult\n.\nuser\n// (3)\nval\ntimestamp\n=\nresult\n.\ntimestamp\n// (4)\nval\ndetail\n=\nresult\n.\ndetail\n// (5)\n...\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through\n.action",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 11
    }
  },
  {
    "content": "// (4)\nval\ndetail\n=\nresult\n.\ndetail\n// (5)\n...\nYou can then iterate through each activity, in reverse-chronological order (most recent first).\nYou can access the type of activity through\n.action\n. This will tell you whether attributes were updated on the asset, an Atlan tag was added, custom metadata was changed, and so on.\nYou can access who carried out the activity through\n.user\n. This will give you the username (or API token) that made the change.\nYou can review when the activity occurred through\n.timestamp\n. This gives an epoch-based time (in milliseconds) for when the activity occurred.\nYou can also review what specifically changed through the activity, using\n.detail\n. More information on what this includes is in the section below.\nResponse contains contextual details\nEach object entry in the\nentityAudits\nportion of the response will contain contextual details about a single activity on the asset.\nDetails of the change\n¶\nEach\ndetail\nof each record in the activity log tells you the details of what specifically changed through one specific activity. This can be one of three kinds of objects:\nAction\nDetail type\nContents\nENTITY_UPDATE\n,\nENTITY_CREATE",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 12
    }
  },
  {
    "content": "Action\nDetail type\nContents\nENTITY_UPDATE\n,\nENTITY_CREATE\nAn asset object (the specific subtype, such as\nColumn\nor\nTable\n)\nWhat was changed on the asset by the activity.\nCLASSIFICATION_ADD\n,\nCLASSIFICATION_DELETE\n,\nPROPAGATED_CLASSIFICATION_ADD\n,\nPROPAGATED_CLASSIFICATION_DELETE\nAn Atlan tag object\nThe Atlan tag that was added or removed.\nCUSTOM_METADATA_UPDATE\nA custom metadata object\nWhich specific custom metadata attributes (and values) were set by the activity.\n1.3.0\n1.0.0\nFor example:\nJava\nPython\nKotlin\nRaw REST API\nView specific changes made by an activity\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nif\n(\ndetail\ninstanceof\nTable\n)\n{\n// (1)\nTable\ntable\n=\n(\nTable\n)\ndetail\n;\n// (2)\nString\ndescription\n=\ntable\n.\ngetDescription\n();\n// (3)\nSet\n<\nString\n>\nclearedFields\n=\ntable\n.\ngetNullFields\n();\n// (4)\nif\n(\nclearedFields\n.\ncontains\n(\n\"description\"\n))\n{\n// (5)\n}\n}\nif\n(\ndetail\ninstanceof\nAtlanTag\n)\n{\n// (6)\nAtlanTag\ntag\n=\n(\nAtlanTag\n)\ndetail\n;\n// (7)\nString\ntagName\n=\ntag\n.\ngetTypeName\n();\n// (8)\nif\n(\ntagName\n.\nequals\n(\n\"PII\"\n))\n{\n// (9)\n...\n}\n}\nif\n(\ndetail\ninstanceof\nCustomMetadataAttributesAuditDetail\n)\n{\n// (10)\nCustomMetadataAttributesAuditDetail\ncmad\n=\n(",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 13
    }
  },
  {
    "content": "=\ntag\n.\ngetTypeName\n();\n// (8)\nif\n(\ntagName\n.\nequals\n(\n\"PII\"\n))\n{\n// (9)\n...\n}\n}\nif\n(\ndetail\ninstanceof\nCustomMetadataAttributesAuditDetail\n)\n{\n// (10)\nCustomMetadataAttributesAuditDetail\ncmad\n=\n(\nCustomMetadataAttributesAuditDetail\n)\ndetail\n;\n// (11)\nString\ncmName\n=\ncmad\n.\ngetTypeName\n();\n// (12)\nMap\n<\nString\n,\nObject\n>\nattributes\n=\ncmad\n.\ngetAttributes\n();\n// (13)\nif\n(\ncmName\n.\nequals\n(\n\"RACI\"\n)\n&&\nattributes\n.\nget\n(\n\"Responsible\"\n).\nequals\n(\n\"jsmith\"\n))\n{\n// (14)\n...\n}\n}\nYou can safely type-check the detailed object. You could generically use\nAsset\nhere instead of\nTable\n, but if you know the type of asset you've requested the history for then the detailed object should be the same detailed type.\nOnce you've type-checked it, you can then coerce it.\nFrom there you can access any properties. Note that only properties actually set by the activity will have values in this detail object. So in this example, only if the description was actually changed to a new value would the\ndescription\nvariable now have any content.\nThis also means that if a field was actually\nremoved\n(or cleared) by an activity you won't be able to distinguish that by just attempting to retrieve it. (It will be",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 14
    }
  },
  {
    "content": "variable now have any content.\nThis also means that if a field was actually\nremoved\n(or cleared) by an activity you won't be able to distinguish that by just attempting to retrieve it. (It will be\nnull\nwhether it was removed by the activity or simply wasn't changed by the activity.) To distinguish what was actually\nremoved\nby an activity, you need to use\ngetNullFields()\n. The set returned by this method will contain the names of any fields that were actually\nremoved\n(cleared) by the activity.\nYou can then take whatever action you like if a field was removed (cleared) by checking for its existence within the\ngetNullFields()\nset.\nYou can type-check the detailed object to see if it is an Atlan tag.\nOnce you've type-checked it, you can then coerce it.\nYou can access the Atlan tag name using\ngetTypeName()\n.\nYou can then compare this human-readable Atlan tag name to your expectations to take whatever action you like.\nYou can type-check the detailed object to see if it details changes to custom metadata.\nOnce you've type-checked it, you can then coerce it.\nYou can access the name of the custom metadata using\ngetTypeName()\n.",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 15
    }
  },
  {
    "content": "Once you've type-checked it, you can then coerce it.\nYou can access the name of the custom metadata using\ngetTypeName()\n.\nYou can retrieve which custom metadata attributes were changed using\ngetAttributes()\n. Since the result is a map, it will only contain attributes that were changed. If an attribute was\nremoved\n(cleared) it will have a null value in the map but the name of the attribute will still be a key in the map. If a custom metadata attribute was not changed by the activity, it will not be a key in this map.\nYou can then compare these human-readable names to your expectations to take whatever action you like.\nView specific changes made by an activity\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nif\nisinstance\n(\ndetail\n,\nTable\n):\n# (1)\ndescription\n=\ndetail\n.\ndescription\n# (2)\n...\n# (3)\nif\nisinstance\n(\ndetail\n,\nAtlanTag\n):\n# (4)\nclass_name\n=\ndetail\n.\ntype_name\n# (5)\nif\nclass_name\n==\n\"PII\"\n:\n# (6)\n...\nif\nisinstance\n(\ndetail\n,\nCustomMetadataAttributesAuditDetail\n):\n# (7)\ncm_name\n=\ndetail\n.\ntype_name\n# (8)\nattributes\n=\ndetail\n.\nattributes\n# (9)\nif\ncm_name\n==\n\"RACI\"\nand\nattributes\n[\n\"Responsible\"\n]\n==\n\"jsmith\"\n:\n# (10)\n...",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 16
    }
  },
  {
    "content": ",\nCustomMetadataAttributesAuditDetail\n):\n# (7)\ncm_name\n=\ndetail\n.\ntype_name\n# (8)\nattributes\n=\ndetail\n.\nattributes\n# (9)\nif\ncm_name\n==\n\"RACI\"\nand\nattributes\n[\n\"Responsible\"\n]\n==\n\"jsmith\"\n:\n# (10)\n...\nYou can safely type-check the detailed object. You could generically use\nAsset\nhere instead of\nTable\n, but if you know the type of asset you've requested the history for then the detailed object should be the same detailed type.\nFrom there you can access any properties. Note that only properties actually set by the activity will have values in this detail object. So in this example, only if the description was actually changed to a new value would the\ndescription\nvariable now have any content.\nYou can then take whatever action you like\nYou can type-check the detailed object to see if it is a 'AtlanTag'.\nYou can access the 'AtlanTag' name using `type_name' property.\nYou can then compare this human-readable Atlan tag name to your expectations to take whatever action you like.\nYou can type-check the detailed object to see if it details changes to custom metadata.\nYou can access the name of the custom metadata using then\ntype_name\nattribute.",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 17
    }
  },
  {
    "content": "You can type-check the detailed object to see if it details changes to custom metadata.\nYou can access the name of the custom metadata using then\ntype_name\nattribute.\nYou can retrieve which custom metadata attributes were changed using the\nattributes\npropery. Since the result is a dict, it will only contain attributes that were changed. If an attribute was\nremoved\n(cleared) it will have a null value in the dict but the name of the attribute will still be a key in the map. If a custom metadata attribute was not changed by the activity, it will not be a key in this map.\nYou can then compare these human-readable names to your expectations to take whatever action you like.\nView specific changes made by an activity\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nif\n(\ndetail\nis\nTable\n)\n{\n// (1)\nval\ndescription\n=\ndetail\n.\ndescription\n// (2)\nval\nclearedFields\n=\ndetail\n.\nnullFields\n// (3)\nif\n(\nclearedFields\n.\ncontains\n(\n\"description\"\n))\n{\n// (4)\n}\n}\nif\n(\ndetail\nis\nAtlanTag\n)\n{\n// (5)\nval\ntagName\n=\ndetail\n.\ntypeName\n// (6)\nif\n(\ntagName\n==\n\"PII\"\n)\n{\n// (7)\n...\n}\n}\nif\n(\ndetail\nis\nCustomMetadataAttributesAuditDetail\n)\n{\n// (8)\nval\ncmName\n=\ndetail\n.\ntypeName\n// (9)\nval\nattributes\n=",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 18
    }
  },
  {
    "content": "val\ntagName\n=\ndetail\n.\ntypeName\n// (6)\nif\n(\ntagName\n==\n\"PII\"\n)\n{\n// (7)\n...\n}\n}\nif\n(\ndetail\nis\nCustomMetadataAttributesAuditDetail\n)\n{\n// (8)\nval\ncmName\n=\ndetail\n.\ntypeName\n// (9)\nval\nattributes\n=\ndetail\n.\nattributes\n// (10)\nif\n(\ncmName\n==\n\"RACI\"\n&&\nattributes\n[\n\"Responsible\"\n]\n==\n\"jsmith\"\n)\n{\n// (11)\n...\n}\n}\nYou can safely type-check the detailed object. You could generically use\nAsset\nhere instead of\nTable\n, but if you know the type of asset you've requested the history for then the detailed object should be the same detailed type.\nFrom there you can access any properties. Note that only properties actually set by the activity will have values in this detail object. So in this example, only if the description was actually changed to a new value would the\ndescription\nvariable now have any content.\nThis also means that if a field was actually\nremoved\n(or cleared) by an activity you won't be able to distinguish that by just attempting to retrieve it. (It will be\nnull\nwhether it was removed by the activity or simply wasn't changed by the activity.) To distinguish what was actually\nremoved\nby an activity, you need to use\n.nullFields",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 19
    }
  },
  {
    "content": "null\nwhether it was removed by the activity or simply wasn't changed by the activity.) To distinguish what was actually\nremoved\nby an activity, you need to use\n.nullFields\n. The set returned by this method will contain the names of any fields that were actually\nremoved\n(cleared) by the activity.\nYou can then take whatever action you like if a field was removed (cleared) by checking for its existence within the\n.nullFields\nset.\nYou can type-check the detailed object to see if it is an Atlan tag.\nYou can access the Atlan tag name using\n.typeName\n.\nYou can then compare this human-readable Atlan tag name to your expectations to take whatever action you like.\nYou can type-check the detailed object to see if it details changes to custom metadata.\nYou can access the name of the custom metadata using\n.typeName\n.\nYou can retrieve which custom metadata attributes were changed using\n.attributes\n. Since the result is a map, it will only contain attributes that were changed. If an attribute was\nremoved",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 20
    }
  },
  {
    "content": ".\nYou can retrieve which custom metadata attributes were changed using\n.attributes\n. Since the result is a map, it will only contain attributes that were changed. If an attribute was\nremoved\n(cleared) it will have a null value in the map but the name of the attribute will still be a key in the map. If a custom metadata attribute was not changed by the activity, it will not be a key in this map.\nYou can then compare these human-readable names to your expectations to take whatever action you like.\nYou will need to implement your own detection and inference\nThe key point to note is that the format of the object within the\ndetail\nof each record will vary, depending on the type of activity that occurred. You will therefore need to implement your own logic for detecting and inferring what kind of details are included when retrieving these from a raw API response.\n2022-11-30\n2024-12-13\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 21
    }
  },
  {
    "content": "feedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_advanced-examples_history.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_history.json",
      "chunk_id": 22
    }
  }
]