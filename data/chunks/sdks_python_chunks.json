[
  {
    "content": "Python SDK - Developer\nSkip to content\nPython SDK\n¶\nAtlan University\nWalk through step-by-step in our\nintro to custom integration course\n(30 mins).\nObtain the SDK\n¶\nThe SDK is currently available on\npypi\n. You can use pip to install it as follows:\nInstall the SDK\npip install pyatlan\nConfigure the SDK\n¶\nThere are two ways to configure the\nSDK:\nUsing environment variables\n¶\nATLAN_API_KEY\nshould be given your Atlan\nAPI token\n, for authentication (\ndon't forget to assign one or more personas to the API token to give access to existing assets!\n)\nATLAN_BASE_URL\nshould be given your Atlan URL (for example,\nhttps://tenant.atlan.com\n)\nHere's an example of setting those environment variables:\nSet environment variables\nexport ATLAN_BASE_URL=https://tenant.atlan.com\nexport ATLAN_API_KEY=\"...\"\natlan_live_test.py\n1\n2\n3\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nOn client creation\n¶\nIf you prefer to not use environment variables, you can do the following:\natlan_live_test.py\n1\n2\n3\n4\n5\n6\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n(\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nCareful not to expose your API token!",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 0
    }
  },
  {
    "content": "atlan_live_test.py\n1\n2\n3\n4\n5\n6\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n(\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nCareful not to expose your API token!\nWe generally discourage including your API token directly in your code, in case you accidentally commit it into a (public) version control system. But it's your choice exactly how you manage the API token and including it for use within the client.\n(optional) Want to create a client using an API token GUID?\nIn some scenarios, you may not want to expose the entire API token or manage environment variables. Instead, you can provide the\nGUID\nof the API token, and the SDK will internally fetch the actual access token.\nWhen to use this approach:\nBuilding apps that use the SDK where token security is a concern\nWhen you want to avoid exposing full API tokens in your configuration\nFor containerized applications that need secure token management\nPrerequisites:\nBefore using this approach, ensure your Argo template is configured with\nCLIENT_ID\nand\nCLIENT_SECRET\n:\nArgo template configuration\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\ncontainer\n:\nimage\n:\nghcr.io/atlanhq/designation-based-group-provisioning:1.0.2",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 1
    }
  },
  {
    "content": "CLIENT_ID\nand\nCLIENT_SECRET\n:\nArgo template configuration\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\ncontainer\n:\nimage\n:\nghcr.io/atlanhq/designation-based-group-provisioning:1.0.2\nimagePullPolicy\n:\nIfNotPresent\nenv\n:\n-\nname\n:\nCLIENT_ID\nvalueFrom\n:\nsecretKeyRef\n:\nname\n:\n\"argo-client-creds\"\nkey\n:\n\"login\"\n-\nname\n:\nCLIENT_SECRET\nvalueFrom\n:\nsecretKeyRef\n:\nname\n:\n\"argo-client-creds\"\nkey\n:\n\"password\"\nPython\n7.1.4\nCreating a client with API token GUID\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nfrom\npyatlan.model.query\nimport\nCompoundQuery\nfrom\npyatlan.model.assets\nimport\nAtlasGlossary\n# Initialize client using API token GUID\ntoken_client\n=\nAtlanClient\n.\nfrom_token_guid\n(\nguid\n=\n\"c5e249d7-abcc-4ad5-87a1-831d7b810df4\"\n# (1)\n)\n# Perform operations with the client (requires appropriate permissions)\nresults\n=\n(\nFluentSearch\n()\n.\nwhere\n(\nCompoundQuery\n.\nactive_assets\n())\n.\nwhere\n(\nCompoundQuery\n.\nasset_type\n(\nAtlasGlossary\n))\n.\npage_size\n(\n100\n)\n.\nexecute\n(\nclient\n=\ntoken_client\n)\n)\nassert\nresults\nand\nresults\n.\ncount\n>=\n1\nprint\n(\nf\n\"Found\n{\nresults\n.\ncount\n}\nglossary assets\"\n)",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 2
    }
  },
  {
    "content": "CompoundQuery\n.\nasset_type\n(\nAtlasGlossary\n))\n.\npage_size\n(\n100\n)\n.\nexecute\n(\nclient\n=\ntoken_client\n)\n)\nassert\nresults\nand\nresults\n.\ncount\n>=\n1\nprint\n(\nf\n\"Found\n{\nresults\n.\ncount\n}\nglossary assets\"\n)\nCreate client from token GUID\n: Use\nAtlanClient.from_token_guid()\nto create a client using the GUID of an API token. The SDK will automatically fetch the actual access token using the configured\nCLIENT_ID\nand\nCLIENT_SECRET\n.\nThat's it — once these are set you can start using your SDK to make live calls against your Atlan instance! 🎉\nWhat's next?\n¶\nDelve into more detailed examples:\nCommon tasks\nCommon operations on assets, that are available across all assets.\nDiscover actions\nAsset-specific\nOperations that are specific to certain assets.\nFocus on a specific kind of asset\nGovernance structures\nOperations dealing with governance structures, rather than assets.\nManage governance structures\nSamples\nReal code samples our customers use to solve particular use cases.\nReview live samples\nSearching\nDelve deep into searching and aggregating metadata.\nLearn more about searching\nEvents\nDelve deep into the details of the events Atlan triggers.\nLearn more about events\nError-handling\n¶",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 3
    }
  },
  {
    "content": "Searching\nDelve deep into searching and aggregating metadata.\nLearn more about searching\nEvents\nDelve deep into the details of the events Atlan triggers.\nLearn more about events\nError-handling\n¶\nThe SDK defines exceptions for the following categories of error:\nException\nDescription\nApiConnectionError\nErrors when the SDK is unable to connect to the API, for example due to a lack of network access or timeouts.\nAuthenticationError\nErrors when the API token configured for the SDK is invalid or expired.\nConflictError\nErrors when there is some conflict with an existing\nasset\nand the operation cannot be completed as a result.\nInvalidRequestError\nErrors when the request sent to Atlan does not match its expectations. If you are using the built-in methods like\ntoCreate()\nand\ntoUpdate()\nthis exception should be treated as a bug in the SDK. (These operations take responsibility for avoiding this error.)\nLogicError\nErrors where some assumption made in the SDK's code is proven incorrect. If ever raised, they should be reported as bugs against the SDK.\nNotFoundError\nErrors when the requested resource or\nasset\ndoes not exist in Atlan.\nPermissionError",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 4
    }
  },
  {
    "content": "NotFoundError\nErrors when the requested resource or\nasset\ndoes not exist in Atlan.\nPermissionError\nErrors when the API token used by the SDK does not have permission to access a resource or carry out an operation on a specific\nasset\n.\nRateLimitError\nErrors when the Atlan server is being overwhelmed by requests.\nA given API call could fail due to all of the errors above. So these all extend a generic\nAtlanError\nexception, and all API operations can potentially raise\nAtlanError\n.\nExample\nFor example, when creating a connection there is an asynchronous process that grants permissions to the admins of that connection. So there can be a slight delay between creating the connection and being permitted to do any operations with the connection. During that delay, any attempt to interact with the connection will result in a\nPermissionError\n, even if your API token was used to create connection in the first place.\nAnother example you may occasionally hit is some network issue that causes your connection to Atlan to be interrupted. In these cases, an\nApiConnectionError\nwill be raised.\nDon't worry, the SDK retries automatically\nWhile these are useful to know for detecting issues, the SDK",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 5
    }
  },
  {
    "content": "ApiConnectionError\nwill be raised.\nDon't worry, the SDK retries automatically\nWhile these are useful to know for detecting issues, the SDK\nautomatically retries\non such problems.\nAdvanced configuration\n¶\nAtlan is a distributed, cloud-native application, where network problems can arise. The SDK therefore automatically attempts to handle ephemeral problems.\nLogging\n¶\nThe SDK uses\nlogging module\nof the standard library that can provide a flexible framework for emitting log messages.\nPython\nYou can enable logging for your SDK script by\nadding the following lines above your snippets:\natlan_python_sdk_test.py\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nimport\nlogging\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAtlasGlossary\nlogging\n.\nbasicConfig\n(\nlevel\n=\nlogging\n.\nDEBUG\n)\n# (1)\n# logging.config.fileConfig('pyatlan/logging.conf') # (2)\n# SDK code snippets\nclient\n=\nAtlanClient\n()\nglossary\n=\nclient\n.\nasset\n.\nget_by_guid\n(\nasset_type\n=\nAtlasGlossary\n,\nguid\n=\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n)\nYou can enable logging by using\nbasicConfig\nwith various logging levels:\nlogging.DEBUG\n: used to give detailed information,",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 6
    }
  },
  {
    "content": "=\nAtlasGlossary\n,\nguid\n=\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n)\nYou can enable logging by using\nbasicConfig\nwith various logging levels:\nlogging.DEBUG\n: used to give detailed information,\ntypically of interest only when diagnosing problems (mostly used level in SDK).\nlogging.INFO\n: used to confirm that things are working as expected.\nlogging.WARN\n: used as an indication that something unexpected happened,\nor as a warning of some problem in the near future.\nlogging.ERROR\n: indicates that due to a more serious problem, the SDK\nhas not been able to perform some operation.\nlogging.CRITICAL\n: indicates a serious error, suggesting that the\nprogram itself may be unable to continue running (not used in SDK as of now).\nBy default, logs will appear in your console.\nIf you want to use file logging, you can add the following line:\nlogging.config.fileConfig('pyatlan/logging.conf')\n: this will\ngenerate logs according to the configuration defined in\npyatlan/logging.conf\nand will generate two log files:\n/tmp/pyatlan.log\n: default log file.\n/tmp/pyatlan.json\n: log file in JSON format.\nRetries\n¶\nThe SDK handles automatically retrying your requests when it detects certain problems:\nWhen there is a",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 7
    }
  },
  {
    "content": "/tmp/pyatlan.log\n: default log file.\n/tmp/pyatlan.json\n: log file in JSON format.\nRetries\n¶\nThe SDK handles automatically retrying your requests when it detects certain problems:\nWhen there is a\n403\nresponse indicating that permission for an operation is not (yet) available.\nWhen there is a\n429\nresponse indicating that the request rate limit has been exceeded, and you need to retry after some time.\nWhen there is a\n50x\nresponse indicating that something went wrong on the server side.\nMore details on how they work\nIf any request encounters one of these problems, it will be retried. Before each retry, the SDK will apply a delay using an exponential backoff.\n(Currently the values for the exponential backoff are not configurable.)\nFor each request that encounters any of these problems, only up to a maximum number of retries will be attempted. (This is set to\n5\nby default.)\nTimeouts\n¶\nBy default, the SDK\nAtlanClient()\nhas the following timeout settings:\nread_timeout\n:\n900.0\nseconds (\n15\nminutes)\nconnect_timeout\n:\n30.0\nseconds\nIf you need to override these defaults, you can do so as shown in the example below:\nOverride SDK client default timeout\n1\n2\n3\n4\n5\n6\n7\nfrom\npyatlan.client.atlan",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 8
    }
  },
  {
    "content": "connect_timeout\n:\n30.0\nseconds\nIf you need to override these defaults, you can do so as shown in the example below:\nOverride SDK client default timeout\n1\n2\n3\n4\n5\n6\n7\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\n# Timeout values in seconds\nclient\n.\nread_timeout\n=\n1800.0\n# 30 minutes\nclient\n.\nconnect_timeout\n=\n60.0\n# 1 minute\nMulti-tenant connectivity\n¶\nSince version 1.0.0, the Python SDK supports connecting to multiple tenants.[^1] When you use the\nAtlanClient()\nmethod you are actually setting a\ndefault\nclient. This default client will be used behind-the-scenes for any operations that need information specific to an Atlan tenant.\nWhen you want to override that default client you can create a new one and use the\nset_default_client()\nmethod to change it:\nCreate a client\n1\n2\n3\n4\n5\n6\n7\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient2\n=\nAtlanClient\n(\n# (1)\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nAtlan\n.\nset_default_client\n(\nclient2\n)\n# (2)\nThe\nAtlanClient()\nmethod will return a client for the given base URL, creating a new client\nand\nsetting this new client as the default client.",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 9
    }
  },
  {
    "content": "=\n\"...\"\n)\nAtlan\n.\nset_default_client\n(\nclient2\n)\n# (2)\nThe\nAtlanClient()\nmethod will return a client for the given base URL, creating a new client\nand\nsetting this new client as the default client.\nIf you want to switch between clients that you have already created, you can use\nAtlan.set_default_client()\nto change between them.\nLimit the number of clients to those you must have\nEach client you create maintains its own independent copy of various caches. So the more clients you have, the more resources your code will consume. For this reason, we recommended limiting the number of clients you create to the bare minimum you require — ideally just a single client per tenant.\n(And since in the majority of use cases you only need access to a single tenant, this means you can most likely just rely on the default client and the fallback behavior.)\nProxies\n¶\nPyatlan uses the\nRequests\nlibrary which supports\nproxy configuration",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 10
    }
  },
  {
    "content": "Proxies\n¶\nPyatlan uses the\nRequests\nlibrary which supports\nproxy configuration\nvia environment variables. Requests relies on the proxy configuration defined by standard environment variables http_proxy, https_proxy, no_proxy, and all_proxy. Uppercase variants of these variables are also supported. You can therefore set them to configure Pyatlan (only set the ones relevant to your needs):\nConfigure a proxy\nexport\nHTTP_PROXY\n=\n\"http://10.10.1.10:3128\"\nexport\nHTTPS_PROXY\n=\n\"http://10.10.1.10:1080\"\nexport\nALL_PROXY\n=\n\"socks5://10.10.1.10:3434\"\nTo use HTTP Basic Auth with your proxy, use the\nhttp://user:password@host/\nsyntax in any of the above configuration entries:\nConfigure a proxy with authentication\nexport\nHTTPS_PROXY\n=\n\"http://user:pass@10.10.1.10:1080\"\nCurrently, the way this is implemented limits you to either avoiding multiple threads in your Python code (if you need to use multiple clients), or if you want to use multiple threads you should only use a single client.\nAsynchronous SDK operations\n¶\n8.0.0\nStarting from version\nv8.0\n, it's possible to run SDK code asynchronously. The async API is designed to mirror the synchronous SDK clients, maintaining familiar\nclient",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 11
    }
  },
  {
    "content": "¶\n8.0.0\nStarting from version\nv8.0\n, it's possible to run SDK code asynchronously. The async API is designed to mirror the synchronous SDK clients, maintaining familiar\nclient\npatterns and\ncaching\nbehavior to ensure a smooth developer experience (\nsee release notes for complete changes\n).\nTo get started, you need to initialize an\nAsyncAtlanClient\n:\nCreate an async client\n1\n2\n3\n4\n5\n6\nfrom\npyatlan.client.aio\nimport\nAsyncAtlanClient\nclient\n=\nAsyncAtlanClient\n(\n# (1)\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nCreate an async client using the same configuration pattern as the synchronous client.\nBasic search example\n¶\nThis example demonstrates how to perform an asynchronous search for tables. The API is nearly identical to the synchronous version, with the addition of\nasync/await\nkeywords:\nRun an async search\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nimport\nasyncio\nfrom\npyatlan.client.aio\nimport\nAsyncAtlanClient\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nfrom\npyatlan.model.search\nimport\nTerm\nfrom\npyatlan.model.assets\nimport\nAsset\nclient\n=\nAsyncAtlanClient\n(\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nasync\ndef",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 12
    }
  },
  {
    "content": "import\nFluentSearch\nfrom\npyatlan.model.search\nimport\nTerm\nfrom\npyatlan.model.assets\nimport\nAsset\nclient\n=\nAsyncAtlanClient\n(\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nasync\ndef\nsearch_tables\n():\n\"\"\"Search for all active tables\"\"\"\nresults\n=\nawait\nclient\n.\nasset\n.\nsearch\n(\n# (1)\ncriteria\n=\nFluentSearch\n()\n.\nwhere\n(\nTerm\n.\nwith_state\n(\n\"ACTIVE\"\n))\n.\nwhere\n(\nAsset\n.\nTYPE_NAME\n.\neq\n(\n\"Table\"\n))\n.\nto_request\n(),\n)\n# Process results asynchronously\nasync\nfor\ntable\nin\nresults\n:\n# (2)\nprint\n(\nf\n\"Found table:\n{\ntable\n.\nname\n}\n\"\n)\nreturn\nresults\n.\ncount\n# Run the async function\ntotal_count\n=\nasyncio\n.\nrun\n(\nsearch_tables\n())\nprint\n(\nf\n\"Total tables found:\n{\ntotal_count\n}\n\"\n)\nAsync search\n: Build search requests using the same\nFluentSearch\npattern as the synchronous client. Use\nawait\nsince the async client returns a coroutine object.\nAsync iteration\n: Use\nasync for\nto iterate through results, as the async client returns\nAsyncIndexSearchResults\nwhich implements\n__aiter__\n.\nConcurrent operations for improved performance\n¶\nThe real power of\nasync\ncomes from running multiple operations\nconcurrently",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 13
    }
  },
  {
    "content": "AsyncIndexSearchResults\nwhich implements\n__aiter__\n.\nConcurrent operations for improved performance\n¶\nThe real power of\nasync\ncomes from running multiple operations\nconcurrently\n. Instead of waiting for each operation to complete sequentially, you can execute them in parallel and reduce total execution time:\nPerformance comparison:\nSynchronous\n: Total time =\noperation₁ + operation₂ + ... + operationₙ\nAsynchronous\n: Total time =\nmax(operation₁, operation₂, ..., operationₙ)\nRun concurrent async searches\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\nimport\nasyncio\nfrom\npyatlan.client.aio\nimport\nAsyncAtlanClient\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nfrom\npyatlan.model.search\nimport\nTerm\nfrom\npyatlan.model.assets\nimport\nAsset\nclient\n=\nAsyncAtlanClient\n(\nbase_url\n=\n\"https://tenant.atlan.com\"\n,\napi_key\n=\n\"...\"\n)\nasync\ndef\nsearch_tables\n():\n# (1)\n\"\"\"Search for all active tables\"\"\"\nresults\n=\nawait\nclient\n.\nasset\n.\nsearch\n(\ncriteria\n=\nFluentSearch\n()\n.\nwhere\n(\nTerm\n.\nwith_state\n(\n\"ACTIVE\"\n))\n.\nwhere\n(\nAsset\n.\nTYPE_NAME\n.\neq\n(\n\"Table\"\n))\n.\nto_request\n(),\n)\nreturn\nresults\n.",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 14
    }
  },
  {
    "content": "results\n=\nawait\nclient\n.\nasset\n.\nsearch\n(\ncriteria\n=\nFluentSearch\n()\n.\nwhere\n(\nTerm\n.\nwith_state\n(\n\"ACTIVE\"\n))\n.\nwhere\n(\nAsset\n.\nTYPE_NAME\n.\neq\n(\n\"Table\"\n))\n.\nto_request\n(),\n)\nreturn\nresults\n.\ncount\nasync\ndef\nsearch_columns\n():\n# (2)\n\"\"\"Search for all active columns\"\"\"\nresults\n=\nawait\nclient\n.\nasset\n.\nsearch\n(\ncriteria\n=\nFluentSearch\n()\n.\nwhere\n(\nTerm\n.\nwith_state\n(\n\"ACTIVE\"\n))\n.\nwhere\n(\nAsset\n.\nTYPE_NAME\n.\neq\n(\n\"Column\"\n))\n.\nto_request\n(),\n)\nreturn\nresults\n.\ncount\nasync\ndef\nconcurrent_search\n():\n\"\"\"Run table and column searches concurrently\"\"\"\n# Execute both searches at the same time\ntable_count\n,\ncolumn_count\n=\nawait\nasyncio\n.\ngather\n(\n# (3)\nsearch_tables\n(),\nsearch_columns\n()\n)\nreturn\n{\n\"tables\"\n:\ntable_count\n,\n\"columns\"\n:\ncolumn_count\n,\n\"total_assets\"\n:\ntable_count\n+\ncolumn_count\n}\nasync\ndef\nmain\n():\n\"\"\"Main function to execute concurrent asset searches\"\"\"\nreturn\nawait\nconcurrent_search\n()\nif\n__name__\n==\n\"__main__\"\n:\nresult\n=\nasyncio\n.\nrun\n(\nmain\n())\nprint\n(\nf\n\"Search completed:\n{\nresult\n[\n'total_assets'\n]\n}\nassets found\"\n)\nprint\n(\nf\n\"Tables:\n{\nresult\n[\n'tables'\n]\n}\n, Columns:\n{\nresult\n[\n'columns'\n]\n}\n\"\n)\nTables search function",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 15
    }
  },
  {
    "content": ".\nrun\n(\nmain\n())\nprint\n(\nf\n\"Search completed:\n{\nresult\n[\n'total_assets'\n]\n}\nassets found\"\n)\nprint\n(\nf\n\"Tables:\n{\nresult\n[\n'tables'\n]\n}\n, Columns:\n{\nresult\n[\n'columns'\n]\n}\n\"\n)\nTables search function\n: Define an async function to search for tables and return the count.\nColumns search function\n: Define an async function to search for columns and return the count.\nConcurrent execution\n: Use\nasyncio.gather()\nto run both searches simultaneously. You can also use\nasyncio.as_completed()\nif you want to process results as they become available:\ntasks\n=\n[\nsearch_tables\n(),\nsearch_columns\n()]\nfor\ncoro\nin\nasyncio\n.\nas_completed\n(\ntasks\n):\nresult\n=\nawait\ncoro\nprint\n(\nf\n\"Operation completed with\n{\nresult\n}\nassets\"\n)\nWhen to use async\nAsync is most beneficial when you have:\nMultiple independent operations\nthat can run concurrently\nI/O-heavy workloads\nlike API calls, database queries, or file operations\nLong-running operations\nwhere parallelization provides significant time savings\nFor simple, single operations, the synchronous client may be more straightforward to use.\n2023-06-28\n2025-08-20\nWas this page helpful?\nThanks for your feedback!",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 16
    }
  },
  {
    "content": "For simple, single operations, the synchronous client may be more straightforward to use.\n2023-06-28\n2025-08-20\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "sdks_python.html",
      "source_type": "sdk",
      "file": "sdks_python.json",
      "chunk_id": 17
    }
  }
]