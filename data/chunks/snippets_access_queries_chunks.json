[
  {
    "content": "Running SQL queries on an asset - Developer\nSkip to content\nRun queries on an asset\n1.9.3\n4.0.0\nTo run SQL queries on an asset:\nJava\nPython\nKotlin\nRaw REST API\nRunning SQL query on an asset\n1\n2\n3\n4\n5\n6\n7\nQueryRequest\nquery\n=\nQueryRequest\n.\ncreator\n(\n// (1)\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n\"default/snowflake/1705755637\"\n)\n.\ndefaultSchema\n(\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n)\n// (2)\n.\nbuild\n();\nQueryResponse\nresponse\n=\nclient\n.\nqueries\n.\nstream\n(\nquery\n);\n// (3)\nTo create a minimal query object, use the\nQueryRequest\ncreator method and provide the following arguments:\nSQL query to run.\nunique name of the connection to use for the query.\nYou must provide default schema name to use for unqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nRunning SQL query on an asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.query\nimport\nQueryRequest\nclient\n=\nAtlanClient\n()\nquery\n=\nQueryRequest\n(\n# (1)\nsql\n=\n'SELECT * FROM \"PACKAGETYPES\" LIMIT 50;'\n,\ndata_source_name\n=\n\"default/snowflake/1705755637\"\n,\ndefault_schema\n=\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n,\n)\nresponse\n=\nclient\n.\nqueries\n.",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 0
    }
  },
  {
    "content": "(\n# (1)\nsql\n=\n'SELECT * FROM \"PACKAGETYPES\" LIMIT 50;'\n,\ndata_source_name\n=\n\"default/snowflake/1705755637\"\n,\ndefault_schema\n=\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n,\n)\nresponse\n=\nclient\n.\nqueries\n.\nstream\n(\nrequest\n=\nquery\n)\n# (2)\nTo build a query, you need to use the\nQueryRequest\nand provide the following parameters:\nsql\n: SQL query to run.\ndata_source_name\n: unique name of the connection to use for the query.\ndefault_schema\n: default schema name to use for\nunqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nRunning SQL query on an asset\n1\n2\n3\n4\n5\n6\n7\nval\nquery\n=\nQueryRequest\n.\ncreator\n(\n// (1)\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n\"default/snowflake/1705755637\"\n)\n.\ndefaultSchema\n(\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n)\n// (2)\n.\nbuild\n()\nval\nresponse\n=\nclient\n.\nqueries\n.\nstream\n(\nquery\n)\n// (3)\nTo create a minimal query object, use the\nQueryRequest\ncreator method and provide the following arguments:\nSQL query to run.\nunique name of the connection to use for the query.\nYou must provide default schema name to use for unqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 1
    }
  },
  {
    "content": "You must provide default schema name to use for unqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nPOST /api/sql/query/stream\n1\n2\n3\n4\n5\n{\n\"sql\"\n:\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n// (1)\n\"dataSourceName\"\n:\n\"default/snowflake/1705755637\"\n,\n\"defaultSchema\"\n:\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n}\nYou must provide the following properties:\nsql\n: SQL query to run.\ndataSourceName\n: unique name of the connection to use for the query.\ndefaultSchema\n: default schema name to use for unqualified objects\nin the SQL, in the form\nDB.SCHEMA\n.\nUse API token to run queries\nÂ¶\n7.0.0\n4.0.0\nYou can also grant permission to run SQL queries on an asset using an API token, if you want. (This must be explicitly granted, as it is not possible by default.) You can even mask certain information through data policies on purposes linked to the API token.\nAPI token permissions\nBefore executing queries on an asset using an API token, ensure that the\ntoken is linked\nto\na persona with a data policy\nthat\npermits queries for that specific asset\n.\nJava\nPython\nKotlin\nRaw REST API\nRunning SQL query on an asset with API token\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 2
    }
  },
  {
    "content": "token is linked\nto\na persona with a data policy\nthat\npermits queries for that specific asset\n.\nJava\nPython\nKotlin\nRaw REST API\nRunning SQL query on an asset with API token\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nAuthPolicy\ndata\n=\nPurpose\n.\ncreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\npurpose\n.\ngetGuid\n(),\n// (3)\nAuthPolicyType\n.\nDATA_MASK\n,\n// (4)\nnull\n,\nList\n.\nof\n(\ntoken\n.\ngetApiTokenUsername\n()),\n// (5)\nfalse\n)\n.\npolicyMaskType\n(\nDataMaskingType\n.\nREDACT\n)\n// (6)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nclient\n.\nassets\n.\nsave\n(\nList\n.\nof\n(\ndata\n),\nfalse\n);\n// (7)\ntry\n(\nAtlanClient\ntokenClient\n=\nnew\nAtlanClient\n(\nclient\n.\ngetBaseUrl\n(),\ntoken\n.\ngetAttributes\n().\ngetAccessToken\n()))\n{\n// (8)\nQueryRequest\nquery\n=\nQueryRequest\n.\ncreator\n(\n// (9)\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n\"default/snowflake/1705755637\"\n)\n.\ndefaultSchema\n(\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n)\n// (10)\n.\nbuild\n();\nQueryResponse\nresponse\n=\ntokenClient\n.\nqueries\n.\nstream\n(\nquery\n);\n// (11)\n}\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the\nPurpose",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 3
    }
  },
  {
    "content": "(\nquery\n);\n// (11)\n}\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the\nPurpose\nto attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\nSet the policy user to the API\ntoken\n.\nSet the type of masking to\nREDACT\nto redact the tagged elements in the query response.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod with the policy object you've built.\nCreate a new\nAtlanClient\nset up to use the new API token.\nTo create a minimal query object, use the\nQueryRequest\ncreator method and provide the following arguments:\nSQL query to run.\nunique name of the connection to use for the query.\nYou must provide default schema name to use for unqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nRunning SQL query on an asset with API token\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.query\nimport\nQueryRequest\nclient\n=\nAtlanClient\n()\ndata\n=",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 4
    }
  },
  {
    "content": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.query\nimport\nQueryRequest\nclient\n=\nAtlanClient\n()\ndata\n=\nPurpose\n.\ncreate_data_policy\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"Mask the data\"\n,\n# (3)\npurpose_id\n=\npurpose\n.\nguid\n,\n# (4)\npolicy_type\n=\nAuthPolicyType\n.\nDATA_MASK\n,\n# (5)\npolicy_users\n=\n{\nf\n\"service-account-\n{\ntoken\n.\nclient_id\n}\n\"\n},\n# (6)\nall_users\n=\nFalse\n,\n# (7)\n)\ndata\n.\npolicy_mask_type\n=\nDataMaskingType\n.\nREDACT\n# (8)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndata\n)\n# (9)\ntoken_client\n=\nAtlanClient\n(\n# (10)\nbase_url\n=\nclient\n.\nbase_url\n,\napi_key\n=\ntoken\n.\nattributes\n.\naccess_token\n)\nquery\n=\nQueryRequest\n(\n# (11)\nsql\n=\n'SELECT * FROM \"PACKAGETYPES\" LIMIT 50;'\n,\ndata_source_name\n=\n\"default/snowflake/1705755637\"\n,\ndefault_schema\n=\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n,\n)\nresponse\n=\ntoken_client\n.\nqueries\n.\nstream\n(\nrequest\n=\nquery\n)\n# (12)\nUse the\ncreate_data_policy()\nmethod to start building\na data policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the\npurpose\nto attach this policy to.",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 5
    }
  },
  {
    "content": "a data policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the\npurpose\nto attach this policy to.\nSpecify the type of policy (granting, denying or\nmasking the data of assets with the tags in the purpose).\nSet the\npolicy_users\nto the API\ntoken\n.\nSet the\nall_users\noption to\nFalse\nas\nthis policy is intended specifically for the API token.\nSet the type of masking to\nREDACT\nto redact the tagged elements in the query response.\nTo then add the policy to the purpose in Atlan,\ncall the\nsave()\nmethod with the policy object you've built.\nCreate a new client with the API token.\nTo build a query, you need to use the\nQueryRequest\nand provide the following parameters:\nsql\n: SQL query to run.\ndata_source_name\n: unique name of the connection to use for the query.\ndefault_schema\n: default schema name to use for\nunqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nRunning SQL query on an asset with API token\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nval\ndata\n=\nPurpose\n.\ncreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\npurpose\n.\ngetGuid",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 6
    }
  },
  {
    "content": "method.\nRunning SQL query on an asset with API token\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nval\ndata\n=\nPurpose\n.\ncreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\npurpose\n.\ngetGuid\n(),\n// (3)\nAuthPolicyType\n.\nDATA_MASK\n,\n// (4)\nnull\n,\nList\n.\nof\n(\ntoken\n.\ngetApiTokenUsername\n()),\n// (5)\nfalse\n)\n.\npolicyMaskType\n(\nDataMaskingType\n.\nREDACT\n)\n// (6)\n.\nbuild\n()\nval\nresponse\n=\nclient\n.\nassets\n.\nsave\n(\nlistOf\n(\ndata\n),\nfalse\n)\n// (7)\nAtlanClient\n(\nclient\n.\ngetBaseUrl\n(),\ntoken\n.\ngetAttributes\n().\ngetAccessToken\n()).\nuse\n{\ntokenClient\n->\n// (8)\nval\nquery\n=\nQueryRequest\n.\ncreator\n(\n// (9)\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n\"default/snowflake/1705755637\"\n)\n.\ndefaultSchema\n(\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n)\n// (10)\n.\nbuild\n()\nval\nresponse\n=\ntokenClient\n.\nqueries\n.\nstream\n(\nquery\n)\n// (11)\n}\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the\nPurpose\nto attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\nSet the policy user to the API\ntoken\n.\nSet the type of masking to",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 7
    }
  },
  {
    "content": "to attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\nSet the policy user to the API\ntoken\n.\nSet the type of masking to\nREDACT\nto redact the tagged elements in the query response.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod with the policy object you've built.\nCreate a new\nAtlanClient\nset up to use the new API token.\nTo create a minimal query object, use the\nQueryRequest\ncreator method and provide the following arguments:\nSQL query to run.\nunique name of the connection to use for the query.\nYou must provide default schema name to use for unqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nYou can now execute the query using the\nstream()\nmethod.\nPOST /api/sql/query/stream\n1\n2\n3\n4\n5\n{\n\"sql\"\n:\n\"SELECT * FROM \\\"PACKAGETYPES\\\" LIMIT 50;\"\n,\n// (1)\n\"dataSourceName\"\n:\n\"default/snowflake/1705755637\"\n,\n\"defaultSchema\"\n:\n\"RAW.WIDEWORLDIMPORTERS_WAREHOUSE\"\n}\nYou must provide the following properties:\nsql\n: SQL query to run.\ndataSourceName\n: unique name of the connection to use for the query.\ndefaultSchema\n: default schema name to use for\nunqualified objects in the SQL, in the form",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 8
    }
  },
  {
    "content": "sql\n: SQL query to run.\ndataSourceName\n: unique name of the connection to use for the query.\ndefaultSchema\n: default schema name to use for\nunqualified objects in the SQL, in the form\nDB.SCHEMA\n.\nPolicy implementation delay\nBe aware that there is a delay of a few minutes after applying new policies\nto the token before they become fully effective. If you run a query immediately\nafter creating the policy, you may still observe unredacted information until\nthe policy is fully implemented.\n2024-01-31\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ð\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_access_queries.html",
      "source_type": "sdk",
      "file": "snippets_access_queries.json",
      "chunk_id": 9
    }
  }
]