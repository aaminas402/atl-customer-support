[
  {
    "content": "Manage cube assets - Developer\nSkip to content\nManage cube assets\n¶\nYou can represent most multidimensional cube objects through a common set of multidimensional dataset assets. You can use this structure to create assets for any cube-oriented system you like:\nerDiagram\nConnection ||--o{ Cube : contains\nCube ||--o{ CubeDimension : cubeDimensions\nCubeDimension ||--o{ CubeHierarchy : cubeHierarchies\nCubeHierarchy ||--o{ CubeField : cubeFields\nCubeField ||--o{ CubeField : cubeNestedFields\nIn general, these should be:\nCreated in top-down order\n(connection, then cube, then dimension, and so on)\nDeleted in bottom-up order (fields, then hierarchies, then dimensions, then cubes, then connection)\n1\nWhere do the icons come from?\nAtlan will display icons for these assets based on the\ntype of connector\nyou define in the Connection. You can use API-first types like\nessbase\n, for example.\nHowever, note that in all cases the same structure (and types) as illustrated above are used — there are no differences in types between these multidimensional dataset assets across different systems.\nAsset structure\n¶\nConnection\n¶\n7.0.0\n4.0.0\nA\nconnection\nrequires a\nname\nand\nqualifiedName",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 0
    }
  },
  {
    "content": "Asset structure\n¶\nConnection\n¶\n7.0.0\n4.0.0\nA\nconnection\nrequires a\nname\nand\nqualifiedName\n. As noted above, a specific setting is also required to determine the icons to use for assets in the connection. In addition,\nat least one\nof\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nString\nadminRoleGuid\n=\nclient\n.\ngetRoleCache\n().\ngetIdForName\n(\n\"$admin\"\n);\n// (1)\nConnection\nconnection\n=\nConnection\n.\ncreator\n(\n// (2)\n\"cube-connection\"\n,\n// (3)\nAtlanConnectorType\n.\nESSBASE\n,\n// (4)\nList\n.\nof\n(\nadminRoleGuid\n),\n// (5)\nList\n.\nof\n(\n\"group2\"\n),\n// (6)\nList\n.\nof\n(\n\"jsmith\"\n))\n// (7)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nconnection\n.\nsave\n(\nclient\n);\n// (8)\nString\nconnectionQualifiedName\n=\nresponse\n.\ngetCreatedAssets\n().\nget\n(\n0\n).\ngetQualifiedName\n();\n// (9)\nRetrieve the GUID for the admin role, to use later for defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection.\nDetermines the icon",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 1
    }
  },
  {
    "content": "Build up the minimum request to create a connection.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection.\nDetermines the icon\nThis determines the icon that Atlan will use for all the assets in the connection.\nList the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 2
    }
  },
  {
    "content": "At least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nActually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.)\nCreate a cube connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nConnection\n,\nCube\n,\nCubeDimension\n,\nCubeHierarchy\n,\nCubeField\nfrom\npyatlan.model.enums\nimport\nAtlanConnectorType\nclient\n=\nAtlanClient\n()\nadmin_role_guid\n=\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)\n# (1)\nconnection\n=\nConnection\n.\ncreator\n(\n# (2)\nclient\n=\nclient\n,\n# (3)\nname\n=\n\"cube-connection\"\n,\n# (4)\nconnector_type\n=\nAtlanConnectorType\n.\nESSBASE\n,\n# (5)\nadmin_roles\n=\n[\nadmin_role_guid\n],\n# (6)\nadmin_groups\n=\n[\n\"group2\"\n],\n# (7)\nadmin_users\n=\n[\n\"jsmith\"\n],\n# (8)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nconnection\n)\n# (9)\nconnection_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nConnection\n)[\n0\n]\n.\nqualified_name\n# (10)",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 3
    }
  },
  {
    "content": "=\n[\n\"jsmith\"\n],\n# (8)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nconnection\n)\n# (9)\nconnection_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nConnection\n)[\n0\n]\n.\nqualified_name\n# (10)\nRetrieve the GUID for the admin role, to use later for defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nYou must provide a client instance.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection.\nDetermines the icon\nThis determines the icon that Atlan will use for all the assets in the connection.\nList the workspace roles that should be able to administer the connection (if any, defaults to\nNone\n). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nList the group names that can administer this connection (if any, defaults to\nNone\n). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 4
    }
  },
  {
    "content": "None\n). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nList the user names that can administer this connection (if any, defaults to\nNone\n). Note that the values here are the username(s) of the user(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nActually call Atlan to create the connection.\nRetrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some checks first.)\nCreate a cube connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\nadminRoleGuid\n=\nclient\n.\nroleCache\n.\ngetIdForName\n(\n\"\\\n$\nadmin\n\"\n)\n// (1)\nval\nconnection\n=\nConnection\n.\ncreator\n(\n// (2)\n\"cube-connection\"\n,\n// (3)\nAtlanConnectorType\n.\nESSBASE\n,\n// (4)\nlistOf\n(\nadminRoleGuid\n),\n// (5)\nlistOf\n(\n\"group2\"\n),\n// (6)\nlistOf\n(\n\"jsmith\"\n))\n// (7)\n.\nbuild\n()\nval\nresponse\n=\nconnection\n.\nsave\n(\nclient\n)\n// (8)\nval\nconnectionQualifiedName\n=\nresponse\n.\ncreatedAssets\n[\n0\n]\n.\nqualifiedName\n// (9)",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 5
    }
  },
  {
    "content": "(\n\"group2\"\n),\n// (6)\nlistOf\n(\n\"jsmith\"\n))\n// (7)\n.\nbuild\n()\nval\nresponse\n=\nconnection\n.\nsave\n(\nclient\n)\n// (8)\nval\nconnectionQualifiedName\n=\nresponse\n.\ncreatedAssets\n[\n0\n]\n.\nqualifiedName\n// (9)\nRetrieve the GUID for the admin role, to use later for defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection.\nDetermines the icon\nThis determines the icon that Atlan will use for all the assets in the connection.\nList the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 6
    }
  },
  {
    "content": "At least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nActually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.)\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"Connection\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"cube-connection\"\n,\n// (2)\n\"connectorName\"\n:\n\"essbase\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/essbase/123456789\"\n,\n// (4)\n\"category\"\n:\n\"database\"\n,\n// (5)\n\"adminRoles\"\n:\n[\n// (6)\n\"e7ae0295-c60a-469a-bd2c-fb903943aa02\"\n],\n\"adminGroups\"\n:\n[\n// (7)\n\"group2\"\n],\n\"adminUsers\"\n:\n[\n// (8)\n\"jsmith\"\n]\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nConnection\n.\nHuman-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nThe\nconnectorName",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 7
    }
  },
  {
    "content": "// (7)\n\"group2\"\n],\n\"adminUsers\"\n:\n[\n// (8)\n\"jsmith\"\n]\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nConnection\n.\nHuman-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nThe\nconnectorName\nshould be a known value, such as\nessbase\n.\nDetermines the icon\nThis determines the icon that Atlan will use for all the assets in the connection. If you use a value that is\nnot\na known value, you will have a default gear icon instead.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/<connectorName>/<epoch>\n, where\n<epoch>\nis the time in milliseconds at which the connection is being created, and\n<connectorName>\nexactly matches the value used for\nconnectorName\n(above).\nThe\ncategory\nshould also be a known value, that defines the kind of cube store. This should be\ndatabase\n.\nList any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 8
    }
  },
  {
    "content": "At least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any users that can administer this connection. Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nAccess policies\nAtlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection.\nYou may therefore need to wait before you'll be able to create the assets below within the connection.\nTo confirm access,\nretrieve the connection\nafter it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 9
    }
  },
  {
    "content": "after it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets.\nNote: if you are\nreusing\nan existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions.\nCube\n¶\n4.0.0\nA\ncube\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the\nconnectionQualifiedName\nof the connection for the cube.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube\n11\n12\n13\n14\n15\n16\n17\nCube\ncube\n=\nCube\n.\ncreator\n(\n// (1)\n\"cube_name\"\n,\n// (2)\nconnectionQualifiedName\n)\n// (3)\n.\ncubeDimensionCount\n(\n10\n)\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ncube\n.\nsave\n(\nclient\n);\n// (5)\ncube\n=\nresponse\n.\ngetResult\n(\ncube\n);\n// (6)\nBuild up the minimum request to create a cube.\nProvide a human-readable name for your cube.\nProvide the qualifiedName of the connection for this cube.\n(Optional) To ensure the UI displays the correct count of\nCubeDimensions",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 10
    }
  },
  {
    "content": "Provide a human-readable name for your cube.\nProvide the qualifiedName of the connection for this cube.\n(Optional) To ensure the UI displays the correct count of\nCubeDimensions\n's, set the\ncubeDimensionCount\ndirectly on the\ncube\ninstance.\nActually call Atlan to create the cube. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created cube for use in subsequent creation calls.\nComing soon\nCreate a cube\n16\n17\n18\n19\n20\n21\n22\ncube\n=\nCube\n.\ncreator\n(\n# (1)\nname\n=\n\"cube_name\"\n,\n# (2)\nconnection_qualified_name\n=\nconnection_qualified_name\n# (3)\n)\ncube\n.\ncube_dimension_count\n=\n10\n# (4)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ncube\n)\n# (5)\ncube_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nCube\n)[\n0\n]\n.\nqualified_name\n# (6)\nBuild up the minimum request to create a cube.\nProvide a human-readable name for your cube.\nProvide the qualified_name of the connection for this cube.\n(Optional) To ensure the UI displays the correct count of\nCubeDimensions\n's, set the\ncube_dimension_count\ndirectly on the\nCube\ninstance.\nActually call Atlan to create the cube.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 11
    }
  },
  {
    "content": "(Optional) To ensure the UI displays the correct count of\nCubeDimensions\n's, set the\ncube_dimension_count\ndirectly on the\nCube\ninstance.\nActually call Atlan to create the cube.\nRetrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some checks first.)\nCreate a cube\n11\n12\n13\n14\n15\n16\n17\nvar\ncube\n=\nCube\n.\ncreator\n(\n// (1)\n\"cube_name\"\n,\n// (2)\nconnectionQualifiedName\n)\n// (3)\n.\ncubeDimensionCount\n(\n10\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=\ncube\n.\nsave\n(\nclient\n)\n// (5)\ncube\n=\nresponse\n.\ngetResult\n(\ncube\n)\n// (6)\nBuild up the minimum request to create a cube.\nProvide a human-readable name for your cube.\nProvide the qualifiedName of the connection for this cube.\n(Optional) To ensure the UI displays the correct count of\nCubeDimensions\n's, set the\ncubeDimensionCount\ndirectly on the\ncube\ninstance.\nActually call Atlan to create the cube. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created cube for use in subsequent creation calls.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"Cube\"\n,\n// (1)\n\"attributes\"\n:\n{",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 12
    }
  },
  {
    "content": "Retrieve the created cube for use in subsequent creation calls.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"Cube\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"cube_name\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/essbase/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"essbase\"\n,\n// (5)\n\"cubeDimensionCount\"\n:\n10\n// (6)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nCube\n.\nHuman-readable name for your cube.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/<connectorName>/<epoch>/<name>\n, where\ndefault/<connectorName>/<epoch>\nis the qualifiedName of the connection for this cube and\n<name>\nis the name of this cube.\nThe\nconnectionQualifiedName\nmust be the exact qualifiedName of the connection for this cube.\nThe\nconnectorName\nmust be exactly as used when defining the connection.\n(Optional) To ensure the UI displays the correct count of\nCubeDimensions\n's, set the\ncubeDimensionCount\ndirectly on the\ncube\ninstance.\nCubeDimension\n¶\n4.0.0\nA\ndimension\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the\nconnectionQualifiedName",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 13
    }
  },
  {
    "content": "cubeDimensionCount\ndirectly on the\ncube\ninstance.\nCubeDimension\n¶\n4.0.0\nA\ndimension\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the\nconnectionQualifiedName\nof the connection for the dimension, and the names and qualifiedNames of the dimension's ancestors.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube dimension\n18\n19\n20\n21\n22\n23\n24\nCubeDimension\ndimension\n=\nCubeDimension\n.\ncreator\n(\n// (1)\n\"dimension_name\"\n,\n// (2)\ncube\n)\n// (3)\n.\ncubeHierarchyCount\n(\n10\n)\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ndimension\n.\nsave\n(\nclient\n);\n// (5)\ndimension\n=\nresponse\n.\ngetResult\n(\ndimension\n);\n// (6)\nBuild up the minimum request to create a dimension.\nProvide a human-readable name for your dimension.\nProvide the cube for this dimension. If you did not already have the object, you could also use\nCube.refByGuid()\nwith the GUID of the cube, or\nCube.refByQualifiedName()\nwith the\nqualifiedName\nof the cube.\n(Optional) To ensure the UI displays the correct count of\nCubeHierarchy\n's, set the\ncubeHierarchyCount\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the dimension. Because this operation will persist the asset in Atlan, you must",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 14
    }
  },
  {
    "content": "CubeHierarchy\n's, set the\ncubeHierarchyCount\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the dimension. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created dimension for use in subsequent creation calls.\nComing soon\nCreate a cube dimension\n23\n24\n25\n26\n27\n28\n29\ndimension\n=\nCubeDimension\n.\ncreator\n(\n# (1)\nname\n=\n\"dimension_name\"\n,\n# (2)\ncube_qualified_name\n=\ncube_qualified_name\n# (3)\n)\ndimension\n.\ncube_hierarchy_count\n=\n10\n# (4)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndimension\n)\n# (5)\ndimension_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nCubeDimension\n)[\n0\n]\n.\nqualified_name\n# (6)\nBuild up the minimum request to create a dimension.\nProvide a human-readable name for your dimension.\nProvide the qualified_name of the cube for this dimension.\n(Optional) To ensure the UI displays the correct count of\nCubeHierarchy\n's, set the\ncube_hierarchy_count\ndirectly on the\nCubeDimension\ninstance.\nActually call Atlan to create the dimension.\nRetrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some checks first.)",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 15
    }
  },
  {
    "content": "directly on the\nCubeDimension\ninstance.\nActually call Atlan to create the dimension.\nRetrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some checks first.)\nCreate a cube dimension\n18\n19\n20\n21\n22\n23\n24\nvar\ndimension\n=\nCubeDimension\n.\ncreator\n(\n// (1)\n\"dimension_name\"\n,\n// (2)\ncube\n)\n// (3)\n.\ncubeHierarchyCount\n(\n10\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=\ndimension\n.\nsave\n(\nclient\n)\n// (5)\ndimension\n=\nresponse\n.\ngetResult\n(\ndimension\n)\n// (6)\nBuild up the minimum request to create a dimension.\nProvide a human-readable name for your dimension.\nProvide the cube for this dimension. If you did not already have the object, you could also use\nCube.refByGuid()\nwith the GUID of the cube, or\nCube.refByQualifiedName()\nwith the\nqualifiedName\nof the cube.\n(Optional) To ensure the UI displays the correct count of\nCubeHierarchy\n's, set the\ncubeHierarchyCount\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the dimension. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created dimension for use in subsequent creation calls.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 16
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created dimension for use in subsequent creation calls.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"CubeDimension\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"dimension_name\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/essbase/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"essbase\"\n,\n// (5)\n\"cube\"\n:\n{\n// (6)\n\"typeName\"\n:\n\"Cube\"\n,\n// (7)\n\"uniqueAttributes\"\n:\n{\n// (8)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name\"\n}\n},\n\"cubeName\"\n:\n\"cube_name\"\n,\n// (9)\n\"cubeQualifiedName\"\n:\n\"default/essbase/123456789/cube_name\"\n,\n// (10)\n\"cubeHierarchyCount\"\n:\n10\n// (11)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nCubeDimension\n.\nHuman-readable name for your dimension.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/<connectorName>/<epoch>/<cube_name>/<name>\n, where\ndefault/<connectorName>/<epoch>/<cube_name>\nis the qualifiedName of the cube for this dimension, and\n<name>\nis the name of the dimension.\nThe\nconnectionQualifiedName",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 17
    }
  },
  {
    "content": ", where\ndefault/<connectorName>/<epoch>/<cube_name>\nis the qualifiedName of the cube for this dimension, and\n<name>\nis the name of the dimension.\nThe\nconnectionQualifiedName\nmust be the exact qualifiedName of the connection for this dimension.\nThe\nconnectorName\nmust be exactly as used when defining the connection.\nThe cube in which this dimension exists is embedded in the\ncube\nattribute.\nThe\ntypeName\nfor this embedded reference must be\nCube\n.\nTo complete the reference, you must include a\nuniqueAttributes\nobject with the qualifiedName of the cube. Note: the cube must already exist in Atlan before creating the dimension.\nThe\ncubeName\nshould be the human-readable name of the cube.\nThe\ncubeQualifiedName\nshould be the qualifiedName of the cube.\n(Optional) To ensure the UI displays the correct count of\nCubeHierarchy\n's, set the\ncubeHierarchyCount\ndirectly on the\nCubeHierarchy\ninstance.\nCubeHierarchy\n¶\n4.0.0\nA\nhierarchy\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the\nconnectionQualifiedName\nof the connection for the hierarchy, and the names and qualifiedNames of the hierarchy's ancestors.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube hierarchy\n25\n26\n27\n28",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 18
    }
  },
  {
    "content": "connectionQualifiedName\nof the connection for the hierarchy, and the names and qualifiedNames of the hierarchy's ancestors.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube hierarchy\n25\n26\n27\n28\n29\n30\n31\nCubeHierarchy\nhierarchy\n=\nCubeHierarchy\n.\ncreator\n(\n// (1)\n\"hierarchy_name\"\n,\n// (2)\ndimension\n)\n// (3)\n.\ncubeFieldCount\n(\n10\n)\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nhierarchy\n.\nsave\n(\nclient\n);\n// (5)\nhierarchy\n=\nresponse\n.\ngetResult\n(\nhierarchy\n);\n// (6)\nBuild up the minimum request to create a hierarchy.\nProvide a human-readable name for your hierarchy.\nProvide the dimension for this hierarchy. If you did not already have the object, you could also use\nCubeDimension.refByGuid()\nwith the GUID of the dimension, or\nCubeDimension.refByQualifiedName()\nwith the\nqualifiedName\nof the dimension.\n(Optional) To ensure the UI displays the correct count of\nCubeField\n's, set the\ncubeFieldCount\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the hierarchy. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created hierarchy for use in subsequent creation calls.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 19
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created hierarchy for use in subsequent creation calls.\nComing soon\nCreate a cube hierarchy\n30\n31\n32\n33\n34\n35\n36\nhierarchy\n=\nCubeHierarchy\n.\ncreator\n(\n# (1)\nname\n=\n\"hierarchy_name\"\n,\n# (2)\ncube_dimension_qualified_name\n=\ndimension_qualified_name\n# (3)\n)\nhierarchy\n.\ncube_field_count\n=\n10\n# (4)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nhierarchy\n)\n# (5)\nhierarchy_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nCubeHierarchy\n)[\n0\n]\n.\nqualified_name\n# (6)\nBuild up the minimum request to create a hierarchy.\nProvide a human-readable name for your hierarchy.\nProvide the qualified_name of the dimension for this hierarchy.\n(Optional) To ensure the UI displays the correct count of\nCubeField\n's, set the\ncube_field_count\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the hierarchy.\nRetrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some checks first.)\nCreate a cube hierarchy\n25\n26\n27\n28\n29\n30\n31\nvar\nhierarchy\n=\nCubeHierarchy\n.\ncreator\n(\n// (1)\n\"hierarchy_name\"\n,\n// (2)\ndimension\n)\n// (3)\n.\ncubeFieldCount\n(\n10\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 20
    }
  },
  {
    "content": "Create a cube hierarchy\n25\n26\n27\n28\n29\n30\n31\nvar\nhierarchy\n=\nCubeHierarchy\n.\ncreator\n(\n// (1)\n\"hierarchy_name\"\n,\n// (2)\ndimension\n)\n// (3)\n.\ncubeFieldCount\n(\n10\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=\nhierarchy\n.\nsave\n(\nclient\n)\n// (5)\nhierarchy\n=\nresponse\n.\ngetResult\n(\nhierarchy\n)\n// (6)\nBuild up the minimum request to create a hierarchy.\nProvide a human-readable name for your hierarchy.\nProvide the dimension for this hierarchy. If you did not already have the object, you could also use\nCubeDimension.refByGuid()\nwith the GUID of the dimension, or\nCubeDimension.refByQualifiedName()\nwith the\nqualifiedName\nof the dimension.\n(Optional) To ensure the UI displays the correct count of\nCubeField\n's, set the\ncubeFieldCount\ndirectly on the\nCubeHierarchy\ninstance.\nActually call Atlan to create the hierarchy. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created hierarchy for use in subsequent creation calls.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"CubeHierarchy\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"hierarchy_name\"\n,",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 21
    }
  },
  {
    "content": "POST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"CubeHierarchy\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"hierarchy_name\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name/hierarchy_name\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/essbase/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"essbase\"\n,\n// (5)\n\"cubeDimension\"\n:\n{\n// (6)\n\"typeName\"\n:\n\"CubeDimension\"\n,\n// (7)\n\"uniqueAttributes\"\n:\n{\n// (8)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name\"\n}\n},\n\"cubeDimensionName\"\n:\n\"dimension_name\"\n,\n// (9)\n\"cubeDimensionQualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name\"\n,\n// (10)\n\"cubeName\"\n:\n\"cube_name\"\n,\n// (11)\n\"cubeQualifiedName\"\n:\n\"default/essbase/123456789/cube_name\"\n,\n// (12)\n\"cubeFieldCount\"\n:\n10\n// (13)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nCubeHierarchy\n.\nHuman-readable name for your hierarchy.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/<connectorName>/<epoch>/<cube_name>/<dimension_name>/<name>\n, where\ndefault/<connectorName>/<epoch>/<cube_name>/<dimension_name>\nis the qualifiedName of the dimension for this hierarchy, and\n<name>",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 22
    }
  },
  {
    "content": ", where\ndefault/<connectorName>/<epoch>/<cube_name>/<dimension_name>\nis the qualifiedName of the dimension for this hierarchy, and\n<name>\nis the name of the hierarchy.\nThe\nconnectionQualifiedName\nmust be the exact qualifiedName of the connection for this hierarchy.\nThe\nconnectorName\nmust be exactly as used when defining the connection.\nThe dimension in which this hierarchy exists is embedded in the\ncubeDimension\nattribute.\nThe\ntypeName\nfor this embedded reference must be\nCubeDimension\n.\nTo complete the reference, you must include a\nuniqueAttributes\nobject with the qualifiedName of the dimension. Note: the dimension must already exist in Atlan before creating the hierarchy.\nThe\ncubeDimensionName\nshould be the human-readable name of the dimension.\nThe\ncubeDimensionQualifiedName\nshould be the qualifiedName of the dimension.\nThe\ncubeName\nshould be the human-readable name of the cube.\nThe\ncubeQualifiedName\nshould be the qualifiedName of the cube.\n(Optional) To ensure the UI displays the correct count of\nCubeField\n's, set the\ncubeFieldCount\ndirectly on the\nCubeHierarchy\ninstance.\nCubeField\n¶\n4.0.0\nA\nfield\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 23
    }
  },
  {
    "content": "CubeField\n's, set the\ncubeFieldCount\ndirectly on the\nCubeHierarchy\ninstance.\nCubeField\n¶\n4.0.0\nA\nfield\nrequires a\nname\nand a\nqualifiedName\n. For creation, you also need to specify the\nconnectionQualifiedName\nof the connection for the field, and the names and qualifiedNames of the fields's ancestors.\nJava\nPython\nKotlin\nRaw REST API\nCreate a cube field\n32\n33\n34\n35\n36\nCubeField\nfield\n=\nCubeField\n.\ncreator\n(\n// (1)\n\"field1\"\n,\n// (2)\nhierarchy\n)\n// (3)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nfield\n.\nsave\n(\nclient\n);\n// (4)\nBuild up the minimum request to create a field.\nProvide a human-readable name for your field.\nProvide the parent for this field. If you did not already have the object, you could also use\nCubeHierarchy.refByGuid()\nwith the GUID of a hierarchy (or\nCubeField.refByGuid()\nif this is a nested field), or\nCubeHierarchy.refByQualifiedName()\nwith the\nqualifiedName\nof a hierarchy (or\nCubeField.refByQualifiedName()\nif this is a nested field).\nActually call Atlan to create the field. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nComing soon\nCreate a cube field\n37\n38\n39\n40\n41\n42\nfield\n=",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 24
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nComing soon\nCreate a cube field\n37\n38\n39\n40\n41\n42\nfield\n=\nCubeField\n.\ncreator\n(\n# (1)\nname\n=\n\"field1\"\n,\n# (2)\nparent_type\n=\nTable\n,\n# (3)\nparent_qualified_name\n=\nhierarchy_qualified_name\n# (4)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nfield\n)\n# (5)\nBuild up the minimum request to create a field.\nProvide a human-readable name for your field.\nSpecify the type of the parent asset for the field (hierarchy or field).\nProvide the qualified_name of the parent asset for this field. In this example you're defining a field in a hierarchy, so you can use the\nhierarchy_qualified_name\ncreated above. If the parent asset type were\nCubeField\nyou would want to use the\nqualified_name\nof some previously-created field.\nActually call Atlan to create the field.\nCreate a cube field\n32\n33\n34\n35\n36\nval\nfield\n=\nCubeField\n.\ncreator\n(\n// (1)\n\"field1\"\n,\n// (2)\nhierarchy\n)\n// (3)\n.\nbuild\n()\nval\nresponse\n=\nfield\n.\nsave\n(\nclient\n)\n// (4)\nBuild up the minimum request to create a field.\nProvide a human-readable name for your field.\nProvide the parent for this field. If you did not already have the object, you could also use\nCubeHierarchy.refByGuid()",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 25
    }
  },
  {
    "content": "Provide a human-readable name for your field.\nProvide the parent for this field. If you did not already have the object, you could also use\nCubeHierarchy.refByGuid()\nwith the GUID of a hierarchy (or\nCubeField.refByGuid()\nif this is a nested field), or\nCubeHierarchy.refByQualifiedName()\nwith the\nqualifiedName\nof a hierarchy (or\nCubeField.refByQualifiedName()\nif this is a nested field).\nActually call Atlan to create the field. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"CubeField\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"field1\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name/hierarchy_name/field1\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/essbase/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"essbase\"\n,\n// (5)\n\"cubeHierarchy\"\n:\n{\n// (6)\n\"typeName\"\n:\n\"CubeHierarchy\"\n,\n// (7)\n\"uniqueAttributes\"\n:\n{\n// (8)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name/hierarchy_name\"\n}\n},\n\"cubeHierarchyName\"\n:\n\"hierarchy_name\"\n,\n// (9)",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 26
    }
  },
  {
    "content": ":\n\"CubeHierarchy\"\n,\n// (7)\n\"uniqueAttributes\"\n:\n{\n// (8)\n\"qualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name/hierarchy_name\"\n}\n},\n\"cubeHierarchyName\"\n:\n\"hierarchy_name\"\n,\n// (9)\n\"cubeHierarchyQualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name/hierarchy_name\"\n,\n// (10)\n\"cubeDimensionName\"\n:\n\"dimension_name\"\n,\n// (11)\n\"cubeDimensionQualifiedName\"\n:\n\"default/essbase/123456789/cube_name/dimension_name\"\n,\n// (12)\n\"cubeName\"\n:\n\"cube_name\"\n,\n// (13)\n\"cubeQualifiedName\"\n:\n\"default/essbase/123456789/cube_name\"\n// (14)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nCubeField\n.\nHuman-readable name for your field.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/<connectorName>/<epoch>/<cube_name>/<dimension_name>/<hierarchy_name>/<name>\n, where\ndefault/<connectorName>/<epoch>/<cube_name>/<dimension_name>/<hierarchy_name>\nis the qualifiedName of the parent hierarchy for this field, and\n<name>\nis the name of the field.\nThe\nconnectionQualifiedName\nmust be the exact qualifiedName of the connection for this field.\nThe\nconnectorName\nmust be exactly as used when defining the connection.\nThe hierarchy in which the field exists is embedded in the\ncubeHierarchy\nattribute.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 27
    }
  },
  {
    "content": "The\nconnectorName\nmust be exactly as used when defining the connection.\nThe hierarchy in which the field exists is embedded in the\ncubeHierarchy\nattribute.\nThe\ntypeName\nfor this embedded reference must be\nCubeHierarchy\n.\nTo complete the reference, you must include a\nuniqueAttributes\nobject with the qualifiedName of the hierarchy. Note: the hierarchy must already exist in Atlan before creating the field.\nThe\ncubeHierarchyName\nshould be the human-readable name of the hierarchy.\nThe\ncubeHierarchyQualifiedName\nshould be the qualifiedName of the hierarchy.\nThe\ncubeDimensionName\nshould be the human-readable name of the dimension.\nThe\ncubeDimensionQualifiedName\nshould be the qualifiedName of the dimension.\nThe\ncubeName\nshould be the human-readable name of the cube.\nThe\ncubeQualifiedName\nshould be the qualifiedName of the cube.\nAvailable relationships\n¶\nEvery level of the cube structure is an\nAsset\n, and can therefore be related to the following other assets.\nerDiagram\nAsset }o--o{ AtlasGlossaryTerm : meanings\nAsset ||--o{ Link : links\nAsset ||--o| Readme : readme\nAsset }o--o{ Process : inputToProcesses\nAsset }o--o{ Process : outputFromProcesses\nAtlasGlossaryTerm\n¶\nA\nglossary term",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 28
    }
  },
  {
    "content": "Asset ||--o{ Link : links\nAsset ||--o| Readme : readme\nAsset }o--o{ Process : inputToProcesses\nAsset }o--o{ Process : outputFromProcesses\nAtlasGlossaryTerm\n¶\nA\nglossary term\nprovides meaning to an asset. The\nlink terms to assets snippet\nprovides more detail on setting this relationship.\nLink\n¶\nA\nlink\nprovides additional context to an asset, by providing a URL to additional information.\nReadme\n¶\nA\nREADME\nprovides rich documentation for an asset. The\nadd asset READMEs snippet\nprovides more detail on setting this relationship.\nProcess\n¶\nA\nprocess\nprovides lineage information for an asset. An asset can be both an input and an output for one or more processes. The\nlineage snippets\nprovide more detail on creating and working with lineage.\nAlthough if you want to delete everything in a connection, your better avenue is the packaged\nconnection delete utility\nin the UI.\n↩\n2024-06-16\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 29
    }
  },
  {
    "content": "feedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "patterns_create_cube.html",
      "source_type": "sdk",
      "file": "patterns_create_cube.json",
      "chunk_id": 30
    }
  }
]