[
  {
    "content": "Traverse lineage - Developer\nSkip to content\nTraverse lineage\n¶\nRetrieve lineage\n¶\n2.5.3\n3.1.1\nTo fetch lineage, you need to request lineage from Atlan from a particular starting point:\nJava\nPython\nKotlin\nRaw REST API\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndepth\n(\n1000000\n)\n// (2)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n// (3)\n.\npageSize\n(\n10\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nNAME\n)\n// (5)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (6)\n.\nstream\n()\n// (7)\n.\nforEach\n(\nresult\n->\n{\n// (8)\n// Do something with the result\n});\nBuild a request for lineage with the starting point for your lineage retrieval (the\nGUID\nof an asset). If you already have an asset, you can also instead run\nrequestLineage()\non the asset to directly build the same request.\nYou can specify how far you want lineage to be fetched using\ndepth()\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 0
    }
  },
  {
    "content": "1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall\nlineage).\nYou can fetch only upstream assets or only downstream assets. In the list API, you cannot access both directions at the same time.\nYou can specify how many results to include per page of results (defaults to 10).\nYou can also specify any extra attributes you want to include in each asset in the resulting list.\nTo include details about which asset is upstream and downstream of which other asset, set\nimmediateNeighbors\nto\ntrue\n. (Without this, all downstream assets will be listed in breadth-first order, but you will not know specifically which asset is downstream of which other asset.)\nYou can then directly stream the results from the request. These will be lazily-fetched and paged automatically.\nA normal Java\nStream\nis created, so you can apply any stream-based operations to it (filtering, mapping, collecting, or doing something for each result as in this example).\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.lineage",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 1
    }
  },
  {
    "content": "2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.lineage\nimport\nFluentLineage\nclient\n=\nAtlanClient\n()\nrequest\n=\nFluentLineage\n(\n# (1)\nstarting_guid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n# (2)\ndepth\n=\n1000000\n,\n# (3)\ndirection\n=\nLineageDirection\n.\nDOWNSTREAM\n,\n# (4)\nsize\n=\n10\n,\n# (5)\nincludes_on_results\n=\nAsset\n.\nNAME\n,\n# (6)\nimmediate_neighbors\n=\nTrue\n,\n# (7)\n)\n.\nrequest\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (8)\nfor\nasset\nin\nresponse\n:\n# (9)\n...\nBuild a request for lineage by specifying the parameters on the constructor.\nThe starting point for lineage must be the\nGUID\nof an asset.\nYou can specify how far you want lineage to be fetched using\ndepth\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall\nlineage).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 2
    }
  },
  {
    "content": "1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall\nlineage).\nYou can fetch only upstream assets or only downstream assets. In the list API, you cannot access both directions at the same time.\nYou can specify how many results to include per page of results (defaults to 10).\nYou can also specify any extra attributes you want to include in each asset in the resulting list.\nThe\nimmediate_neighbors\nparameter, when set to\nTrue\n, includes direct upstream and downstream connections for each asset, enabling detailed lineage traversal.\nCall the\nasset.get_lineage_list()\nmethod using the\nrequest\nto actually retrieve the lineage details from Atlan.\nIterate through the results\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndepth\n(\n1000000\n)\n// (2)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n// (3)\n.\npageSize\n(\n10\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nNAME\n)\n// (5)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (6)\n.\nstream\n()\n// (7)\n.\nforEach\n{\n// (8)\n// Do something with the result\n}\nBuild a request for lineage with the starting point for your lineage retrieval (the\nGUID",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 3
    }
  },
  {
    "content": ".\nimmediateNeighbors\n(\ntrue\n)\n// (6)\n.\nstream\n()\n// (7)\n.\nforEach\n{\n// (8)\n// Do something with the result\n}\nBuild a request for lineage with the starting point for your lineage retrieval (the\nGUID\nof an asset). If you already have an asset, you can also instead run\nrequestLineage()\non the asset to directly build the same request.\nYou can specify how far you want lineage to be fetched using\ndepth()\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall\nlineage).\nYou can fetch only upstream assets or only downstream assets. In the list API, you cannot access both directions at the same time.\nYou can specify how many results to include per page of results (defaults to 10).\nYou can also specify any extra attributes you want to include in each asset in the resulting list.\nTo include details about which asset is upstream and downstream of which other asset, set\nimmediateNeighbors\nto\ntrue",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 4
    }
  },
  {
    "content": "To include details about which asset is upstream and downstream of which other asset, set\nimmediateNeighbors\nto\ntrue\n. (Without this, all downstream assets will be listed in breadth-first order, but you will not know specifically which asset is downstream of which other asset.)\nYou can then directly stream the results from the request. These will be lazily-fetched and paged automatically.\nA normal Java\nStream\nis created, so you can apply any stream-based operations to it (filtering, mapping, collecting, or doing something for each result as in this example).\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n1000000\n,\n// (2)\n\"direction\"\n:\n\"OUTPUT\"\n,\n// (3)\n\"from\"\n:\n0\n,\n// (4)\n\"size\"\n:\n10\n,\n// (5)\n\"attributes\"\n:\n[\n// (6)\n\"name\"\n],\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nThe starting point for lineage must be the\nGUID\nof an asset.\nYou can specify how far you want lineage to be fetched using\ndepth()\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. A value of\n1000000",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 5
    }
  },
  {
    "content": "depth()\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. A value of\n1000000\nwill fetch upstream and downstream assets up to 1,000,000 hops away (basically\nall\nlineage).\nYou can fetch only upstream assets (\nINPUT\n) or only downstream assets (\nOUTPUT\n). In the list API, you cannot access both directions at the same time.\nYou can specify the starting point for a page of results (you must provide a value:\n0\nwill start at the first result).\nYou can specify how many results to include per page of results (you must provide a value: we suggest starting at\n10\n).\nYou can also specify any extra attributes you want to include in each asset in the resulting list.\nTraverse lineage\n¶\nThe new lineage list API returns results in breadth-first order. So you can traverse the lineage by progressing through the result list in the order they are returned, even across multiple pages of results.\nDownstream assets\n¶\n2.5.3\n3.1.1\nTo traverse downstream assets in lineage:\nJava\nPython\nKotlin\nRaw REST API\nTraverse downstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nFluentLineage\n.\nbuilder\n(",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 6
    }
  },
  {
    "content": "Downstream assets\n¶\n2.5.3\n3.1.1\nTo traverse downstream assets in lineage:\nJava\nPython\nKotlin\nRaw REST API\nTraverse downstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n// (2)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (3)\n.\nstream\n()\n// (4)\n.\nfilter\n(\na\n->\n!\n(\na\ninstanceof\nILineageProcess\n))\n// (5)\n.\nlimit\n(\n100\n)\n// (6)\n.\nforEach\n(\nresult\n->\n{\n// (7)\n// Do something with each result\nfor\n(\nLineageRef\nref\n:\nresult\n.\ngetImmediateDownstream\n())\n{\n// (8)\nString\ndownstreamGuid\n=\nref\n.\ngetGuid\n();\n// (9)\n}\n});\nSpecify the\nGUID\nof an asset for the starting point. (Or from an asset itself, use\nrequestLineage()\nto start the same builder.)\nRequest the\nDOWNSTREAM\ndirection.\nIf you want to understand specifically which assets are downstream from which other assets, set\nimmediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.\nWith streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 7
    }
  },
  {
    "content": "With streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).\nWith streams, you can also limit the total number of results you want to process — independently from page size of retrievals. With lazy-fetching of the results, this will ensure you only retrieve the number of pages required to complete the stream.\nOf course, you still need to actually do something with those remaining results.\nIf\nimmediateNeighbors\nis\ntrue\n, each asset will have a list of downstream lineage references populated in\n.getImmediateDownstream()\n.\nYou can, for example, retrieve the GUID of each of these downstream references to see the assets that are immediately downstream from the asset you are iterating through in the lineage results.\nTraverse downstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.lineage\nimport\nFluentLineage\nclient\n=\nAtlanClient\n()\nrequest\n=\nFluentLineage\n(\nstarting_guid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n# (1)\ndirection\n=\nLineageDirection\n.\nDOWNSTREAM\n,\n# (2)\nimmediate_neighbors\n=\nTrue\n,\n# (3)\n)\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 8
    }
  },
  {
    "content": "=\nAtlanClient\n()\nrequest\n=\nFluentLineage\n(\nstarting_guid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n# (1)\ndirection\n=\nLineageDirection\n.\nDOWNSTREAM\n,\n# (2)\nimmediate_neighbors\n=\nTrue\n,\n# (3)\n)\n.\nrequest\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (4)\nfor\nasset\nin\nresponse\n:\n# (5)\n...\n# (6)\nfor\nref\nin\nasset\n.\nimmediate_downstream\n:\n# (7)\ndownstream_guid\n=\nref\n.\nguid\n# (8)\nSpecify the\nGUID\nof an asset for the starting point.\nRequest the\nDOWNSTREAM\ndirection.\nIf you want to understand specifically which assets are downstream from which other assets, set\nimmediate_neighbors\nto\nTrue\n.\nCall the\nget_lineage_list\nmethod using the\nrequest\nto get the results\nYou can then iterate through all of the results. The pages will be lazily-fetched in the background as-needed, and each result looped through.\nDo something with the result.\nIf\nimmediate_neighbors\nis\nTrue\n, each asset will have a list of downstream lineage references populated in\n.immediate_downstream\n.\nYou can, for example, retrieve the GUID of each of these downstream references to see the assets that are immediately downstream from the asset you are iterating through in the lineage results.\nTraverse downstream lineage\n1",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 9
    }
  },
  {
    "content": "Traverse downstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n// (2)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (3)\n.\nstream\n()\n// (4)\n.\nfilter\n{\nit\n!is\nILineageProcess\n}\n// (5)\n.\nlimit\n(\n100\n)\n// (6)\n.\nforEach\n{\nresult\n->\n// (7)\n// Do something with each result\nresult\n.\nimmediateDownstream\n.\nforEach\n{\nref\n->\n// (8)\nval\ndownstreamGuid\n=\nref\n.\nguid\n// (9)\n}\n}\nSpecify the\nGUID\nof an asset for the starting point. (Or from an asset itself, use\nrequestLineage()\nto start the same builder.)\nRequest the\nDOWNSTREAM\ndirection.\nIf you want to understand specifically which assets are downstream from which other assets, set\nimmediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.\nWith streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 10
    }
  },
  {
    "content": "With streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).\nWith streams, you can also limit the total number of results you want to process — independently from page size of retrievals. With lazy-fetching of the results, this will ensure you only retrieve the number of pages required to complete the stream.\nOf course, you still need to actually do something with those remaining results.\nIf\nimmediateNeighbors\nis\ntrue\n, each asset will have a list of downstream lineage references populated in\n.getImmediateDownstream()\n.\nYou can, for example, retrieve the GUID of each of these downstream references to see the assets that are immediately downstream from the asset you are iterating through in the lineage results.\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"OUTPUT\"\n,\n// (2)\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nSpecify the\nGUID\nof an asset for the starting point.\nRequest the\nOUTPUT\n(downstream) direction.\nUpstream assets\n¶\n2.5.3\n3.1.1\nTo traverse upstream assets in lineage:",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 11
    }
  },
  {
    "content": "\"excludeClassifications\"\n:\ntrue\n}\nSpecify the\nGUID\nof an asset for the starting point.\nRequest the\nOUTPUT\n(downstream) direction.\nUpstream assets\n¶\n2.5.3\n3.1.1\nTo traverse upstream assets in lineage:\nJava\nPython\nKotlin\nRaw REST API\nTraverse upstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nUPSTREAM\n)\n// (2)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (3)\n.\nstream\n()\n// (4)\n.\nfilter\n(\na\n->\n!\n(\na\ninstanceof\nILineageProcess\n))\n// (5)\n.\nlimit\n(\n100\n)\n// (6)\n.\nforEach\n(\nresult\n->\n{\n// (7)\n// Do something with each result\nfor\n(\nLineageRef\nref\n:\nresult\n.\ngetImmediateUpstream\n())\n{\n// (8)\nString\nupstreamGuid\n=\nref\n.\ngetGuid\n();\n// (9)\n}\n});\nSpecify the\nGUID\nof an asset for the starting point. (Or from an asset itself, use\nrequestLineage()\nto start the same builder.)\nRequest the\nUPSTREAM\ndirection.\nIf you want to understand specifically which assets are upstream from which other assets, set\nimmediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 12
    }
  },
  {
    "content": "immediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.\nWith streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).\nWith streams, you can also limit the total number of results you want to process — independently from page size of retrievals. With lazy-fetching of the results, this will ensure you only retrieve the number of pages required to complete the stream.\nOf course, you still need to actually do something with those remaining results.\nIf\nimmediateNeighbors\nis\ntrue\n, each asset will have a list of upstream lineage references populated in\n.getImmediateUpstream()\n.\nYou can, for example, retrieve the GUID of each of these upstream references to see the assets that are immediately upstream from the asset you are iterating through in the lineage results.\nTraverse upstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.lineage\nimport\nFluentLineage\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentLineage\n(\nstarting_guid\n=",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 13
    }
  },
  {
    "content": "import\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.lineage\nimport\nFluentLineage\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentLineage\n(\nstarting_guid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n# (1)\n.\ndirection\n(\nLineageDirection\n.\nUPSTREAM\n)\n# (2)\n.\nimmediate_neighbors\n(\nTrue\n)\n# (3)\n.\nrequest\n)\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (4)\nfor\nasset\nin\nresponse\n:\n# (5)\n...\n# (6)\nfor\nref\nin\nasset\n.\nimmediate_upstream\n:\n# (7)\nupstream_guid\n=\nref\n.\nguid\n# (8)\nSpecify the\nGUID\nof an asset for the starting point.\nRequest the\nUPSTREAM\ndirection.\nIf you want to understand specifically which assets are upstream from which other assets, set\nimmediate_neighbors\nto\nTrue\n.\nCall the\nget_lineage_list\nmethod using the\nrequest\nto get the results\nYou can then iterate through all of the results. The pages will be lazily-fetched in the background as-needed, and each result looped through.\nDo something with the result.\nIf\nimmediate_neighbors\nis\nTrue\n, each asset will have a list of upstream lineage references populated in\n.immediate_upstream\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 14
    }
  },
  {
    "content": "Do something with the result.\nIf\nimmediate_neighbors\nis\nTrue\n, each asset will have a list of upstream lineage references populated in\n.immediate_upstream\n.\nYou can, for example, retrieve the GUID of each of these upstream references to see the assets that are immediately upstream from the asset you are iterating through in the lineage results.\nTraverse upstream lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nFluentLineage\n.\nbuilder\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nUPSTREAM\n)\n// (2)\n.\nimmediateNeighbors\n(\ntrue\n)\n// (3)\n.\nstream\n()\n// (4)\n.\nfilter\n{\nit\n!is\nILineageProcess\n}\n// (5)\n.\nlimit\n(\n100\n)\n// (6)\n.\nforEach\n{\n// Do something with each result\nresult\n.\nimmediateUpstream\n.\nforEach\n{\nref\n->\n// (8)\nval\nupstreamGuid\n=\nref\n.\nguid\n// (9)\n}\n}\nSpecify the\nGUID\nof an asset for the starting point. (Or from an asset itself, use\nrequestLineage()\nto start the same builder.)\nRequest the\nUPSTREAM\ndirection.\nIf you want to understand specifically which assets are upstream from which other assets, set\nimmediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 15
    }
  },
  {
    "content": "immediateNeighbors\nto\ntrue\n.\nYou can then stream the results from the request. The pages will be lazily-fetched in the background, as-needed.\nWith streams, you can apply additional filters over the results (in this example any processes in the results will be ignored).\nWith streams, you can also limit the total number of results you want to process — independently from page size of retrievals. With lazy-fetching of the results, this will ensure you only retrieve the number of pages required to complete the stream.\nOf course, you still need to actually do something with those remaining results.\nIf\nimmediateNeighbors\nis\ntrue\n, each asset will have a list of upstream lineage references populated in\n.getImmediateUpstream()\n.\nYou can, for example, retrieve the GUID of each of these upstream references to see the assets that are immediately upstream from the asset you are iterating through in the lineage results.\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"INPUT\"\n,\n// (2)\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nSpecify the\nGUID",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 16
    }
  },
  {
    "content": ",\n// (1)\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"INPUT\"\n,\n// (2)\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nSpecify the\nGUID\nof an asset for the starting point.\nRequest the\nINPUT\n(upstream) direction.\nFilter lineage\n¶\nYou can also filter the information fetched through lineage. This can help improve performance of your code by limiting the results it will fetch to only those you require.\nRetrieve only active assets\nIn most cases for lineage you only care about active assets. By filtering to only active assets, you can improve the performance of lineage retrieval by as much as 10x. (The new\nFluentLineage\ninterface will do this automatically, unless you explicitly request the inclusion of archived assets.)\nNot possible to filter by custom metadata\nYou currently cannot filter lineage based on the values of custom metadata.\nLimit assets in response\n¶\n1.9.5\n4.0.0\nYou can limit the assets you will see in the response through entity filters. These restrict what assets will be included in the results, but still traverse all of the lineage:\nJava\nPython\nKotlin\nRaw REST API\nLimit assets in response\n1\n2\n3\n4\n5\n6\nList\n<\nAsset\n>\nverifiedAssets\n=\nAsset\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 17
    }
  },
  {
    "content": "Java\nPython\nKotlin\nRaw REST API\nLimit assets in response\n1\n2\n3\n4\n5\n6\nList\n<\nAsset\n>\nverifiedAssets\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nUPSTREAM\n)\n.\nincludeInResults\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\ninLineage\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n))\n// (2)\n.\nincludesCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (3)\n.\nstream\n()\n// (4)\n.\ncollect\n(\nCollectors\n.\ntoList\n());\n// (5)\nBuild the request as you would above, or request it directly from an asset. Because this operation will directly request lineage for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd one or more\nincludeInResults\nto the request before sending it to Atlan. Each of these defines criteria for which assets should be filtered for inclusion in the results, in this example only assets with a verified certificate will be included. The criterion itself is composed of:\nThe field by which you want to filter (\nAsset.CERTIFICATE_STATUS\nin this example).\nA fixed member within that field that builds lineage filters, called\n.inLineage\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 18
    }
  },
  {
    "content": "The field by which you want to filter (\nAsset.CERTIFICATE_STATUS\nin this example).\nA fixed member within that field that builds lineage filters, called\n.inLineage\n.\nThe operator you want to use to compare values for that field in order to determine whether or not an asset matches (\n.eq()\nin this example).\nThe value you want to compare against using that operator (\nCertificateStatus.VERIFIED\nin this example).\nOptionally, you can use\nincludesCondition\nin your lineage request to specify whether the\nincludeInResults\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nWhen you then stream the results, only those assets that match the filter criteria will be included in the response.\nYou can then collect them (standard stream operation) to give a complete list, across pages, of those assets that match the criteria.\nLimit assets in response\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nCertificateStatus\n,\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.lineage\nimport\nFilterList\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nAsset\n.\nlineage\n(\nguid\n=",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 19
    }
  },
  {
    "content": "import\nCertificateStatus\n,\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.lineage\nimport\nFilterList\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nAsset\n.\nlineage\n(\nguid\n=\n\"f23dfa3b-3a8a-417a-b2fb-17fdfca9d442\"\n)\n# (1)\n.\ndirection\n(\nLineageDirection\n.\nUPSTREAM\n)\n.\ninclude_in_results\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\nin_lineage\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n)\n# (2)\n)\n.\nincludes_condition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n.\nrequest\n# (3)\n)\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (4)\nverified_assets\n:\nlist\n[\nAsset\n]\n=\n[]\nfor\nasset\nin\nresponse\n:\n# (5)\nverified_assets\n.\nappend\n(\nasset\n)\nBuild the request as you would above, or request it directly from an asset.\nAdd one or more\ninclude_in_results\nto the request before sending it to Atlan. Each of these defines criteria for which assets should be filtered for inclusion in the results, in this example only assets with a verified certificate will be included. The criterion itself is composed of:\nThe field by which you want to filter (\nAsset.CERTIFICATE_STATUS\nin this example).\nA fixed member within that field that builds lineage filters, called\n.in_lineage\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 20
    }
  },
  {
    "content": "The field by which you want to filter (\nAsset.CERTIFICATE_STATUS\nin this example).\nA fixed member within that field that builds lineage filters, called\n.in_lineage\n.\nThe operator you want to use to compare values for that field in order to determine whether or not an asset matches (\n.eq()\nin this example).\nThe value you want to compare against using that operator (\nCertificateStatus.VERIFIED\nin this example).\nOptionally, you can use\n.includes_condition\nin your lineage request to specify whether the\nincludes_in_results\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nUse the\nrequest\nto get the\nresponse\nthat can be used to iterate through the assets.\nIterate through the assets and use them as you will.\nLimit assets in response\n1\n2\n3\n4\n5\n6\nval\nverifiedAssets\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (1)\n.\ndirection\n(\nAtlanLineageDirection\n.\nUPSTREAM\n)\n.\nincludeInResults\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\ninLineage\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n))\n// (2)\n.\nincludesCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (3)\n.\nstream\n()\n// (4)\n.\ntoList\n()\n// (5)",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 21
    }
  },
  {
    "content": "(\nAsset\n.\nCERTIFICATE_STATUS\n.\ninLineage\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n))\n// (2)\n.\nincludesCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (3)\n.\nstream\n()\n// (4)\n.\ntoList\n()\n// (5)\nBuild the request as you would above, or request it directly from an asset. Because this operation will directly request lineage for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd one or more\nincludeInResults\nto the request before sending it to Atlan. Each of these defines criteria for which assets should be filtered for inclusion in the results, in this example only assets with a verified certificate will be included. The criterion itself is composed of:\nThe field by which you want to filter (\nAsset.CERTIFICATE_STATUS\nin this example).\nA fixed member within that field that builds lineage filters, called\n.inLineage\n.\nThe operator you want to use to compare values for that field in order to determine whether or not an asset matches (\n.eq()\nin this example).\nThe value you want to compare against using that operator (\nCertificateStatus.VERIFIED\nin this example).\nOptionally, you can use\nincludesCondition\nin your lineage request to specify whether the",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 22
    }
  },
  {
    "content": "The value you want to compare against using that operator (\nCertificateStatus.VERIFIED\nin this example).\nOptionally, you can use\nincludesCondition\nin your lineage request to specify whether the\nincludeInResults\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nWhen you then stream the results, only those assets that match the filter criteria will be included in the response.\nYou can then collect them (standard stream operation) to give a complete list, across pages, of those assets that match the criteria.\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"INPUT\"\n,\n\"entityFilters\"\n:\n{\n// (1)\n\"condition\"\n:\n\"AND\"\n,\n\"criterion\"\n:\n[\n// (2)\n{\n\"attributeName\"\n:\n\"certificateStatus\"\n,\n\"operator\"\n:\n\"contains\"\n,\n\"attributeValue\"\n:\n\"VERIFIED\"\n}\n]\n},\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nBuild the request as you would above, but add\nentityFilters\nto the request before sending it to Atlan.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 23
    }
  },
  {
    "content": "}\n]\n},\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nBuild the request as you would above, but add\nentityFilters\nto the request before sending it to Atlan.\nYou can specify any number of criteria to include in your filters, and whether they should all apply (condition of\nAND\n) or only any one of them need apply (condition of\nOR\n) for a resulting asset to be included. Each filter criterion is a combination of:\nThe name of the field in Atlan to use for filtering the results\nThe value of that field that should be compared against for filtering\nAn operator that defines how that comparison should be done to be considered a match\nLimit lineage traversal\n¶\n1.9.5\n4.0.0\nYou can also limit how much of the lineage is traversed. You can do this both at an asset-level and a relationship-level:\nJava\nPython\nKotlin\nRaw REST API\nLimit lineage traversal\n1\n2\n3\n4\n5\n6\n7\n8\nList\n<\nAsset\n>\nactiveAssets\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.\nwhereAsset\n(\nFluentLineage\n.\nACTIVE\n)\n// (1)\n.\nassetsCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (2)\n.\nwhereRelationship\n(\nFluentLineage\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 24
    }
  },
  {
    "content": ")\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.\nwhereAsset\n(\nFluentLineage\n.\nACTIVE\n)\n// (1)\n.\nassetsCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (2)\n.\nwhereRelationship\n(\nFluentLineage\n.\nACTIVE\n)\n.\nrelationshipsCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (3)\n.\nstream\n()\n// (4)\n.\ncollect\n(\nCollectors\n.\ntoList\n());\n// (5)\nProvide your conditions to the\nwhereAsset\nand\nwhereRelationship\nof the request. This will ensure that once an asset (or relationship) is found in lineage traversal that does\nnot\nmatch the conditions, further lineage traversal beyond that asset (or relationship) will not be done.\nIn this example, that means that once we hit an archived or soft-deleted asset (or relationship) in the lineage, we will not look for any further downstream lineage from that archived or soft-deleted asset (or relationship). (In other words, we will limit the lineage results to only active assets by short-circuiting traversal when we hit an archived or soft-deleted asset or relationship.)\nFluentLineage.ACTIVE constant\nNote that the\nFluentLineage.ACTIVE\nexample here is a predefined filter constant. If you look at its code, it is equivalent to writing any other lineage filter:",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 25
    }
  },
  {
    "content": "FluentLineage.ACTIVE constant\nNote that the\nFluentLineage.ACTIVE\nexample here is a predefined filter constant. If you look at its code, it is equivalent to writing any other lineage filter:\nAsset\n.\nSTATUS\n.\ninLineage\n.\neq\n(\nAtlanStatus\n.\nACTIVE\n)\nWhen you request lineage directly on an asset, as in the example above, by default only active assets and relationships are included. (In other words, the filters by\nFluentLineage.ACTIVE\nare applied by default when using the\nAsset.lineage()\nrequest style.)\nOptionally, you can use\nassetsCondition\nin your lineage request to specify whether the\nwhereAsset\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nOptionally, you can use\nrelationshipsCondition\nin your lineage request to specify whether the\nwhereRelationship\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 26
    }
  },
  {
    "content": "Optionally, you can use\nrelationshipsCondition\nin your lineage request to specify whether the\nwhereRelationship\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nWhen you then fetch the results and iterate through them, not only are those assets that match the filter criteria the only ones included in the response, but the traversal is likely to run significantly faster as well by entirely skipping any further downstream traversal through the assets that do not match.\nYou can continue to process the results from there as you would with any stream: filtering, mapping, running something for each result, or in this example collecting them into a list.\nLimit lineage traversal\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.lineage\nimport\nFluentLineage\nfrom\npyatlan.model.lineage\nimport\nFilterList\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nAsset\n.\nlineage\n(\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nLineageDirection\n.\nDOWNSTREAM\n)\n.\nwhere_assets\n(\nFluentLineage\n.\nACTIVE\n)\n# (1)\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 27
    }
  },
  {
    "content": "client\n=\nAtlanClient\n()\nrequest\n=\n(\nAsset\n.\nlineage\n(\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nLineageDirection\n.\nDOWNSTREAM\n)\n.\nwhere_assets\n(\nFluentLineage\n.\nACTIVE\n)\n# (1)\n.\nassets_condition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n# (2)\n.\nwhere_relationships\n(\nFluentLineage\n.\nACTIVE\n)\n.\nrelationships_condition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n# (3)\n.\nrequest\n)\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (4)\nfor\nasset\nin\nresponse\n:\n# (5)\n...\nProvide your conditions to the\nwhere_assets\nand\nwhere_relationships\nof FluentLineage. This will ensure that once an asset (or relationship) is found in lineage traversal that does\nnot\nmatch the conditions, further lineage traversal beyond that asset (or relationship) will not be done.\nIn this example, that means that once we hit an archived or soft-deleted asset (or relationship) in the lineage, we will not look for any further downstream lineage from that archived or soft-deleted asset (or relationship). (In other words, we will limit the lineage results to only active assets by short-circuiting traversal when we hit an archived or soft-deleted asset or relationship.)\nFluentLineage.ACTIVE constant\nNote that the",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 28
    }
  },
  {
    "content": "FluentLineage.ACTIVE constant\nNote that the\nFluentLineage.ACTIVE\nexample here is a predefined filter constant. If you look at its code, it is equivalent to writing any other lineage filter:\nAsset\n.\nSTATUS\n.\nin_lineage\n.\neq\n(\nEntityStatus\n.\nACTIVE\n)\nWhen you request lineage directly on an asset, as in the example above, by default only active assets and relationships are included. (In other words, the filters by\nFluentLineage.ACTIVE\nare applied by default when using the\nAsset.lineage()\nrequest style.)\nOptionally, you can use\nassets_condition\nin your lineage request to specify whether the\nwhere_assets\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nOptionally, you can use\nrelationships_condition\nin your lineage request to specify whether the\nwhere_relationships\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nUse the\nrequest\nto get the\nresponse\nthat can be used to iterate through the assets.\nIterate through the assets and use them as you will.\nLimit lineage traversal\n1\n2\n3\n4\n5\n6\n7\n8\nval\nactiveAssets\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 29
    }
  },
  {
    "content": "Limit lineage traversal\n1\n2\n3\n4\n5\n6\n7\n8\nval\nactiveAssets\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.\nwhereAsset\n(\nFluentLineage\n.\nACTIVE\n)\n// (1)\n.\nassetsCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (2)\n.\nwhereRelationship\n(\nFluentLineage\n.\nACTIVE\n)\n.\nrelationshipsCondition\n(\nFilterList\n.\nCondition\n.\nAND\n)\n// (3)\n.\nstream\n()\n// (4)\n.\ncollect\n(\nCollectors\n.\ntoList\n());\n// (5)\nProvide your conditions to the\nwhereAsset\nand\nwhereRelationship\nof the request. This will ensure that once an asset (or relationship) is found in lineage traversal that does\nnot\nmatch the conditions, further lineage traversal beyond that asset (or relationship) will not be done.\nIn this example, that means that once we hit an archived or soft-deleted asset (or relationship) in the lineage, we will not look for any further downstream lineage from that archived or soft-deleted asset (or relationship). (In other words, we will limit the lineage results to only active assets by short-circuiting traversal when we hit an archived or soft-deleted asset or relationship.)\nFluentLineage.ACTIVE constant\nNote that the\nFluentLineage.ACTIVE",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 30
    }
  },
  {
    "content": "FluentLineage.ACTIVE constant\nNote that the\nFluentLineage.ACTIVE\nexample here is a predefined filter constant. If you look at its code, it is equivalent to writing any other lineage filter:\nAsset\n.\nSTATUS\n.\ninLineage\n.\neq\n(\nAtlanStatus\n.\nACTIVE\n)\nWhen you request lineage directly on an asset, as in the example above, by default only active assets and relationships are included. (In other words, the filters by\nFluentLineage.ACTIVE\nare applied by default when using the\nAsset.lineage()\nrequest style.)\nOptionally, you can use\nassetsCondition\nin your lineage request to specify whether the\nwhereAsset\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nOptionally, you can use\nrelationshipsCondition\nin your lineage request to specify whether the\nwhereRelationship\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 31
    }
  },
  {
    "content": "Optionally, you can use\nrelationshipsCondition\nin your lineage request to specify whether the\nwhereRelationship\ncriteria\nshould be combined with\nAND (default)\nor if any matching is sufficient (\nOR\n).\nWhen you then fetch the results and iterate through them, not only are those assets that match the filter criteria the only ones included in the response, but the traversal is likely to run significantly faster as well by entirely skipping any further downstream traversal through the assets that do not match.\nYou can continue to process the results from there as you would with any stream: filtering, mapping, running something for each result, or in this example collecting them into a list.\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"OUTPUT\"\n,\n\"entityFilters\"\n:\n{\n\"condition\"\n:\n\"AND\"\n,\n\"criterion\"\n:\n[\n{\n\"attributeName\"\n:\n\"__state\"\n,\n\"operator\"\n:\n\"=\"\n,\n\"attributeValue\"\n:\n\"ACTIVE\"\n}\n]\n},\n\"entityTraversalFilters\"\n:\n{\n// (1)\n\"condition\"\n:\n\"AND\"\n,\n\"criterion\"\n:\n[\n{\n\"attributeName\"\n:\n\"__state\"\n,\n\"operator\"\n:\n\"=\"\n,\n\"attributeValue\"\n:\n\"ACTIVE\"\n}\n]",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 32
    }
  },
  {
    "content": ":\n\"=\"\n,\n\"attributeValue\"\n:\n\"ACTIVE\"\n}\n]\n},\n\"entityTraversalFilters\"\n:\n{\n// (1)\n\"condition\"\n:\n\"AND\"\n,\n\"criterion\"\n:\n[\n{\n\"attributeName\"\n:\n\"__state\"\n,\n\"operator\"\n:\n\"=\"\n,\n\"attributeValue\"\n:\n\"ACTIVE\"\n}\n]\n},\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeMeanings\"\n:\ntrue\n,\n\"excludeClassifications\"\n:\ntrue\n}\nProvide your conditions to the\nentityTraversalFilters\nof the request. This will ensure that once an asset is found in lineage traversal that does\nnot\nmatch the conditions, further lineage traversal beyond that asset will not be done.\nIn this example, that means that once we hit an archived of soft-deleted asset in the lineage, we will not look for any further downstream lineage from that archived or soft-deleted asset. (In other words, we will limit the lineage results to only active assets by short-circuiting traversal when we hit an archived or soft-deleted asset.)\nLimit asset details\n¶\n1.4.0\n4.0.0\nYou can also limit the details for each asset returned by lineage:\nJava\nPython\nKotlin\nRaw REST API\nLimit asset details\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nLineageListRequest\nrequest\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 33
    }
  },
  {
    "content": "Limit asset details\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nLineageListRequest\nrequest\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.\nincludeOnResults\n(\nAsset\n.\nDESCRIPTION\n)\n// (1)\n.\ntoRequestBuilder\n()\n// (2)\n.\nexcludeAtlanTags\n(\nfalse\n)\n// (3)\n.\nexcludeMeanings\n(\nfalse\n)\n// (4)\n.\nbuild\n();\nList\n<\nAsset\n>\nwithTagsAndTerms\n=\nrequest\n.\nfetch\n(\nclient\n)\n// (5)\n.\nstream\n()\n// (6)\n.\ncollect\n(\nCollectors\n.\ntoList\n());\nBuild the request as above, but chain as many\nincludeOnResults\nas you like to specify the attributes you want to include on each asset in the lineage.\nYou can also decide whether to include or exclude Atlan tags and assigned business terms, but to do this you must first conver the fluent lineage request into a\nLineageListRequest\n. You can do this by chaining\ntoRequestBuilder()\n.\nYou can then use\nexcludeAtlanTags(false)\nto ensure that Atlan tags are included on each asset in lineage.\nYou can also use\nexcludeMeanings(false)\nto ensure that assigned business terms are included on each asset in lineage.\nYou then need to call\nfetch()\non the\nLineageListRequest",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 34
    }
  },
  {
    "content": "You can also use\nexcludeMeanings(false)\nto ensure that assigned business terms are included on each asset in lineage.\nYou then need to call\nfetch()\non the\nLineageListRequest\nto actually run the lineage request. Because this operation will directly request lineage for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then stream and further transform or collect the results from the request, directly.\nLimit asset details\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.assets\nimport\nAsset\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nAsset\n.\nlineage\n(\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nLineageDirection\n.\nDOWNSTREAM\n)\n.\ninclude_on_results\n(\nAsset\n.\nDESCRIPTION\n)\n# (1)\n.\nexclude_atlan_tags\n(\nFalse\n)\n# (2)\n.\nexclude_meanings\n(\nFalse\n)\n# (3)\n.\nrequest\n)\nresponse\n=\nclient\n.\nasset\n.\nget_lineage_list\n(\nrequest\n)\n# (4)\nfor\nasset\nin\nresponse\n:\n# (5)\n...\nBuild the request as above, but chain as many\ninclude_on_results\nas you like to specify the attributes you want to include on each asset in the lineage.\nYou can use",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 35
    }
  },
  {
    "content": "for\nasset\nin\nresponse\n:\n# (5)\n...\nBuild the request as above, but chain as many\ninclude_on_results\nas you like to specify the attributes you want to include on each asset in the lineage.\nYou can use\nexclude_atlan_tags(False)\nto ensure that Atlan tags are included on each asset in lineage.\nYou can use\nexclude_meanings(False)\nto ensure that assigned business terms are included on each asset in lineage.\nYou then need to call\nget_lineage_list()\nwith the\nLineageListRequest\nto actually run the lineage request.\nYou can then iterate through and further transform or collect the results from the request.\nLimit asset details\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\nrequest\n=\nAsset\n.\nlineage\n(\nclient\n,\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n.\ndirection\n(\nAtlanLineageDirection\n.\nDOWNSTREAM\n)\n.\nincludeOnResults\n(\nAsset\n.\nDESCRIPTION\n)\n// (1)\n.\ntoRequestBuilder\n()\n// (2)\n.\nexcludeAtlanTags\n(\nfalse\n)\n// (3)\n.\nexcludeMeanings\n(\nfalse\n)\n// (4)\n.\nbuild\n()\nval\nwithTagsAndTerms\n=\nrequest\n.\nfetch\n(\nclient\n)\n// (5)\n.\nstream\n()\n// (6)\n.\ntoList\n()\nBuild the request as above, but chain as many\nincludeOnResults\nas you like to specify the attributes you want to include on each asset in the lineage.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 36
    }
  },
  {
    "content": "(\nclient\n)\n// (5)\n.\nstream\n()\n// (6)\n.\ntoList\n()\nBuild the request as above, but chain as many\nincludeOnResults\nas you like to specify the attributes you want to include on each asset in the lineage.\nYou can also decide whether to include or exclude Atlan tags and assigned business terms, but to do this you must first conver the fluent lineage request into a\nLineageListRequest\n. You can do this by chaining\ntoRequestBuilder()\n.\nYou can then use\nexcludeAtlanTags(false)\nto ensure that Atlan tags are included on each asset in lineage.\nYou can also use\nexcludeMeanings(false)\nto ensure that assigned business terms are included on each asset in lineage.\nYou then need to call\nfetch()\non the\nLineageListRequest\nto actually run the lineage request. Because this operation will directly request lineage for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then stream and further transform or collect the results from the request, directly.\nPOST /api/meta/lineage/list\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"OUTPUT\"\n,\n\"attributes\"\n:\n[\n// (1)\n\"description\"\n],\n\"from\"\n:\n0\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 37
    }
  },
  {
    "content": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n\"depth\"\n:\n1000000\n,\n\"direction\"\n:\n\"OUTPUT\"\n,\n\"attributes\"\n:\n[\n// (1)\n\"description\"\n],\n\"from\"\n:\n0\n,\n\"size\"\n:\n10\n,\n\"excludeClassifications\"\n:\nfalse\n,\n// (2)\n\"excludeMeanings\"\n:\nfalse\n// (3)\n}\nBuild the request as above, but add as many field names as you like to specify the attributes you want to include on each asset in the lineage.\nYou can use\n\"excludeClassifications\": false\nto ensure that Atlan tags are included on each asset in lineage.\nYou can use\n\"excludeMeanings\": false\nto ensure that assigned business terms are included on each asset in lineage.\nOriginal API\n¶\nDeprecated and removed\nThe original lineage API was previously deprecated, and now no longer exists in the latest releases of the SDKs. It is slower, does not support paging, and will not receive any enhancements. We would therefore strongly recommend using the newer API (described above); however, the original API is described here for completeness.\nRetrieve lineage (deprecated)\nTo fetch lineage, you need to request lineage from Atlan from a particular starting point:\nJava\nPython\nRaw REST API\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\nLineageRequest",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 38
    }
  },
  {
    "content": "Retrieve lineage (deprecated)\nTo fetch lineage, you need to request lineage from Atlan from a particular starting point:\nJava\nPython\nRaw REST API\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\nLineageRequest\nrequest\n=\nLineageRequest\n.\nbuilder\n()\n// (1)\n.\nguid\n(\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n)\n// (2)\n.\ndepth\n(\n0\n)\n// (3)\n.\ndirection\n(\nAtlanLineageDirection\n.\nBOTH\n)\n// (4)\n.\nhideProcess\n(\ntrue\n)\n// (5)\n.\nallowDeletedProcess\n(\nfalse\n)\n// (6)\n.\nbuild\n();\n// (7)\nLineageResponse\nresponse\n=\nrequest\n.\nfetch\n();\n// (8)\nBuild a\nLineageRequest\nto specify the starting point for your lineage retrieval.\nThe starting point for lineage must be the\nGUID\nof an asset.\nYou can specify how far you want lineage to be fetched using\ndepth()\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n0\nwill fetch\nall\nupstream and downstream assets.\nIf you expect extensive lineage, change the default!\nThe default value of\n0\ncan result in a long-running API call with a very large response payload. If you expect your lineage to be extensive, you may want to try smaller depths first.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 39
    }
  },
  {
    "content": "The default value of\n0\ncan result in a long-running API call with a very large response payload. If you expect your lineage to be extensive, you may want to try smaller depths first.\nYou can fetch only upstream assets, only downstream assets, or lineage in both directions.\nDecide whether to include processes in the response.\nUse\ntrue\nif you want to use the SDK's traversal helpers\nCurrently the SDK's traversal logic only works when this is set to\ntrue\n. Unless you want to code your own traversal logic, set\nhideProcess\nto\ntrue\n.\nIf\nallowDeletedProcess\nis set to\ntrue\nand\nhideProcess\nis set to\nfalse\nthen deleted (archived) processes will also be included in the response.\nBuild the request.\nCall the\nfetch()\nmethod to actually retrieve the lineage details from Atlan.\nRetrieve lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nLineageDirection\nfrom\npyatlan.model.lineage\nimport\nLineageRequest\nclient\n=\nAtlanClient\n()\nrequest\n=\nLineageRequest\n(\n# (1)\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n# (2)\ndepth\n=\n0\n,\n# (3)\ndirection\n=\nLineageDirection\n.\nBOTH\n,\n# (4)\nhide_process\n=\nTrue\n,\n# (5)\nallow_deleted_process\n=\nFalse\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 40
    }
  },
  {
    "content": "LineageRequest\n(\n# (1)\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n# (2)\ndepth\n=\n0\n,\n# (3)\ndirection\n=\nLineageDirection\n.\nBOTH\n,\n# (4)\nhide_process\n=\nTrue\n,\n# (5)\nallow_deleted_process\n=\nFalse\n,\n# (6)\n)\nresponse\n=\nclient\n.\nasset\n.\nget_lineage\n(\nrequest\n)\n# (7)\nBuild a\nLineageRequest\nto specify the starting point for your lineage retrieval.\nThe starting point for lineage must be the\nGUID\nof an asset.\nYou can specify how far you want lineage to be fetched using\ndepth\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n0\nwill fetch\nall\nupstream and downstream assets.\nIf you expect extensive lineage, change the default!\nThe default value of\n0\ncan result in a long-running API call with a very large response payload. If you expect your lineage to be extensive, you may want to try smaller depths first.\nYou can fetch only upstream assets, only downstream assets, or lineage in both directions.\nDecide whether to include processes in the response.\nUse\nTrue\nif you want to use the SDK's traversal helpers",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 41
    }
  },
  {
    "content": "You can fetch only upstream assets, only downstream assets, or lineage in both directions.\nDecide whether to include processes in the response.\nUse\nTrue\nif you want to use the SDK's traversal helpers\nCurrently the SDK's traversal logic only works when this is set to\nTrue\n. Unless you want to code your own traversal logic, set\nhide_process\nto\nTrue\n.\nIf\nallow_deleted_process\nis set to\nTrue\nand\nhide_process\nis set to\nFalse\nthen deleted (archived) processes will also be included in the response.\nCall the\nasset.get_lineage()\nmethod to actually retrieve the lineage details from Atlan.\nPOST /api/meta/lineage/getlineage\n1\n2\n3\n4\n5\n6\n7\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n0\n,\n// (2)\n\"direction\"\n:\n\"BOTH\"\n,\n// (3)\n\"hideProcess\"\n:\ntrue\n,\n// (4)\n\"allowDeletedProcess\"\n:\nfalse\n// (5)\n}\nThe starting point for lineage must be the\nGUID\nof an asset.\nYou can specify how far you want lineage to be fetched using\ndepth\n. A depth of\n1\nwill only fetch immediate upstream and downstream assets, while\n2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n0\nwill fetch\nall\nupstream and downstream assets.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 42
    }
  },
  {
    "content": "2\nwill also fetch the immediate upstream and downstream assets of those assets, and so on. The default value of\n0\nwill fetch\nall\nupstream and downstream assets.\nIf you expect extensive lineage, change the default!\nThe default value of\n0\ncan result in a long-running API call with a very large response payload. If you expect your lineage to be extensive, you may want to try smaller depths first.\nYou can fetch only upstream assets, only downstream assets, or lineage in both directions.\nDecide whether to include processes in the response.\nIf\nallowDeletedProcess\nis set to\ntrue\nand\nhideProcess\nis set to\nfalse\nthen deleted (archived) processes will also be included in the response.\nTraverse lineage (deprecated)\nTo assist with traversal of the lineage, the SDK provides some helper methods.\nDownstream assets (deprecated)\nTo retrieve assets immediately downstream from the originally-requested asset:\nJava\nPython\nRaw REST API\nRetrieve downstream assets\n9\n10\n11\nSet\n<\nString\n>\ndownstreamGuids\n=\nresponse\n.\ngetDownstreamAssetGuids\n();\n// (1)\nList\n<\nAsset\n>\ndownstreamAssets\n=\nresponse\n.\ngetDownstreamAssets\n();\n// (2)\ndownstreamGuids\n=\nresponse\n.\ngetDownstreamProcessGuids\n();\n// (3)\nThe",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 43
    }
  },
  {
    "content": "=\nresponse\n.\ngetDownstreamAssetGuids\n();\n// (1)\nList\n<\nAsset\n>\ndownstreamAssets\n=\nresponse\n.\ngetDownstreamAssets\n();\n// (2)\ndownstreamGuids\n=\nresponse\n.\ngetDownstreamProcessGuids\n();\n// (3)\nThe\ngetDownstreamAssetGuids()\nmethod will return the GUIDs of assets that are immediately downstream.\nThe\ngetDownstreamAssets()\nmethod will return the asset objects for the assets that are immediately downstream.\nThe\ngetDownstreamProcessGuids()\nmethod will return the GUIDs of the processes that run immediately downstream.\nRetrieve downstream assets\n14\n15\n16\ndownstream_guids\n=\nresponse\n.\nget_downstream_asset_guids\n()\n# (1)\ndownstream_assets\n=\nresponse\n.\nget_downstream_assets\n()\n# (2)\ndownstream_process_guids\n=\nresponse\n.\nget_downstream_process_guids\n()\n# (3)\nThe\nget_downstream_asset_guids()\nmethod will return the GUIDs of assets that are immediately downstream.\nThe\nget_downstream_assets()\nmethod will return the asset objects for the assets that are immediately downstream.\nThe\nget_downstream_process_guids()\nmethod will return the GUIDs of the processes that run immediately downstream.\nPOST /api/meta/lineage/getlineage\n1\n2\n3\n4\n5\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 44
    }
  },
  {
    "content": "method will return the GUIDs of the processes that run immediately downstream.\nPOST /api/meta/lineage/getlineage\n1\n2\n3\n4\n5\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n1\n,\n// (2)\n\"direction\"\n:\n\"OUTPUT\"\n// (3)\n}\nThe starting point for lineage must be the\nGUID\nof an asset.\nA depth of\n1\nwill only fetch immediate upstream and downstream assets.\nA direction of\nOUTPUT\nwill fetch only downstream assets.\nUpstream assets (deprecated)\nTo retrieve assets immediately upstream from the originally-requested asset:\nJava\nPython\nRaw REST API\nRetrieve upstream assets\n9\n10\n11\nSet\n<\nString\n>\nupstreamGuids\n=\nresponse\n.\ngetUpstreamAssetGuids\n();\n// (1)\nList\n<\nAsset\n>\nupstreamAssets\n=\nresponse\n.\ngetUpstreamAssets\n();\n// (2)\nupstreamGuids\n=\nresponse\n.\ngetUpstreamProcessGuids\n();\n// (3)\nThe\ngetUpstreamAssetGuids()\nmethod will return the GUIDs of assets that are immediately upstream.\nThe\ngetUpstreamAssets()\nmethod will return the asset objects for the assets that are immediately upstream.\nThe\ngetUpstreamProcessGuids()\nmethod will return the GUIDs of the processes that run immediately upstream.\nRetrieve upstream assets\n14\n15\n16\nupstream_guids\n=\nresponse\n.\nget_upstream_asset_guids\n()",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 45
    }
  },
  {
    "content": "The\ngetUpstreamProcessGuids()\nmethod will return the GUIDs of the processes that run immediately upstream.\nRetrieve upstream assets\n14\n15\n16\nupstream_guids\n=\nresponse\n.\nget_upstream_asset_guids\n()\n# (1)\nupstream_assets\n=\nresponse\n.\nget_upstream_assets\n()\n# (2)\nupstream_process_guids\n=\nresponse\n.\nget_upstream_process_guids\n()\n# (3)\nThe\nget_upstream_asset_guids()\nmethod will return the GUIDs of assets that are immediately upstream.\nThe\nget_upstream_assets()\nmethod will return the asset objects for the assets that are immediately upstream.\nThe\nget_upstream_process_guids()\nmethod will return the GUIDs of the processes that run immediately upstream.\nPOST /api/meta/lineage/getlineage\n1\n2\n3\n4\n5\n{\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n,\n// (1)\n\"depth\"\n:\n1\n,\n// (2)\n\"direction\"\n:\n\"INPUT\"\n// (3)\n}\nThe starting point for lineage must be the\nGUID\nof an asset.\nA depth of\n1\nwill only fetch immediate upstream and downstream assets.\nA direction of\nINPUT\nwill fetch only upstream assets.\nDepth-first traversal (deprecated)",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 46
    }
  },
  {
    "content": "GUID\nof an asset.\nA depth of\n1\nwill only fetch immediate upstream and downstream assets.\nA direction of\nINPUT\nwill fetch only upstream assets.\nDepth-first traversal (deprecated)\nYou might want to traverse more than only the immediate upstream or downstream assets. To retrieve all assets that are downstream from the originally-requested asset, across multiple degrees of separation, using a depth-first search traversal:\nJava\nPython\nRaw REST API\nRetrieve all downstream assets\n9\n10\nList\n<\nString\n>\ndfsDownstreamGuids\n=\nresponse\n.\ngetAllDownstreamAssetGuidsDFS\n();\n// (1)\nList\n<\nAsset\n>\ndfsDownstream\n=\nresponse\n.\ngetAllDownstreamAssetsDFS\n();\n// (2)\nThe\ngetAllDownstreamAssetGuidsDFS()\nmethod will return the GUIDs of all assets that are downstream.\nThe first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single GUID.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 47
    }
  },
  {
    "content": "The first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single GUID.\nThe traversal will be in depth-first order downstream. This means after the GUID for the starting point, the list will contain GUIDs of assets immediately downstream. These will be followed by the assets that are immediately downstream from those assets, and so on. (The deeper you get into the list, the further downstream you will be in lineage from the starting point.)\nThe\ngetAllDownstreamAssetsDFS()\nmethod will return the asset objects for all assets that are downstream.\nThe first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single asset.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 48
    }
  },
  {
    "content": "The first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single asset.\nThe traversal will be in depth-first order downstream. This means after the asset for the starting point, the list will contain assets of assets immediately downstream. These will be followed by the assets that are immediately downstream from those assets, and so on. (The deeper you get into the list, the further downstream you will be in lineage from the starting point.)\nRetrieve all upstream assets\n9\n10\nList\n<\nString\n>\ndfsDownstreamGuids\n=\nresponse\n.\ngetAllUpstreamAssetGuidsDFS\n();\n// (1)\nList\n<\nAsset\n>\ndfsUpstream\n=\nresponse\n.\ngetAllUpstreamAssetsDFS\n();\n// (2)\nThe\ngetAllUpstreamAssetGuidsDFS()\nmethod will return the GUIDs of all assets that are upstream.\nThe first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single GUID.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 49
    }
  },
  {
    "content": "The first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single GUID.\nThe traversal will be in depth-first order upstream. This means after the GUID for the starting point, the list will contain GUIDs of assets immediately upstream. These will be followed by the assets that are immediately upstream from those assets, and so on. (The deeper you get into the list, the further upstream you will be in lineage from the starting point.)\nThe\ngetAllUpstreamAssetsDFS()\nmethod will return the asset objects for all assets that are upstream.\nThe first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single asset.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 50
    }
  },
  {
    "content": "The first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single asset.\nThe traversal will be in depth-first order upstream. This means after the asset for the starting point, the list will contain assets of assets immediately upstream. These will be followed by the assets that are immediately upstream from those assets, and so on. (The deeper you get into the list, the further upstream you will be in lineage from the starting point.)\nRetrieve all downstream assets\n14\n15\ndfs_downstream_guids\n=\nresponse\n.\nget_all_downstream_asset_guids_dfs\n()\n# (1)\ndfs_downstream_assets\n=\nresponse\n.\nget_all_downstream_assets_dfs\n()\n# (2)\nThe\nget_all_downstream_asset_guids_dfs()\nmethod will return the GUIDs of all assets that are downstream.\nThe first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single GUID.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 51
    }
  },
  {
    "content": "The first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single GUID.\nThe traversal will be in depth-first order downstream. This means after the GUID for the starting point, the list will contain GUIDs of assets immediately downstream. These will be followed by the assets that are immediately downstream from those assets, and so on. (The deeper you get into the list, the further downstream you will be in lineage from the starting point.)\nThe\nget_all_downstream_assets_dfs()\nmethod will return the asset objects for all assets that are downstream.\nThe first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single asset.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 52
    }
  },
  {
    "content": "The first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no downstream lineage this will still return a list with a single asset.\nThe traversal will be in depth-first order downstream. This means after the asset for the starting point, the list will contain assets of assets immediately downstream. These will be followed by the assets that are immediately downstream from those assets, and so on. (The deeper you get into the list, the further downstream you will be in lineage from the starting point.)\nRetrieve all upstream assets\n14\n15\ndfs_upstream_guids\n=\nresponse\n.\nget_all_upstream_asset_guids_dfs\n()\n# (1)\ndfs_upstream_assets\n=\nresponse\n.\nget_all_upstream_assets_dfs\n()\n# (2)\nThe\nget_all_upstream_asset_guids_dfs()\nmethod will return the GUIDs of all assets that are upstream.\nThe first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single GUID.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 53
    }
  },
  {
    "content": "The first GUID will always be the GUID of the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single GUID.\nThe traversal will be in depth-first order upstream. This means after the GUID for the starting point, the list will contain GUIDs of assets immediately upstream. These will be followed by the assets that are immediately upstream from those assets, and so on. (The deeper you get into the list, the further upstream you will be in lineage from the starting point.)\nThe\nget_all_upstream_assets_dfs()\nmethod will return the asset objects for all assets that are upstream.\nThe first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single asset.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 54
    }
  },
  {
    "content": "The first asset object will always be the object for the asset used as the starting point for lineage, so even if there is no upstream lineage this will still return a list with a single asset.\nThe traversal will be in depth-first order upstream. This means after the asset for the starting point, the list will contain assets of assets immediately upstream. These will be followed by the assets that are immediately upstream from those assets, and so on. (The deeper you get into the list, the further upstream you will be in lineage from the starting point.)\nMultiple API calls\nYou may either need to make multiple API calls using the approaches above, or retrieve all downstream lineage and in your code traverse the returned relationships.\nMore details on what\nall\nmeans here\nKeep in mind that when we say \"all\" above we mean all assets that are found\nin the response\n. If you have modified your request parameters to limit the lineage (for example, through\ndepth()\nor\ndirection()\n) then this will only traverse what is found in the response — not necessarily all lineage in Atlan.\n2022-12-02\n2024-12-11\nWas this page helpful?\nThanks for your feedback!",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 55
    }
  },
  {
    "content": "depth()\nor\ndirection()\n) then this will only traverse what is found in the response — not necessarily all lineage in Atlan.\n2022-12-02\n2024-12-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_traverse.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_traverse.json",
      "chunk_id": 56
    }
  }
]