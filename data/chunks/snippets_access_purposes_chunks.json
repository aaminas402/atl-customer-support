[
  {
    "content": "Managing purposes - Developer\nSkip to content\nPurposes\n¶\nPurposes\nare a way of curating assets by a business area, or to further protect particularly sensitive data.\nList purposes\n¶\n0.0.14\n1.4.0\n4.0.0\nTo retrieve a listing of purposes, run a search and page the results:\nJava\nPython\nKotlin\nGo\nRaw REST API\nList purposes\n1\n2\n3\n4\n5\n6\nPurpose\n.\nselect\n(\nclient\n)\n// (1)\n.\nstream\n()\n// (2)\n.\nfilter\n(\na\n->\na\ninstanceof\nPurpose\n)\n// (3)\n.\nforEach\n(\np\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Purpose: {}\"\n,\np\n);\n});\nTo start building up a query specifically for purposes, you can use the\nselect()\nconvenience method on\nPurpose\nitself. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nList purposes\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 0
    }
  },
  {
    "content": "This is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nList purposes\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nfrom\npyatlan.model.fluent_search\nimport\nCompoundQuery\n,\nFluentSearch\nclient\n=\nAtlanClient\n()\nsearch_request\n=\n(\nFluentSearch\n()\n# (1)\n.\nwhere\n(\nCompoundQuery\n.\nactive_assets\n())\n.\nwhere\n(\nCompoundQuery\n.\nasset_type\n(\nPurpose\n))\n# (2)\n)\n.\nto_request\n()\n# (3)\nresults\n=\nclient\n.\nasset\n.\nsearch\n(\nsearch_request\n)\n# (4)\nfor\nasset\nin\nresults\n:\n# (5)\nif\nisinstance\n(\nasset\n,\nPurpose\n):\n# Do something with the Purpose\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPurpose\n.\nBuild this query into a new search request.\nRun the search.\nPage through the results (each asset in the results will be a purpose).\nList purposes\n1\n2\n3\n4\n5\n6\nPurpose\n.\nselect\n(\nclient\n)\n// (1)\n.\nstream\n()\n// (2)\n.\nfilter\n{\nit\nis\nPurpose\n}\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Purpose:\n$\nit\n\"\n}\n}\nTo start building up a query specifically for purposes, you can use the\nselect()\nconvenience method on",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 1
    }
  },
  {
    "content": "()\n// (2)\n.\nfilter\n{\nit\nis\nPurpose\n}\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Purpose:\n$\nit\n\"\n}\n}\nTo start building up a query specifically for purposes, you can use the\nselect()\nconvenience method on\nPurpose\nitself. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nList purposes\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nresponse\n,\natlanErr\n:=\nassets\n.\nNewFluentSearch\n().\n// (1)\nPageSizes\n(\n20\n).\nActiveAssets\n().\nAssetType\n(\n\"Purpose\"\n).\n// (2)\nExecute\n()\n// (3)\nif\natlanErr\n!=\nnil\n{\nlogger\n.\nLog\n.\nErrorf\n(\n\"Error: %v\"\n,\natlanErr\n)\n}\nfor\n_\n,\nentity\n:=\nrange\nresponse\n[\n0\n].\nEntities\n{\n// (4)\nif\nentity\n.\nTypeName\n!=\nnil\n&&\n*\nentity\n.\nTypeName\n==\n\"Purpose\"\n{\n// Do something with the Purpose\n}\n}",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 2
    }
  },
  {
    "content": ".\nErrorf\n(\n\"Error: %v\"\n,\natlanErr\n)\n}\nfor\n_\n,\nentity\n:=\nrange\nresponse\n[\n0\n].\nEntities\n{\n// (4)\nif\nentity\n.\nTypeName\n!=\nnil\n&&\n*\nentity\n.\nTypeName\n==\n\"Purpose\"\n{\n// Do something with the Purpose\n}\n}\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPurpose\n.\nRun the search.\nPage through the results (each asset in the results will be a purpose).\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\"dsl\"\n:\n{\n\"query\"\n:\n{\n// (1)\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Purpose\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPurpose\n.\nCreate a purpose\n¶\n0.0.14\n2.0.0\n4.0.0\nTo create a new purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nCreate a purpose\n1\n2\n3\n4\n5\n6\nPurpose\ntoCreate\n=\nPurpose\n.\ncreator\n(\n// (1)\n\"Known Issues\"\n,\n// (2)\nList\n.\nof\n(\n\"Issue\"\n))\n// (3)\n.\nbuild\n();",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 3
    }
  },
  {
    "content": "Java\nPython\nKotlin\nGo\nRaw REST API\nCreate a purpose\n1\n2\n3\n4\n5\n6\nPurpose\ntoCreate\n=\nPurpose\n.\ncreator\n(\n// (1)\n\"Known Issues\"\n,\n// (2)\nList\n.\nof\n(\n\"Issue\"\n))\n// (3)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoCreate\n.\nsave\n(\nclient\n);\n// (4)\nPurpose\npurpose\n=\n(\nPurpose\n)\nresponse\n.\ngetCreatedAssets\n().\nget\n(\n0\n);\n// (5)\nLike other builder patterns in the SDK, the\ncreator()\nmethod ensures all required information is provided for the purpose.\nYou must provide a name for the purpose.\nYou must provide a list of the tags that are included in the purpose.\nTo create the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then retrieve the resulting details of the created purpose from the response (you may of course want to do some type checking first).\nCreate a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nclient\n=\nAtlanClient\n()\nto_create\n=\nPurpose\n.\ncreator\n(\n# (1)\nname\n=\n\"Data Assets\"\n,\n# (2)\natlan_tags\n=\n[\n\"Issue\"\n])\n# (3)\nresponse\n=\nclient\n.\nasset\n.\nsave",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 4
    }
  },
  {
    "content": "from\npyatlan.model.assets\nimport\nPurpose\nclient\n=\nAtlanClient\n()\nto_create\n=\nPurpose\n.\ncreator\n(\n# (1)\nname\n=\n\"Data Assets\"\n,\n# (2)\natlan_tags\n=\n[\n\"Issue\"\n])\n# (3)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_create\n)\n# (4)\np\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nPurpose\n)[\n0\n]\n# (5)\nLike other builder patterns in the SDK, the\ncreate()\nmethod ensures all required information is provided for the purpose.\nYou must provide a name for the purpose.\nYou must provide a list of the Atlan tags that are included in the purpose.\nTo create the purpose in Atlan, call the\nsave()\nmethod with the object you've built.\nYou can then retrieve the resulting details of the created purpose from the response.\nCreate a purpose\n1\n2\n3\n4\n5\n6\nval\ntoCreate\n=\nPurpose\n.\ncreator\n(\n// (1)\n\"Known Issues\"\n,\n// (2)\nlistOf\n(\n\"Issue\"\n))\n// (3)\n.\nbuild\n()\nval\nresponse\n=\ntoCreate\n.\nsave\n(\nclient\n)\n// (4)\nval\npurpose\n=\nresponse\n.\ncreatedAssets\n[\n0\n]\nas\nPurpose\n// (5)\nLike other builder patterns in the SDK, the\ncreator()\nmethod ensures all required information is provided for the purpose.\nYou must provide a name for the purpose.\nYou must provide a list of the tags that are included in the purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 5
    }
  },
  {
    "content": "creator()\nmethod ensures all required information is provided for the purpose.\nYou must provide a name for the purpose.\nYou must provide a list of the tags that are included in the purpose.\nTo create the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then retrieve the resulting details of the created purpose from the response (you may of course want to do some type checking first).\nCreate a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\ntoCreate\n:=\n&\nassets\n.\nPurpose\n{}\ntoCreate\n.\nCreator\n(\n// (1)\n\"Data Assets\"\n,\n// (2)\n[]\nstring\n{\n\"Issue\"\n},\n// (3)\n)\nresponse\n,\nerr\n:=\nassets\n.\nSave\n(\ntoCreate\n)\n// (4)\nif\nerr\n!=\nnil\n{\nlogger\n.\nLog\n.\nErrorf\n(\n\"Error : %v\"\n,\nerr\n)\n}\nelse\n{\nfor\n_\n,\nentity\n:=\nrange\nresponse\n.\nMutatedEntities\n.\nCREATE\n{\n// (5)\nfmt\n.\nPrintln\n(\n\"Purpose GUID:\"\n,\nentity\n.\nGuid\n,\n\"Display Text:\"\n,\nentity\n.\nDisplayText\n)\n// Do Something with Purpose\n}\n}\nLike other builder patterns in the SDK, the\nCreator()\nmethod ensures all required information is provided for the purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 6
    }
  },
  {
    "content": ",\n\"Display Text:\"\n,\nentity\n.\nDisplayText\n)\n// Do Something with Purpose\n}\n}\nLike other builder patterns in the SDK, the\nCreator()\nmethod ensures all required information is provided for the purpose.\nYou must provide a name for the purpose.\nYou must provide a list of the Atlan tags that are included in the purpose.\nTo create the purpose in Atlan, call the\nSave()\nmethod with the object you've built.\nYou can then retrieve the resulting details of the created purpose from the response.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Purpose\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"displayName\"\n:\n\"Known Issues\"\n,\n// (3)\n\"purposeClassifications\"\n:\n[\n\"jRr7KmCSPliWQQSVK6dqTc\"\n// (4)\n],\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (5)\n\"qualifiedName\"\n:\n\"Known Issues\"\n,\n// (6)\n\"name\"\n:\n\"Known Issues\"\n// (7)\n}\n}\n]\n}\nWrap the purpose definition in an\nentities\narray.\nEnsure the type of each nested object is exactly\nPurpose\n.\nUse the\ndisplayName\nto provide the name for the purpose as you want it to appear in the UI.\nYou must specify at least one Atlan tag in the\npurposeClassifications\narray. Note that this needs to use the",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 7
    }
  },
  {
    "content": "displayName\nto provide the name for the purpose as you want it to appear in the UI.\nYou must specify at least one Atlan tag in the\npurposeClassifications\narray. Note that this needs to use the\nAtlan-internal hashed-string representation\nof the Atlan tag.\nEnsure you explicitly set the access control to enabled when creating it.\nYou must provide a\nqualifiedName\nfor the purpose, although this will be generated and overwritten by the back-end\nYou must provide a\nname\nfor the purpose, although this will also be normalized by the back-end so will be slightly different once created.\nRetrieve a purpose\n¶\n0.0.14\n2.0.0\n4.0.0\nTo retrieve a purpose by its name:\nJava\nPython\nKotlin\nGo\nRaw REST API\nRetrieve a purpose\n1\nList\n<\nPurpose\n>\nlist\n=\nPurpose\n.\nfindByName\n(\nclient\n,\n\"Known Issues\"\n);\n// (1)\nThe\nfindByName()\nmethod handles searching for the purpose based on its name, which could therefore return more than one result. You can also (optionally) provide a second parameter with a list of attributes to retrieve for each purpose. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve a purpose\n1\n2\n3\n4\nfrom",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 8
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve a purpose\n1\n2\n3\n4\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nresult\n=\nclient\n.\nasset\n.\nfind_purposes_by_name\n(\n\"Known Issues\"\n)\n# (1)\nThe\nasset.find_purposes_by_name()\nmethod handles searching for the purpose based on its name, which could therefore return more than one result.\nRetrieve a purpose\n1\nval\nlist\n=\nPurpose\n.\nfindByName\n(\nclient\n,\n\"Known Issues\"\n)\n// (1)\nThe\nfindByName()\nmethod handles searching for the purpose based on its name, which could therefore return more than one result. You can also (optionally) provide a second parameter with a list of attributes to retrieve for each purpose. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve a purpose\n1\n2\n3\n4\nresult\n,\natlanErr\n:=\nassets\n.\nFindPurposesByName\n(\n\"Known Issues\"\n)\n// (1)\nif\natlanErr\n!=\nnil\n{\nlogger\n.\nLog\n.\nErrorf\n(\n\"Error: %v\"\n,\natlanErr\n)\n}\nThe\nassets.FindPurposesByName()\nmethod handles searching for the purpose based on its name, which could therefore return more than one result.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 9
    }
  },
  {
    "content": ",\natlanErr\n)\n}\nThe\nassets.FindPurposesByName()\nmethod handles searching for the purpose based on its name, which could therefore return more than one result.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n{\n\"dsl\"\n:\n{\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Purpose\"\n// (1)\n}\n}\n},\n{\n\"term\"\n:\n{\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"Known Issues\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nDefine the search to include results for a type exactly matching\nPurpose\n, and...\n... with the exact name of the purpose you want to find.\nUpdate a purpose\n¶\n0.0.14\n2.0.0\n4.0.0\nTo update a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nUpdate a purpose\n1\n2\n3\n4\n5\n6\n7\nPurpose\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndescription\n(\n\"Now with a description!\"\n)\n// (5)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 10
    }
  },
  {
    "content": ",\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndescription\n(\n\"Now with a description!\"\n)\n// (5)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then chain on any other updates, such as changing the description of the purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nclient\n=\nAtlanClient\n()\nto_update\n=\nPurpose\n.\nupdater\n(\n# (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n# (2)\n\"Known Issues\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndescription\n=\n\"Now with a description!\"\n# (5)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (6)\nUse the\nupdater()\nmethod to update a purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 11
    }
  },
  {
    "content": "# (2)\n\"Known Issues\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndescription\n=\n\"Now with a description!\"\n# (5)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod with the object you've built.\nUpdate a purpose\n1\n2\n3\n4\n5\n6\n7\nval\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndescription\n(\n\"Now with a description!\"\n)\n// (5)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then chain on any other updates, such as changing the description of the purpose.\nTo update the purpose in Atlan, call the\nsave()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 12
    }
  },
  {
    "content": "You can then chain on any other updates, such as changing the description of the purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\ntoUpdate\n:=\n&\nassets\n.\nPurpose\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n,\n// (4)\n)\nDescription\n:=\n\"Now with a description!\"\ntoUpdate\n.\nDescription\n=\n&\nDescription\n// (5)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (6)\nUse the\nUpdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the purpose.\nTo update the purpose in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Purpose\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 13
    }
  },
  {
    "content": "Save()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Purpose\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (3)\n\"name\"\n:\n\"Known Issues\"\n// (4)\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (5)\n\"description\"\n:\n\"Now with a description!\"\n,\n// (6)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPurpose\n.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the purpose.\nDelete a purpose\n¶\n0.0.14\n1.4.0\n4.0.0\nTo permanently delete a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nDelete a purpose\n1\nPurpose\n.\npurge\n(\nclient\n,\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n);\n// (1)\nTo permanently delete a purpose in Atlan, call the\npurge()\nmethod with the GUID of the purpose. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a purpose\n1\n2\n3",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 14
    }
  },
  {
    "content": "method with the GUID of the purpose. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a purpose\n1\n2\n3\n4\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nclient\n.\nasset\n.\npurge_by_guid\n(\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n)\n# (1)\nTo permanently delete a purpose in Atlan, call the\nasset.purge_by_guid()\nmethod with the GUID of the purpose.\nDelete a purpose\n1\nPurpose\n.\npurge\n(\nclient\n,\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n)\n// (1)\nTo permanently delete a purpose in Atlan, call the\npurge()\nmethod with the GUID of the purpose. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a purpose\n1\nassets\n.\nPurgeByGuid\n([]\nstring\n{\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n})\n// (1)\nTo permanently delete a purpose in Atlan, call the\nassets.PurgeByGuid()\nmethod with the GUID of the purpose.\nDELETE /api/meta/entity/bulk?guid=3886a92c-2510-40ea-a14d-803d7ac1616b&deleteType=PURGE\n1\n// (1)",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 15
    }
  },
  {
    "content": "assets.PurgeByGuid()\nmethod with the GUID of the purpose.\nDELETE /api/meta/entity/bulk?guid=3886a92c-2510-40ea-a14d-803d7ac1616b&deleteType=PURGE\n1\n// (1)\nAll the details for deleting the purpose are specified in the URL directly. Note that you must provide the GUID of the purpose to delete it.\nActivate or deactivate a purpose\n¶\n0.0.14\n2.0.0\n4.0.0\nAlternatively, if you only want to temporarily deactivate a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nDeactivate a purpose\n1\n2\n3\n4\n5\n6\nPurpose\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\nfalse\n)\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (5)\nUse the\nupdater()\nmethod to update the purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the purpose, while setting it to\ntrue\nwill activate the purpose.\nTo then apply that activation / deactivation to the purpose in Atlan, call the\nsave()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 16
    }
  },
  {
    "content": "false\nwill deactivate the purpose, while setting it to\ntrue\nwill activate the purpose.\nTo then apply that activation / deactivation to the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the state in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDeactivate a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nclient\n=\nAtlanClient\n()\nto_update\n=\nPurpose\n.\nupdater\n(\n# (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n# (2)\n\"Known Issues\"\n,\n# (3)\nFalse\n# (4)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (5)\nUse the\nupdater()\nmethod to update the purpose.\nYou must provide the qualified_name of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update. Setting this to\nFalse\nwill deactivate the purpose, while setting it to\nTrue\nwill activate the purpose.\nTo then apply that activation / deactivation to the purpose in Atlan, call the\nsave()\nmethod with the object you've built.\nDeactivate a purpose\n1\n2\n3\n4\n5\n6\nval\ntoUpdate\n=\nPurpose\n.\nupdater\n(",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 17
    }
  },
  {
    "content": "To then apply that activation / deactivation to the purpose in Atlan, call the\nsave()\nmethod with the object you've built.\nDeactivate a purpose\n1\n2\n3\n4\n5\n6\nval\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\nfalse\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (5)\nUse the\nupdater()\nmethod to update the purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the purpose, while setting it to\ntrue\nwill activate the purpose.\nTo then apply that activation / deactivation to the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the state in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDeactivate a purpose\n1\n2\n3\n4\n5\n6\n7\ntoUpdate\n:=\n&\nassets\n.\nPurpose\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\nfalse\n,\n// (4)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (5)\nUse the\nUpdater()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 18
    }
  },
  {
    "content": ".\nPurpose\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\nfalse\n,\n// (4)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (5)\nUse the\nUpdater()\nmethod to update the purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the purpose, while setting it to\nTrue\nwill activate the purpose.\nTo then apply that activation / deactivation to the purpose in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Purpose\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (3)\n\"name\"\n:\n\"Known Issues\"\n// (4)\n\"isAccessControlEnabled\"\n:\nfalse\n// (5)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPurpose\n.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 19
    }
  },
  {
    "content": "}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPurpose\n.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the purpose, while setting it to\ntrue\nwill activate the purpose.\nAdd policies to a purpose\n¶\nDo not add policies in bulk\nBe careful to only add policies one-by-one to a purpose. While the SDKs will allow you to add them in bulk, currently this results in a purpose where only the final policy in the batch is active at the end of the operation.\nAdd a metadata policy\n¶\n0.0.14\n7.0.0\n4.0.0\nTo add a metadata policy to a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd metadata policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nAuthPolicy\nmetadata\n=\nPurpose\n.\ncreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nSet\n.\nof\n(\nPurposeMetadataAction\n.\nREAD\n),\n// (5)\nnull\n,\n// (6)\nnull\n,\n// (7)\ntrue\n)\n// (8)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n);\n// (9)",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 20
    }
  },
  {
    "content": ".\nALLOW\n,\n// (4)\nSet\n.\nof\n(\nPurposeMetadataAction\n.\nREAD\n),\n// (5)\nnull\n,\n// (6)\nnull\n,\n// (7)\ntrue\n)\n// (8)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n);\n// (9)\nUse the\ncreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nArrays.asList(PurposeMetadataAction.values())\n.\n(Optional) Specify the internal names of groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of groups, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 21
    }
  },
  {
    "content": "(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd metadata policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\n,\nPurposeMetadataAction\nclient\n=\nAtlanClient\n()\nmetadata\n=\nPurpose\n.\ncreate_metadata_policy\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"Simple read access\"\n,\n# (3)\npurpose_id\n=\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n# (4)\npolicy_type\n=\nAuthPolicyType\n.\nALLOW\n,\n# (5)\nactions\n=\n{\nPurposeMetadataAction\n.\nREAD\n},\n# (6)\nall_users\n=\nTrue\n,\n# (7)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nmetadata\n)\n# (8)\nUse the\ncreate_metadata_policy()\nmethod to start building a metadata policy with the minimal required information.\nYou must provide a client instance.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 22
    }
  },
  {
    "content": "=\nclient\n.\nasset\n.\nsave\n(\nmetadata\n)\n# (8)\nUse the\ncreate_metadata_policy()\nmethod to start building a metadata policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nSpecify either the internal names of groups, the usernames of users, or this\nall_users\noption to control who you want the policy to apply to. At least one of these must be provided.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd metadata policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\nmetadata\n=\nPurpose\n.\ncreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nsetOf\n(\nPurposeMetadataAction\n.\nREAD\n),\n// (5)\nnull\n,\n// (6)\nnull\n,\n// (7)\ntrue\n)\n// (8)\n.\nbuild\n()\nval\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n)\n// (9)\nUse the\ncreateMetadataPolicy()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 23
    }
  },
  {
    "content": ".\nALLOW\n,\n// (4)\nsetOf\n(\nPurposeMetadataAction\n.\nREAD\n),\n// (5)\nnull\n,\n// (6)\nnull\n,\n// (7)\ntrue\n)\n// (8)\n.\nbuild\n()\nval\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n)\n// (9)\nUse the\ncreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nPurposeMetadataAction.values().toList()\n.\n(Optional) Specify the internal names of groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of groups, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 24
    }
  },
  {
    "content": "(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd metadata policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\npurpose\n:=\n&\nassets\n.\nPurpose\n{}\nmetadata\n,\n_\n:=\npurpose\n.\nCreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\natlan\n.\nAuthPolicyTypeAllow\n,\n// (4)\n[]\natlan\n.\nPurposeMetadataAction\n{\natlan\n.\nPurposeMetadataActionRead\n,\n// (5)\n},\nnil\n,\n// (6)\nnil\n,\n// (7)\ntrue\n,\n// (8)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\nmetadata\n)\n// (9)\nUse the\nCreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 25
    }
  },
  {
    "content": "You must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\n(Optional) Specify the internal names of groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nTo then add the policy to the purpose in Atlan, call the\nSave()\nmethod with the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"metadata\"\n,\n// (3)\n\"policyCategory\"\n:\n\"purpose\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"atlas_tag\"\n,\n// (6)\n\"name\"\n:",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 26
    }
  },
  {
    "content": ",\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"metadata\"\n,\n// (3)\n\"policyCategory\"\n:\n\"purpose\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"atlas_tag\"\n,\n// (6)\n\"name\"\n:\n\"Simple read access\"\n,\n// (7)\n\"qualifiedName\"\n:\n\"Simple read access\"\n,\n// (8)\n\"policyActions\"\n:\n[\n\"entity-read\"\n// (9)\n],\n\"accessControl\"\n:\n{\n// (10)\n\"typeName\"\n:\n\"Purpose\"\n,\n// (11)\n\"guid\"\n:\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n// (12)\n},\n\"policyResourceCategory\"\n:\n\"TAG\"\n,\n// (13)\n\"policyGroups\"\n:\n[\n\"public\"\n// (14)\n]\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\nmetadata\n.\nYou must use a policy category of\npurpose\n.\nSpecify the type of policy (granting or denying the actions specified next).\nYou must use a policy service name of\natlas_tag\n.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo review available permissions\nTo review the available permissions, see the SDKs — for example, the\nPurposeMetadataAction",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 27
    }
  },
  {
    "content": "Specify the set of permissions you want to allow (or deny) in this policy.\nTo review available permissions\nTo review the available permissions, see the SDKs — for example, the\nPurposeMetadataAction\nenum in the Java SDK.\nUse an embedded\naccessControl\nobject to define the purpose to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPurpose\n.\nYou must provide the GUID of the purpose to attach this policy to.\nYou must set the policy resource category to\nTAG\n.\nYou must specify at least one username in a\npolicyUsers\narray or one internal group name in a\npolicyGroups\narray. The special group\npublic\ncovers all users.\nAdd a data policy\n¶\n0.0.14\n7.0.0\n4.0.0\nTo add a data policy to a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd data policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nAuthPolicy\ndata\n=\nPurpose\n.\ncreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\nAuthPolicyType\n.\nDATA_MASK\n,\n// (4)\nnull\n,\n// (5)\nnull\n,\n// (6)\ntrue\n)\n// (7)\n.\npolicyMaskType\n(\nDataMaskingType\n.\nHASH\n)\n// (8)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ndata\n.\nsave\n(\nclient\n);\n// (9)\nUse the\ncreateDataPolicy()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 28
    }
  },
  {
    "content": "null\n,\n// (5)\nnull\n,\n// (6)\ntrue\n)\n// (7)\n.\npolicyMaskType\n(\nDataMaskingType\n.\nHASH\n)\n// (8)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ndata\n.\nsave\n(\nclient\n);\n// (9)\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\n(Optional) Specify the names of internal groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of groups, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nIf you set the policy type to\nDATA_MASK\n, you also need to chain on the type of masking you want to apply.\nTo then add the policy to the purpose in Atlan, call the\nsave()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 29
    }
  },
  {
    "content": "If you set the policy type to\nDATA_MASK\n, you also need to chain on the type of masking you want to apply.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd data policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\n,\nDataMaskingType\nclient\n=\nAtlanClient\n()\ndata\n=\nPurpose\n.\ncreate_data_policy\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"Mask the data\"\n,\n# (3)\npurpose_id\n=\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n# (4)\npolicy_type\n=\nAuthPolicyType\n.\nDATA_MASK\n,\n# (5)\nall_users\n=\nTrue\n,\n# (6)\n)\ndata\n.\npolicy_mask_type\n=\nDataMaskingType\n.\nHASH\n# (7)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndata\n)\n# (8)\nUse the\ncreate_data_policy()\nmethod to start building a data policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 30
    }
  },
  {
    "content": "You must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\nSpecify either the names of internal groups, the usernames of users, or this\nall_users\noption to control who you want the policy to apply to. At least one of these must be provided.\nIf you set the policy type to\nDATAMASK\n, you also need to set the type of masking you want to apply.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd data policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\ndata\n=\nPurpose\n.\ncreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\nAuthPolicyType\n.\nDATA_MASK\n,\n// (4)\nnull\n,\n// (5)\nnull\n,\n// (6)\ntrue\n)\n// (7)\n.\npolicyMaskType\n(\nDataMaskingType\n.\nHASH\n)\n// (8)\n.\nbuild\n()\nval\nresponse\n=\ndata\n.\nsave\n(\nclient\n)\n// (9)\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 31
    }
  },
  {
    "content": "createDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\n(Optional) Specify the names of internal groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of groups, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nIf you set the policy type to\nDATA_MASK\n, you also need to chain on the type of masking you want to apply.\nTo then add the policy to the purpose in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd data policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 32
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd data policy to purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\npurpose\n:=\n&\nassets\n.\nPurpose\n{}\ndata\n,\n_\n:=\npurpose\n.\nCreateDataPolicy\n(\n// (1)\n\"Mask the data\"\n,\n// (2)\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n,\n// (3)\natlan\n.\nAuthPolicyTypeDatamask\n,\n// (4)\nnil\n,\n// (5)\nnil\n,\n// (6)\ntrue\n,\n// (7)\n)\ndata\n.\nPolicyMaskType\n=\n&\natlan\n.\nDataMaskingTypeHASH\n// (8)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ndata\n)\n// (9)\nUse the\nCreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the purpose to attach this policy to.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\n(Optional) Specify the names of internal groups you want the policy to apply to. At least this or the list of users, or all users must be provided.\n(Optional) Specify the usernames of users you want the policy to apply to. At least this or the list of groups, or all users must be provided.\n(Optional) Apply this policy to all users. If this is set to\ntrue",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 33
    }
  },
  {
    "content": "(Optional) Apply this policy to all users. If this is set to\ntrue\nit will override the previous two parameters, or if false one of the previous two parameters (users or groups) must be specified.\nIf you set the policy type to\nDataMask\n, you also need to chain on the type of masking you want to apply.\nTo then add the policy to the purpose in Atlan, call the\nSave()\nmethod against the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"data\"\n,\n// (3)\n\"policyCategory\"\n:\n\"purpose\"\n,\n// (4)\n\"policyType\"\n:\n\"dataMask\"\n,\n// (5)\n\"policyMaskType\"\n:\n\"MASK_HASH\"\n,\n// (6)\n\"policyServiceName\"\n:\n\"atlas_tag\"\n,\n// (7)\n\"name\"\n:\n\"Mask the data\"\n,\n// (8)\n\"qualifiedName\"\n:\n\"Mask the data\"\n,\n// (9)\n\"policyActions\"\n:\n[\n\"select\"\n// (10)\n],\n\"accessControl\"\n:\n{\n// (11)\n\"typeName\"\n:\n\"Purpose\"\n,\n// (12)\n\"guid\"\n:\n\"3886a92c-2510-40ea-a14d-803d7ac1616b\"\n// (13)\n},\n\"policyResourceCategory\"\n:\n\"TAG\"\n,\n// (14)\n\"policyGroups\"\n:\n[\n\"public\"\n// (15)\n]\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 34
    }
  },
  {
    "content": "// (13)\n},\n\"policyResourceCategory\"\n:\n\"TAG\"\n,\n// (14)\n\"policyGroups\"\n:\n[\n\"public\"\n// (15)\n]\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\nmetadata\n.\nYou must use a policy category of\npurpose\n.\nSpecify the type of policy (granting, denying or masking the data of assets with the tags in the purpose).\nIf you set the policy type to\ndataMask\n, you also need to set the type of masking you want to apply.\nTo review available masking options\nTo review the available masking options, see the SDKs — for example, the\nDataMaskingType\nenum in the Java SDK.\nYou must use a policy service name of\natlas_tag\n.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow (or deny) in this policy. A data policy for a purpose can only allow or deny\nselect\npermissions.\nUse an embedded\naccessControl\nobject to define the purpose to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPurpose\n.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 35
    }
  },
  {
    "content": "select\npermissions.\nUse an embedded\naccessControl\nobject to define the purpose to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPurpose\n.\nYou must provide the GUID of the purpose to attach this policy to.\nYou must set the policy resource category to\nTAG\n.\nYou must specify at least one username in a\npolicyUsers\narray or one internal group name in a\npolicyGroups\narray. The special group\npublic\ncovers all users.\nList policies in a purpose\n¶\n0.0.14\n1.4.0\n4.0.0\nTo list all the policies in a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nList all policies in a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nPurpose\n.\nselect\n(\nclient\n)\n// (1)\n.\nwhere\n(\nPurpose\n.\nNAME\n.\neq\n(\n\"Known Issues\"\n))\n// (2)\n.\nincludeOnResults\n(\nPurpose\n.\nPOLICIES\n)\n// (3)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nNAME\n)\n// (4)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_USERS\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_GROUPS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n(\na\n->\na\ninstanceof\nPurpose\n)\n.\nforEach\n(\np\n->\n{\n// (6)\nSet\n<\nIAuthPolicy\n>\npolicies\n=\n((\nPurpose\n)\np\n).\ngetPolicies\n();\nfor",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 36
    }
  },
  {
    "content": "(\nAuthPolicy\n.\nPOLICY_GROUPS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n(\na\n->\na\ninstanceof\nPurpose\n)\n.\nforEach\n(\np\n->\n{\n// (6)\nSet\n<\nIAuthPolicy\n>\npolicies\n=\n((\nPurpose\n)\np\n).\ngetPolicies\n();\nfor\n(\nIAuthPolicy\npolicy\n:\npolicies\n)\n{\n// Do something with each policy\n}\n});\nStart by selecting a purpose, here using a FluentSearch-based approach. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and users controlled by each policy.\nYou can then directly stream the results of the search.\nFor each result of the search (itself a Purpose), you can then retrieve its policies and iterate through them.\nList all policies in a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nfrom\ntyping\nimport\ncast\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAuthPolicy\n,\nPurpose\nfrom",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 37
    }
  },
  {
    "content": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nfrom\ntyping\nimport\ncast\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAuthPolicy\n,\nPurpose\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentSearch\n()\n.\nwhere\n(\nFluentSearch\n.\nasset_type\n(\nPurpose\n))\n# (1)\n.\nwhere\n(\nPurpose\n.\nNAME\n.\neq\n(\n\"Known Issues\"\n))\n# (2)\n.\ninclude_on_results\n(\nPurpose\n.\nPOLICIES\n)\n# (3)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n# (4)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_USERS\n)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_GROUPS\n)\n)\n.\nto_request\n()\n# (5)\nresponse\n=\nclient\n.\nasset\n.\nsearch\n(\nrequest\n)\n# (6)\nfor\np\nin\nresponse\n:\n# (7)\npolicies\n=\ncast\n(\nPurpose\n,\np\n)\n.\npolicies\nfor\npolicy\nin\npolicies\n:\n# Do something with each policy\nStart by selecting a purpose, here using a FluentSearch-based approach.\nYou can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 38
    }
  },
  {
    "content": "You can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and users controlled by each policy.\nYou can then translate the FluentSearch into a search request.\nRun a search using the search request.\nFor each result of the search (itself a Purpose), you can then retrieve its policies and iterate through them.\nList all policies in a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nPurpose\n.\nselect\n(\nclient\n)\n// (1)\n.\nwhere\n(\nPurpose\n.\nNAME\n.\neq\n(\n\"Known Issues\"\n))\n// (2)\n.\nincludeOnResults\n(\nPurpose\n.\nPOLICIES\n)\n// (3)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nNAME\n)\n// (4)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_USERS\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_GROUPS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n{\nit\nis\nPurpose\n}\n.\nforEach\n{\n// (6)\nval\npolicies\n=\n(\nit\nas\nPurpose\n).\npolicies\nfor\n(\npolicy\nin\npolicies\n)\n{\n// Do something with each policy\n}\n}",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 39
    }
  },
  {
    "content": ".\nPOLICY_GROUPS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n{\nit\nis\nPurpose\n}\n.\nforEach\n{\n// (6)\nval\npolicies\n=\n(\nit\nas\nPurpose\n).\npolicies\nfor\n(\npolicy\nin\npolicies\n)\n{\n// Do something with each policy\n}\n}\nStart by selecting a purpose, here using a FluentSearch-based approach. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and users controlled by each policy.\nYou can then directly stream the results of the search.\nFor each result of the search (itself a Purpose), you can then retrieve its policies and iterate through them.\nList all policies in a purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nresponse\n,\natlanErr\n:=\nassets\n.\nNewFluentSearch\n().\nAssetType\n(\n\"Purpose\"\n).\n// (1)\nWhere\n(\nctx\n.\nPurpose\n.\nNAME\n.\nEq\n(\n\"Known Issues\"\n)).\n// (2)\nIncludeOnResults\n(\nctx\n.\nPurpose\n.\nPOLICIES\n.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 40
    }
  },
  {
    "content": "18\n19\nresponse\n,\natlanErr\n:=\nassets\n.\nNewFluentSearch\n().\nAssetType\n(\n\"Purpose\"\n).\n// (1)\nWhere\n(\nctx\n.\nPurpose\n.\nNAME\n.\nEq\n(\n\"Known Issues\"\n)).\n// (2)\nIncludeOnResults\n(\nctx\n.\nPurpose\n.\nPOLICIES\n.\nGetAtlanFieldName\n()).\n// (3)\nIncludeOnRelations\n(\nctx\n.\nAuthPolicy\n.\nPOLICY_TYPE\n.\nGetAtlanFieldName\n()).\n// (4)\nIncludeOnRelations\n(\nctx\n.\nAuthPolicy\n.\nPOLICY_ACTIONS\n.\nGetAtlanFieldName\n()).\nIncludeOnRelations\n(\nctx\n.\nAuthPolicy\n.\nPOLICY_USERS\n.\nGetAtlanFieldName\n()).\nIncludeOnRelations\n(\nctx\n.\nAuthPolicy\n.\nPOLICY_GROUPS\n.\nGetAtlanFieldName\n()).\nExecute\n()\n// (5)\nif\natlanErr\n!=\nnil\n{\nlogger\n.\nLog\n.\nErrorf\n(\n\"Error: %v\"\n,\natlanErr\n)\n}\nfor\n_\n,\nentity\n:=\nrange\nresponse\n[\n0\n].\nEntities\n{\n// (6)\nif\nentity\n.\nTypeName\n!=\nnil\n&&\n*\nentity\n.\nTypeName\n==\n\"Purpose\"\n{\nfor\n_\n,\npolicy\n:=\nrange\n*\nentity\n.\nPolicies\n{\n// Do something with each Policy\n}\n}\n}\nStart by selecting a purpose, here using a FluentSearch-based approach.\nYou can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 41
    }
  },
  {
    "content": "You can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the purpose as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and users controlled by each policy.\nRun a search using the search request.\nFor each result of the search (itself a Purpose), you can then retrieve its policies and iterate through them.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Purpose\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"Known Issues\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"__guid\"\n:\n{\n\"order\"\n:\n\"asc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"policies\"\n// (3)\n],\n\"relationAttributes\"\n:\n[\n// (4)\n\"name\"\n,\n\"policyType\"\n,\n\"policyResources\"\n,\n\"policyActions\"\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 42
    }
  },
  {
    "content": ":\ntrue\n},\n\"attributes\"\n:\n[\n\"policies\"\n// (3)\n],\n\"relationAttributes\"\n:\n[\n// (4)\n\"name\"\n,\n\"policyType\"\n,\n\"policyResources\"\n,\n\"policyActions\"\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nStart by running a search for purposes.\nYou can select the purpose by whatever you like, in this example we are selecting based on its name.\nInclude the\npolicies\nfor the purpose as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and users controlled by each policy.\nPersonalize the purpose\n¶\n0.0.14\n2.0.0\n4.0.0\nTo personalize which details to show for assets within a purpose:\nJava\nPython\nKotlin\nGo\nRaw REST API\nPersonalize the purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPurpose\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nLINEAGE\n)\n// (5)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nRELATIONS\n)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nQUERIES\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (6)\nUse the\nupdater()",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 43
    }
  },
  {
    "content": ")\n// (5)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nRELATIONS\n)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nQUERIES\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then chain preferences on which metadata tabs should be hidden when using this purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPersonalize the purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPurpose\nfrom\npyatlan.model.enums\nimport\nAssetSidebarTab\nclient\n=\nAtlanClient\n()\nto_update\n=\nPurpose\n.\nupdater\n(\n# (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n# (2)\n\"Known Issues\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndeny_asset_tabs\n=\n{\n# (5)\nAssetSidebarTab\n.\nLINEAGE\n.\nvalue\n,\nAssetSidebarTab\n.\nRELATIONS\n.\nvalue\n,\nAssetSidebarTab",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 44
    }
  },
  {
    "content": ",\n# (2)\n\"Known Issues\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndeny_asset_tabs\n=\n{\n# (5)\nAssetSidebarTab\n.\nLINEAGE\n.\nvalue\n,\nAssetSidebarTab\n.\nRELATIONS\n.\nvalue\n,\nAssetSidebarTab\n.\nQUERIES\n.\nvalue\n,\n}\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod with the object you've built.\nPersonalize the purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\nval\ntoUpdate\n=\nPurpose\n.\nupdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nLINEAGE\n)\n// (5)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nRELATIONS\n)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nQUERIES\n)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 45
    }
  },
  {
    "content": ".\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (6)\nUse the\nupdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then chain preferences on which metadata tabs should be hidden when using this purpose.\nTo update the purpose in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPersonalize the purpose\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\ntoUpdate\n:=\n&\nassets\n.\nPurpose\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (2)\n\"Known Issues\"\n,\n// (3)\ntrue\n,\n// (4)\n)\ntoUpdate\n.\nDenyAssetTabs\n=\n&\n[]\nstring\n{\n// (5)\natlan\n.\nAssetSidebarTabLineage\n.\nName\n,\natlan\n.\nAssetSidebarTabRelations\n.\nName\n,\natlan\n.\nAssetSidebarTabQueries\n.\nName\n,\n}\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (6)\nUse the\nUpdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 46
    }
  },
  {
    "content": ",\n}\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (6)\nUse the\nUpdater()\nmethod to update a purpose.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this purpose.\nTo update the purpose in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Purpose\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/29LZO9Z6ipZbGT6caWTxRB\"\n,\n// (3)\n\"name\"\n:\n\"Known Issues\"\n// (4)\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (5)\n\"denyAssetTabs\"\n:\n[\n// (6)\n\"Lineage\"\n,\n\"Relations\"\n,\n\"Queries\"\n]\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPurpose\n.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 47
    }
  },
  {
    "content": "Purpose\n.\nYou must provide the qualifiedName of the purpose.\nYou must provide the name of the purpose.\nYou must provide whether the purpose should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this purpose.\nTo review available tabs\nTo review the available, see the SDKs — for example, the\nAssetSidebarTab\nenum in the Java SDK.\n2023-01-27\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_access_purposes.html",
      "source_type": "sdk",
      "file": "snippets_access_purposes.json",
      "chunk_id": 48
    }
  }
]