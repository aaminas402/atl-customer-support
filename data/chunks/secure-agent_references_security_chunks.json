[
  {
    "content": "Security | Atlan Documentation\nSkip to main content\nOn this page\nThe Secure Agent is designed with multiple security controls to protect metadata, credentials, and communication between systems. This document outlines its security mechanisms across authentication, encryption, container security, network security, and logging and monitoring.\nAuthentication and authorization\nâ\nThe Secure Agent implements security measures for authentication, encryption, and access control. This section details authentication mechanisms, including API key management and secret handling.\nAPI key management\nâ\nThe Secure Agent uses API keys for authentication when communicating with Atlan. These keys verify the agentâs identity and define its access scope.\nAuthentication:\nAPI keys authenticate the Secure Agent, allowing it to interact securely with Atlan. Each key is associated with a specific tenant and grants access based on permissions.\nStorage:\nAPI keys are stored in enterprise-managed vaults, such as AWS Secrets Manager, Azure Key Vault, or Kubernetes Secrets. The Secure Agent retrieves the key dynamically during operation, eliminating manual configuration.\nExpiration:",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 0
    }
  },
  {
    "content": "Expiration:\nAPI keys can have an expiration period, such as 90-180 days, or be configured based on internal security policies.\nRotation:\nWhen an API key nears expiration, a new key can be generated and stored in the secret vault. The Secure Agent automatically fetches the latest key from the vault.\nRevocation:\nIf an API key is compromised, it can be revoked. Once revoked, the Secure Agent retrieves a newly assigned key from the vault without requiring manual intervention.\nSecret management\nâ\nThe Secure Agent retrieves credentials securely without storing them locally.\nEnterprise-managed vaults:\nThe Secure Agent integrates with AWS Secrets Manager, Azure Key Vault, and other vaults to securely store credentials, keeping them within the organizationâs security perimeter.\nJust-in-time access:\nCredentials, such as database secrets, are retrieved dynamically from enterprise vaults when needed and are never stored locally.\nNo credential transmission:\nSecrets are never transmitted to or stored on Atlan, ensuring complete isolation of sensitive information.\nData security and encryption\nâ\nThe Secure Agent protects metadata using encryption and strict access controls.",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 1
    }
  },
  {
    "content": "Data security and encryption\nâ\nThe Secure Agent protects metadata using encryption and strict access controls.\nCompliance with security standards:\nThe Secure Agent aligns with ISO 27001 and SOC 2 security standards, ensuring strong encryption, data protection, and access control measures.\nData in transit:\nAll communication between the Secure Agent and Atlan is encrypted using TLS 1.2 over HTTPS. For network-level protections, see\nNetwork security\n.\nData at rest:\nMetadata stored in customer-managed storage or Atlanâs tenant bucket is encrypted using AES-256.\nData minimization:\nOnly essential metadata is extracted and transmitted. Customers can configure data filters to exclude specific metadata fields from processing.\nRetention control:\nAtlan doesn't require metadata post-ingestion, and customers can delete metadata from their storage buckets based on internal security policies.\nContainer security\nâ\nThe Secure Agent implements security measures to protect container images, ensuring their integrity and mitigating security risks.\nContainer image hosting:",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 2
    }
  },
  {
    "content": "Container security\nâ\nThe Secure Agent implements security measures to protect container images, ensuring their integrity and mitigating security risks.\nContainer image hosting:\nSecure Agent container images are hosted on public repositories, such as Docker Hub and Amazon ECR. Organizations can deploy the Secure Agent from a private container registry to meet their compliance and security requirements.\nVulnerability scanning:\nTrivy scans container images for known vulnerabilities, outdated dependencies, misconfigurations, and exposed secrets. Scans are conducted weekly and whenever new changes are checked in.\nImage signing and verification:\nCosign signs container images to ensure authenticity. Image verification includes:\nValidating the image signature against Sigstore's transparency log.\nVerifying the signerâs identity through GitHub workflows.\nConfirming the certificate issued by GitHubâs OpenID Connect (OIDC) provider.\nLicense compliance:\nTrivy scans for software license compliance to ensure proper licensing for all components within the container images.\nNetwork security\nâ",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 3
    }
  },
  {
    "content": "License compliance:\nTrivy scans for software license compliance to ensure proper licensing for all components within the container images.\nNetwork security\nâ\nThe Secure Agent operates within a controlled network environment to facilitate secure metadata extraction and communication with Atlan.\nSSL certificates\nâ\nThe Secure Agent encrypts communications with Atlan, source systems, proxy servers, and secret managers.\nEncryption in transit:\nAll data communication between the Secure Agent and Atlan is encrypted using TLS 1.2 over HTTPS.\nCertificate management:\nIf trusted or well-known certificate authorities are used, no additional configuration is needed. The Default Trusted Certificate Authorities store contains certificates from the most common and trusted CAs, which the Secure Agent uses to secure connections.\nIf internal or private certificate authorities are used, the Secure Agent trusts these custom certificate authorities through the infrastructureâs default certificate store.\nWhitelisting\nâ\nConfiguring network access ensures only trusted communication between the Secure Agent and Atlan.\nDomain whitelisting:",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 4
    }
  },
  {
    "content": "Whitelisting\nâ\nConfiguring network access ensures only trusted communication between the Secure Agent and Atlan.\nDomain whitelisting:\nThe Secure Agent requires outbound access to Atlan through the domain\ntenant.atlan.com\n. Domain-based whitelisting simplifies network configurations while maintaining security.\nDNS resolution:\nThe Secure Agent relies on standard DNS resolution to reach Atlan domains. Network configurations must allow name resolution for\ntenant.atlan.com\n.\nIP-based whitelisting:\nIf domain-based whitelisting isnât feasible and specific IP ranges must be allowed, refer to the\nlist of required IP ranges\nto be whitelisted. If you need further assistance, contact\nAtlan Support\n.\nLogging and monitoring\nâ\nThe Secure Agent captures logs for workflow execution, system orchestration, and Kubernetes operations while also providing monitoring capabilities.\nTypes of logs\nâ\nWorkflow logs:\nCapture job execution details, including start and completion status, connections to source systems and secret managers, metadata extraction results, and authentication status. These logs are sent to Atlan and accessible from the workflow status page.\nOrchestration logs:",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 5
    }
  },
  {
    "content": "Orchestration logs:\nTrack the Secure Agentâs scheduled operations, including connection attempts to Atlan, retrieval of workflow requests, and workflow submission to the Argo engine. Logs also include error messages and performance metrics.\nArgo logs:\nProvide visibility into workflow execution, including job scheduling, resource allocation, state transitions, and error handling.\nKubernetes logs:\nCapture system-level events, such as pod lifecycle changes, container startup and shutdown, resource allocation, network connectivity, and health checks.\nMonitoring\nâ\nHealth checks:\nSecure Agent components run periodic health checks to verify connectivity, resource availability, and system integrity.\nResource utilization:\nCPU, memory, and storage usage are monitored to track system load and detect potential bottlenecks.\nLogs can be viewed in Atlan or integrated with external monitoring systems.\nAuthentication and authorization\nData security and encryption\nContainer security\nNetwork security\nLogging and monitoring",
    "metadata": {
      "source_url": "secure-agent_references_security.html",
      "source_type": "docs",
      "file": "secure-agent_references_security.json",
      "chunk_id": 6
    }
  }
]