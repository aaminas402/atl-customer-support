[
  {
    "content": "Lineage generator package - Developer\nSkip to content\nLineage generator package\n¶\nThe\nlineage generator (no transformation) package\nautomatically detects assets with the same (or similar) name between two connections and creates the lineage between them.\nConfiguration\n¶\nRecommendation\nTo avoid to blindly let the package to create the lineage,\nan option to preview the ouput is provided. The typical path to use this package would be:\nAsk the package to generate the lineage preview:\nIf happy with the output, ask the package to generate the lineage on Atlan.\nThe package also provides a method to delete lineage created by the package itself.\nTo generate lineage by automatically detecting assets with similar names between two connections:\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nGenerate lineage for assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nLineageGenerator\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.enums\nimport\nAssetInputHandling\nclient\n=\nAtlanClient\n()\nworkflow\n=\n(\nLineageGenerator\n()\n# (1)\n.\nconfig\n(\n# (2)\nsource_asset_type\n=",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 0
    }
  },
  {
    "content": "from\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.enums\nimport\nAssetInputHandling\nclient\n=\nAtlanClient\n()\nworkflow\n=\n(\nLineageGenerator\n()\n# (1)\n.\nconfig\n(\n# (2)\nsource_asset_type\n=\nLineageGenerator\n.\nSourceAssetType\n.\nTable\n,\nsource_qualified_name\n=\n\"default/snowflake/1737456702/DB/SCHEMA/TABLE\"\n,\ntarget_asset_type\n=\nLineageGenerator\n.\nTargetAssetType\n.\nView\n,\ntarget_qualified_name\n=\n\"default/mssql/1737456702/DB/SCHEMA/VIEW\"\n,\ncase_sensitive_match\n=\nFalse\n,\nmatch_on_schema\n=\nFalse\n,\noutput_type\n=\nLineageGenerator\n.\nOutputType\n.\nPREVIEW\n,\ngenerate_on_child_assets\n=\nFalse\n,\nregex_match\n=\n\"regex_match/*\"\n,\nregex_replace\n=\n\"regex_replace/*\"\n,\nregex_match_schema\n=\n\"regex_match_schema/*\"\n,\nregex_replace_schema\n=\n\"regex_replace_schema/*\"\n,\nregex_match_schema_name\n=\n\"regex_match_schema_name/*\"\n,\nregex_replace_schema_name\n=\n\"regex_replace_schema_name/*\"\n,\nmatch_prefix\n=\n\"test-prefix\"\n,\nmatch_suffix\n=\n\"test-suffix\"\n,\nfile_advanced_seperator\n=\n\"/\"\n,\nfile_advanced_position\n=\n3\n,\nprocess_connection_qn\n=\n\"default/mssql/1737456702/DB/SCHEMA/MVIEW\"\n,\n)\n)\n.\nto_workflow\n()\n# (3)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\nworkflow\n)\n# (4)",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 1
    }
  },
  {
    "content": "=\n\"/\"\n,\nfile_advanced_position\n=\n3\n,\nprocess_connection_qn\n=\n\"default/mssql/1737456702/DB/SCHEMA/MVIEW\"\n,\n)\n)\n.\nto_workflow\n()\n# (3)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\nworkflow\n)\n# (4)\nLineage generator (no transformation) package automatically detects assets\nwith the same (or similar) name between two connections and creates the lineage between them.\nSet up the lineage generator using\nconfig()\nwith the following:\nsource_asset_type\n: type name of the lineage input assets (sources).\nsource_qualified_name\n: qualified name prefix of the lineage input assets (sources).\ntarget_asset_type\n: type name of the lineage output assets (targets).\ntarget_qualified_name\n: qualified name prefix of the lineage output assets (targets).\ncase_sensitive_match\n: whether to match asset names using case-sensitive logic, default:\nFalse\n.\nmatch_on_schema\n: whether to include the schema name to match source and target assets, default:\nFalse\n. Ignored if one of the asset types is not relational (e.g.,\nTable\n,\nView\n,\nMaterialized View\n,\nCalculation View\n,\nColumn\n, or\nMongoDB\nCollection).\noutput_type\n: determines the type of lineage generation, default:\nPreview\n.\nPREVIEW",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 2
    }
  },
  {
    "content": "Table\n,\nView\n,\nMaterialized View\n,\nCalculation View\n,\nColumn\n, or\nMongoDB\nCollection).\noutput_type\n: determines the type of lineage generation, default:\nPreview\n.\nPREVIEW\n: generates a CSV preview of the lineage.\nGENERATE\n: creates the lineage on Atlan.\nDELETE\n: removes the lineage on Atlan.\ngenerate_on_child_assets\n: whether to generate lineage on child assets of the specified source a target types, default:\nFalse\n.\nregex_match\n(optional): regex pattern to identify renaming between source and target.\nregex_replace\n(optional): replacement characters for renaming identified by\nregex_match\n.\nregex_match_schema\n(optional): regex pattern for renaming between source and target schemas (used only if\nmatch_on_schema\nis\nFalse\n).\nregex_replace_schema\n(optional): replacement characters for schema renaming identified by\nregex_match_schema\n.\nregex_match_schema_name\n(optional): regex pattern for renaming source and target name + schema (used only if\nmatch_on_schema\nis\nTrue\n; overrides other regex patterns).\nregex_replace_schema_name\n(optional): replacement characters for schema name renaming identified by\nregex_match_schema_name\n.\nmatch_prefix",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 3
    }
  },
  {
    "content": "match_on_schema\nis\nTrue\n; overrides other regex patterns).\nregex_replace_schema_name\n(optional): replacement characters for schema name renaming identified by\nregex_match_schema_name\n.\nmatch_prefix\n(optional): prefix added to source assets to match with target assets.\nmatch_suffix\n(optional): suffix added to source assets to match with target assets.\nfile_advanced_separator\n(optional): separator used to split the qualified name (applicable to file-based assets). eg:\n/\nsplits\ndefault/s3/1707397085/arn:aws:s3:::mybucket/prefix/myobject.csv\ninto\n[\"default\", \"s3\", \"1707397085\", \"arn:aws:s3:::mybucket\", \"prefix\", \"myobject.csv\"]\n.\nfile_advanced_position\n(optional): number of substrings (from the right) to use for matching (applies to file-based assets). eg: if the value is\n3\n, it results in\n[\"arn:aws:s3:::mybucket\", \"prefix\", \"myobject.csv\"]\n.\nprocess_connection_qn\n(optional): connection for process assets. Defaults to the source asset connection if blank.\nConvert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod\non the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 4
    }
  },
  {
    "content": "Workflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod\non the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the\npackages and workflows introduction\nfor details on how to check the status and wait\nuntil the workflow has been completed.\nComing soon\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI.\nTo rerun an existing workflow, see the steps below.\nRe-run existing workflow\n¶\nTo re-run an existing lineage generator workflow:\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nRe-run existing lineage generator workflow\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nWorkflowPackage\nclient\n=\nAtlanClient\n()\nexisting\n=\nclient\n.\nworkflow\n.\nfind_by_type\n(\n# (1)\nprefix\n=\nWorkflowPackage\n.\nLINEAGE_GENERATOR\n,\nmax_results\n=\n5\n)\n# Determine which lineage generator workflow (n)\n# from the list of results you want to re-run.\nresponse\n=\nclient\n.\nworkflow\n.\nrerun\n(\nexisting\n[\nn\n])\n# (2)\nYou can find workflows by their type using the workflow client\nfind_by_type()\nmethod and providing the\nprefix\nfor one of the packages.",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 5
    }
  },
  {
    "content": "response\n=\nclient\n.\nworkflow\n.\nrerun\n(\nexisting\n[\nn\n])\n# (2)\nYou can find workflows by their type using the workflow client\nfind_by_type()\nmethod and providing the\nprefix\nfor one of the packages.\nIn this example, we do so for the\nLineageGenerator\n. (You can also specify\nthe\nmaximum number of resulting workflows\nyou want to retrieve as results.)\nOnce you've found the workflow you want to re-run,\nyou can simply call the workflow client\nrerun()\nmethod.\nOptionally, you can use\nrerun(idempotent=True)\nto avoid re-running a workflow that is already in running or in a pending state.\nThis will return details of the already running workflow if found, and by default, it is set to\nFalse\n.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nComing soon\nRequires multiple steps through the raw REST API\nFind the existing workflow.\nSend through the resulting re-run request.\nPOST /api/service/workflows/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n5\n,\n\"query\"\n:\n{",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 6
    }
  },
  {
    "content": "POST /api/service/workflows/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n5\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n,\n\"query\"\n:\n{\n\"prefix\"\n:\n{\n\"metadata.name.keyword\"\n:\n{\n\"value\"\n:\n\"csa-lineage-generator\"\n// (1)\n}\n}\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"metadata.creationTimestamp\"\n:\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n},\n\"order\"\n:\n\"desc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n}\nSearching by the\ncsa-lineage-generator\nprefix will ensure you only find existing asset import workflows.\nName of the workflow\nThe name of the workflow will be nested within the\n_source.metadata.name\nproperty of the response object.\n(Remember since this is a search, there could be multiple results, so you may want to use the other\ndetails in each result to determine which workflow you really want.)\nPOST /api/service/workflows/submit\n100\n101\n102\n103\n104\n{\n\"namespace\"\n:\n\"default\"\n,\n\"resourceKind\"\n:\n\"WorkflowTemplate\"\n,\n\"resourceName\"\n:\n\"csa-lineage-generator-1684500411\"\n// (1)\n}\nSend the name of the workflow as the\nresourceName\nto rerun it.\n2025-01-26\n2025-01-28\nWas this page helpful?\nThanks for your feedback!",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 7
    }
  },
  {
    "content": ",\n\"resourceName\"\n:\n\"csa-lineage-generator-1684500411\"\n// (1)\n}\nSend the name of the workflow as the\nresourceName\nto rerun it.\n2025-01-26\n2025-01-28\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_workflows_packages_lineage-generator-nt.html",
      "source_type": "sdk",
      "file": "snippets_workflows_packages_lineage-generator-nt.json",
      "chunk_id": 8
    }
  }
]