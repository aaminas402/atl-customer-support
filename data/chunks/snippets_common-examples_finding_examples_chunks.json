[
  {
    "content": "Search examples - Developer\nSkip to content\nSearch examples\n¶\nConnection by name and type\n¶\nYou may have noticed that connections in Atlan have\nqualifiedName\ns\nthat include a timestamp. As a result, they are not trivial to directly construct.\n1.4.0\n4.0.0\nHowever, you can search for them by name and type to resolve their\nqualifiedName\n:\nJava\nPython\nKotlin\nRaw REST API\nFind a connection by name and type\n1\n2\n3\n4\nList\n<\nConnection\n>\nconnections\n=\nConnection\n.\nfindByName\n(\n// (1)\nclient\n,\n// (2)\n\"production\"\n,\n// (3)\nAtlanConnectorType\n.\nSNOWFLAKE\n);\n// (4)\nUse the\nfindByName\nstatic method on the\nConnection\nclass to search for connections by name and type. If you name your connections uniquely (by type), this should only return a single-item list.\nBecause this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nProvide the name of the connection (this will be exact-matched).\nProvide the type of the connection. You can also (optionally) provide a list of extra attributes you want to retrieve for the connection. Core attributes like\nqualifiedName\nand its GUID are already included.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 0
    }
  },
  {
    "content": "qualifiedName\nand its GUID are already included.\nFind a connection by name and type\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nAtlanConnectorType\nclient\n=\nAtlanClient\n()\nconnections\n=\nclient\n.\nasset\n.\nfind_connections_by_name\n(\n# (1)\nname\n=\n\"production\"\n,\n# (2)\nconnector_type\n=\nAtlanConnectorType\n.\nSNOWFLAKE\n,\n# (3)\nattributes\n=\n[]\n# (4)\n)\nUse the\nasset.find_connections_by_name\nmethod on the\nAtlanClient\nclass to search for connections by name and type. If you name your connections uniquely (by type), this should only return a single-item list.\nProvide the name of the connection (this will be exact-matched).\nProvide the type of the connection.\nYou can also (optionally) provide a list of extra attributes you want to retrieve for the connection. Core attributes like\nqualifiedName\nand its GUID are already included.\nFind a connection by name and type\n1\n2\n3\n4\nval\nconnections\n=\nConnection\n.\nfindByName\n(\n// (1)\nclient\n,\n// (2)\n\"production\"\n,\n// (3)\nAtlanConnectorType\n.\nSNOWFLAKE\n)\n// (4)\nUse the\nfindByName\nstatic method on the\nConnection",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 1
    }
  },
  {
    "content": "1\n2\n3\n4\nval\nconnections\n=\nConnection\n.\nfindByName\n(\n// (1)\nclient\n,\n// (2)\n\"production\"\n,\n// (3)\nAtlanConnectorType\n.\nSNOWFLAKE\n)\n// (4)\nUse the\nfindByName\nstatic method on the\nConnection\nclass to search for connections by name and type. If you name your connections uniquely (by type), this should only return a single-item list.\nBecause this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nProvide the name of the connection (this will be exact-matched).\nProvide the type of the connection. You can also (optionally) provide a list of extra attributes you want to retrieve for the connection. Core attributes like\nqualifiedName\nand its GUID are already included.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n// (3)\n{\n\"term\"\n:\n{\n// (4)\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (5)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Connection\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (6)\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"production\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (7)",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 2
    }
  },
  {
    "content": ":\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (5)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Connection\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (6)\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"production\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (7)\n\"connectorName\"\n:\n{\n\"value\"\n:\n\"snowflake\"\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the connections.\nTo start building up a query with multiple conditions, you can use a\nbool\nquery in Elasticsearch.\nYou can use the\nfilter\ncriteria to define all the conditions the search results must match in a binary way (either matches or doesn't). This avoids the need to calculate a score for each result.\nSearches by default will return\nall\nassets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones.\nSince there could be tables, views, materialized views, columns, databases, schemas, etc in this connection — but you only want the connection itself — you can use an exact match on the type to restrict results to only connections.\nExact match search (case-sensitive) on the name of the connection.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 3
    }
  },
  {
    "content": "Exact match search (case-sensitive) on the name of the connection.\nExact match search on the type of the connector for the connection.\nAll connections\n¶\n1.4.0\n4.0.0\nOn the other hand, you may want to find all the connections that exist in the environment:\nJava\nPython\nKotlin\nRaw REST API\nFind all connections\n1\n2\n3\n4\n5\n6\n7\nConnection\n.\nselect\n(\nclient\n)\n// (1)\n.\npageSize\n(\n100\n)\n// (2)\n.\nstream\n()\n// (3)\n.\nfilter\n(\na\n->\na\ninstanceof\nConnection\n)\n// (4)\n.\nforEach\n(\nc\n->\n{\n// (5)\nlog\n.\ninfo\n(\n\"Connection: {}\"\n,\nc\n);\n});\nTo start building up a query to include all connections, you can use the\nselect()\nconvenience method on\nConnection\nitself. This will already limit results to only active (non-archived) connections. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\n(Optional) You can chain a\npageSize()\nmethod to control the page sizes, to further limit API calls by retrieving more results per page.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 4
    }
  },
  {
    "content": "The search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nFind all connections\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nConnection\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\n,\nCompoundQuery\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n()\n# (2)\n.\nwhere\n(\nCompoundQuery\n.\nasset_type\n(\nConnection\n))\n# (3)\n.\nwhere\n(\nCompoundQuery\n.\nactive_assets\n())\n# (4)\n.\npage_size\n(\n100\n)\n# (5)\n)\n.\nto_request\n()\n# (6)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (7)\nif\nisinstance\n(\nresult\n,\nConnection\n):\n# (8)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\n.where()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 5
    }
  },
  {
    "content": "print\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\n.where()\nmethod allows you to limit to only certain assets. In this example, we are looking for connections, so use the\nCompoundQuery.asset_type()\nhelper to narrow to only connections.\nYou can chain additional\n.where()\nmethods to add further conditions, like this example where we limit to only active (non-archived) assets.\n(Optional) You can chain a\npageSize()\nmethod to control the page sizes, to further limit API calls by retrieving more results per page.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nUse the\nisinstance\nmethod to ensure that the asset is of the desired type. This will also allow an IDE to provide specific type hints for this asset type.\nFind all connections\n1\n2\n3\n4\n5\n6\n7\nConnection\n.\nselect\n(\nclient\n)\n// (1)\n.\npageSize\n(\n100\n)\n// (2)\n.\nstream\n()\n// (3)\n.\nfilter\n{\nit\nis\nConnection\n}\n// (4)\n.\nforEach\n{\n// (5)\nlog\n.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 6
    }
  },
  {
    "content": "Find all connections\n1\n2\n3\n4\n5\n6\n7\nConnection\n.\nselect\n(\nclient\n)\n// (1)\n.\npageSize\n(\n100\n)\n// (2)\n.\nstream\n()\n// (3)\n.\nfilter\n{\nit\nis\nConnection\n}\n// (4)\n.\nforEach\n{\n// (5)\nlog\n.\ninfo\n{\n\"Connection:\n$\nit\n\"\n}\n}\nTo start building up a query to include all connections, you can use the\nselect()\nconvenience method on\nConnection\nitself. This will already limit results to only active (non-archived) connections. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\n(Optional) You can chain a\npageSize()\nmethod to control the page sizes, to further limit API calls by retrieving more results per page.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 7
    }
  },
  {
    "content": "Searching for assets\nportion of the SDK documentation.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n{\n\"dsl\"\n:\n{\n// (1)\n\"from\"\n:\n0\n,\n\"size\"\n:\n100\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n// (3)\n{\n\"term\"\n:\n{\n// (4)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Connection\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n// (5)\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the connections.\nTo start building up a query with multiple conditions, you can use a\nbool\nquery in Elasticsearch.\nYou can use the\nfilter\ncriteria to define all the conditions the search results must match in a binary way (either matches or doesn't). This avoids the need to calculate a score for each result.\nYou can use an exact match on the type to restrict results to only connections.\nSearches by default will return\nall\nassets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones.\nColumns in a schema\n¶\n1.4.0\n4.0.0",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 8
    }
  },
  {
    "content": "Searches by default will return\nall\nassets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones.\nColumns in a schema\n¶\n1.4.0\n4.0.0\nThis example finds all columns that exist in a particular schema — irrespective of the table, view, or materialized view they exist within.\nJava\nPython\nKotlin\nRaw REST API\nGet all columns in a schema\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nString\nschemaQN\n=\n\"default/snowflake/1662194632/MYDB/MY_SCH\"\n;\n// (1)\nColumn\n.\nselect\n(\nclient\n)\n// (2)\n.\nwhere\n(\nAsset\n.\nQUALIFIED_NAME\n.\nstartsWith\n(\nschemaQN\n))\n// (3)\n.\npageSize\n(\n100\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nDESCRIPTION\n)\n// (5)\n.\nstream\n()\n// (6)\n.\nfilter\n(\na\n->\na\ninstanceof\nColumn\n)\n// (7)\n.\nforEach\n(\nc\n->\n{\n// (8)\nlog\n.\ninfo\n(\n\"Column: {}\"\n,\nc\n);\n});\nPart of the trick here is that the\nqualifiedName\nof a column starts with the\nqualifiedName\nof its parent (table, view or materialized view). Similarly, the\nqualifiedName\nof the table, view or materialized view starts with the\nqualifiedName\nof its parent schema. (And so on, all the way up to the connection itself.)\nTo start building up a query specifically for columns, you can use the\nselect()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 9
    }
  },
  {
    "content": "qualifiedName\nof its parent schema. (And so on, all the way up to the connection itself.)\nTo start building up a query specifically for columns, you can use the\nselect()\nconvenience method on\nColumn\nitself. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can use the\nwhere()\nmethod to define all the conditions the search results must match. For this example, use the\nAsset.QUALIFIED_NAME\nconstant to limit to only those assets whose\nqualifiedName\nstarts with the\nqualifiedName\nof the schema (by using the\nstartsWith()\npredicate). In this example, that means only assets that are within this particular schema will be returned as results.\n(Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page.\nAdd as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every column will include its description. (Limit these attributes to the minimum you need about each column to do your intended work.)\nThe search will only run when you call the\nstream()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 10
    }
  },
  {
    "content": "The search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all columns in a schema\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nColumn\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\n,\nCompoundQuery\nschema_qn\n=\n\"default/snowflake/1646836521/ATLAN_SAMPLE_DATA/PUBLIC\"\n# (1)\nclient\n=\nAtlanClient\n()\n# (2)\nrequest\n=\n(\nFluentSearch\n()\n# (3)\n.\nwhere\n(\nCompoundQuery\n.\nasset_type\n(\nColumn\n))\n# (4)\n.\nwhere\n(\nCompoundQuery\n.\nactive_assets\n())\n# (5)\n.\nwhere\n(\nColumn\n.\nQUALIFIED_NAME\n.\nstartswith\n(\nschema_qn\n))\n# (6)\n)\n.\nto_request\n()\n# (7)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (8)\nif\nisinstance\n(\nresult\n,\nColumn\n):\n# (9)\nprint\n(\nresult\n)\nPart of the trick here is that the\nqualified_name\nof a column starts with the\nqualified_name",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 11
    }
  },
  {
    "content": "in\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (8)\nif\nisinstance\n(\nresult\n,\nColumn\n):\n# (9)\nprint\n(\nresult\n)\nPart of the trick here is that the\nqualified_name\nof a column starts with the\nqualified_name\nof its parent (table, view or materialized view). Similarly, the\nqualified_name\nof the table, view or materialized view starts with the\nqualified_name\nof its parent schema. (And so on, all the way up to the connection itself.)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\n.where()\nmethod allows you to limit to only certain assets. In this example, we are looking for columns, so use the\nCompoundQuery.asset_type()\nhelper to narrow to only columns.\nYou can chain additional\n.where()\nmethods to add further conditions, like this example where we limit to only active (non-archived) assets.\nFor this example, use the\nColumn.QUALIFIED_NAME\nconstant to limit to only those columns whose\nqualified_name\nstarts with the\nqualified_name\nof the schema (by using the\nstartswith()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 12
    }
  },
  {
    "content": "For this example, use the\nColumn.QUALIFIED_NAME\nconstant to limit to only those columns whose\nqualified_name\nstarts with the\nqualified_name\nof the schema (by using the\nstartswith()\npredicate). In this example, that means only columns that are within this particular schema will be returned as results.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nUse the\nisinstance\nmethod to ensure that the asset is of the desired type. This will also allow an IDE to provide specific type hints for this asset type.\nGet all columns in a schema\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\nschemaQN\n=\n\"default/snowflake/1662194632/MYDB/MY_SCH\"\n// (1)\nColumn\n.\nselect\n(\nclient\n)\n// (2)\n.\nwhere\n(\nAsset\n.\nQUALIFIED_NAME\n.\nstartsWith\n(\nschemaQN\n))\n// (3)\n.\npageSize\n(\n100\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nDESCRIPTION\n)\n// (5)\n.\nstream\n()\n// (6)\n.\nfilter\n{\nit\nis\nColumn\n}\n// (7)\n.\nforEach\n{\n// (8)\nlog\n.\ninfo\n{\n\"Column:\n$\nit\n\"\n}\n});\nPart of the trick here is that the\nqualifiedName\nof a column starts with the\nqualifiedName",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 13
    }
  },
  {
    "content": ".\nstream\n()\n// (6)\n.\nfilter\n{\nit\nis\nColumn\n}\n// (7)\n.\nforEach\n{\n// (8)\nlog\n.\ninfo\n{\n\"Column:\n$\nit\n\"\n}\n});\nPart of the trick here is that the\nqualifiedName\nof a column starts with the\nqualifiedName\nof its parent (table, view or materialized view). Similarly, the\nqualifiedName\nof the table, view or materialized view starts with the\nqualifiedName\nof its parent schema. (And so on, all the way up to the connection itself.)\nTo start building up a query specifically for columns, you can use the\nselect()\nconvenience method on\nColumn\nitself. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can use the\nwhere()\nmethod to define all the conditions the search results must match. For this example, use the\nAsset.QUALIFIED_NAME\nconstant to limit to only those assets whose\nqualifiedName\nstarts with the\nqualifiedName\nof the schema (by using the\nstartsWith()\npredicate). In this example, that means only assets that are within this particular schema will be returned as results.\n(Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 14
    }
  },
  {
    "content": "(Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page.\nAdd as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every column will include its description. (Limit these attributes to the minimum you need about each column to do your intended work.)\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n// (3)\n{\n\"prefix\"\n:\n{\n// (4)\n\"qualifiedName\"\n:\n{\n\"value\"\n:\n\"default/snowflake/1662194632/MYDB/MY_SCH\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (5)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Column\"\n}\n}\n},\n{\n\"term\"\n:",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 15
    }
  },
  {
    "content": ":\n[\n// (3)\n{\n\"prefix\"\n:\n{\n// (4)\n\"qualifiedName\"\n:\n{\n\"value\"\n:\n\"default/snowflake/1662194632/MYDB/MY_SCH\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (5)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Column\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (6)\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n}\n]\n}\n},\n\"from\"\n:\n0\n,\n// (7)\n\"size\"\n:\n100\n,\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n// (8)\n\"description\"\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the columns.\nTo start building up a query with multiple conditions, you can use a\nbool\nquery in Elasticsearch.\nYou can use the\nfilter\ncriteria to define all the conditions the search results must match in a binary way (either matches or doesn't). This avoids the need to calculate a score for each result.\nPart of the trick here is that the\nqualifiedName\nof a column starts with the\nqualifiedName\nof its parent (table, view or materialized view). Similarly, the\nqualifiedName\nof the table, view or materialized view starts with the\nqualifiedName\nof its parent schema. (And so on, all the way up to the connection itself.)",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 16
    }
  },
  {
    "content": "qualifiedName\nof the table, view or materialized view starts with the\nqualifiedName\nof its parent schema. (And so on, all the way up to the connection itself.)\nSince there could be tables, views, materialized views and columns in this schema — but you only want columns — you can use an exact match on the type to restrict results to only columns.\nSearches by default will return\nall\nassets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones.\nHere you can play around with different page sizes, to further limit API calls by retrieving more results per page.\nAdd as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every column will include its description. (Limit these attributes to the minimum you need about each column to do your intended work.)\nAssets with custom metadata\n¶\n7.0.0\n1.1.0\nThis example finds all assets with a particular custom metadata attribute populated — irrespective of the specific value of the attribute.\nJava\nPython\nKotlin\nRaw REST API\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 17
    }
  },
  {
    "content": "Java\nPython\nKotlin\nRaw REST API\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nCustomMetadataField\n.\nof\n(\nclient\n,\n\"RACI\"\n,\n\"Responsible\"\n).\nhasAnyValue\n())\n// (2)\n.\n_includesOnResults\n(\nclient\n.\ngetCustomMetadataCache\n().\ngetAttributesForSearchResults\n(\n\"RACI\"\n))\n// (3)\n.\nstream\n()\n// (4)\n.\nforEach\n(\na\n->\n{\n// (5)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\nhasAnyValue()\npredicate allows you to limit to assets that have any value for this custom metadata attribute.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 18
    }
  },
  {
    "content": "The\nhasAnyValue()\npredicate allows you to limit to assets that have any value for this custom metadata attribute.\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\ngetAttributesForSearchResults()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includesOnResults\nSince the\ngetAttributesForSearchResults()\nhelper will return a list of strings, you'll need to use the special\n_includesOnResults()\nmethod to add these for inclusion.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fields.atlan_fields\nimport\nCustomMetadataField\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 19
    }
  },
  {
    "content": "10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fields.atlan_fields\nimport\nCustomMetadataField\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n(\n_includes_on_results\n=\nclient\n.\ncustom_metadata_cache\n.\nget_attributes_for_search_results\n(\n\"RACI\"\n))\n# (2)\n.\nwhere\n(\nCustomMetadataField\n(\nclient\n=\nclient\n,\nset_name\n=\n\"RACI\"\n,\nattribute_name\n=\n\"Responsible\"\n)\n.\nhas_any_value\n())\n# (3)\n)\n.\nto_request\n()\n# (4)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (5)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\nget_attributes_for_search_results()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includes_on_results\nSince the\nget_attributes_for_search_results()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 20
    }
  },
  {
    "content": "RACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includes_on_results\nSince the\nget_attributes_for_search_results()\nhelper will return a list of strings, you'll need to use the special\n_includes_on_results\nparameter to add these for inclusion.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\nhas_any_value()\npredicate allows you to limit to assets that have any value for this custom metadata attribute.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets\n.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 21
    }
  },
  {
    "content": "Searching for assets\nportion of the SDK documentation.\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nCustomMetadataField\n.\nof\n(\nclient\n,\n\"RACI\"\n,\n\"Responsible\"\n).\nhasAnyValue\n())\n// (2)\n.\n_includesOnResults\n(\nclient\n.\ncustomMetadataCache\n.\ngetAttributesForSearchResults\n(\n\"RACI\"\n))\n// (3)\n.\nstream\n()\n// (4)\n.\nforEach\n{\n// (5)\nlog\n.\ninfo\n{\n\"Asset: $it\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\nhasAnyValue()\npredicate allows you to limit to assets that have any value for this custom metadata attribute.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 22
    }
  },
  {
    "content": "The\nhasAnyValue()\npredicate allows you to limit to assets that have any value for this custom metadata attribute.\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\ngetAttributesForSearchResults()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includesOnResults\nSince the\ngetAttributesForSearchResults()\nhelper will return a list of strings, you'll need to use the special\n_includesOnResults()\nmethod to add these for inclusion.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for custom metadata, you first need to have the Atlan-internal hashed-string representation of the custom metadata property. You will likely need to first\nretrieve the hashed-string representation\n.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 23
    }
  },
  {
    "content": "retrieve the hashed-string representation\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"exists\"\n:\n{\n// (3)\n\"field\"\n:\n\"omrIzGB4oYlZrFKfTIUz6D\"\n// (4)\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"UQot6bU4XcGcIx8gAQ1dsW.omrIzGB4oYlZrFKfTIUz6D\"\n// (5)\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nFor a search with only a single condition, we can directly provide the condition.\nYou can use the\nexists\ncriteria to match any assets that have some value (no matter what that value is) for a given field.\nUse the\nAtlan-internal hashed-string representation\nof the custom metadata field name.\nInclude the\nAtlan-internal hashed-string representation\nof the custom metadata field name in the attributes list, so you can see the value of the custom metadata on each result. In this attributes list it needs to be written as\n<CustomMetadata>.<Attribute>\n, using the hashed-string representation for both pieces.\nAssets with specific custom metadata value\n¶\n7.0.0\n1.1.0",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 24
    }
  },
  {
    "content": "<CustomMetadata>.<Attribute>\n, using the hashed-string representation for both pieces.\nAssets with specific custom metadata value\n¶\n7.0.0\n1.1.0\nThis example finds all assets with a particular custom metadata attribute populated — with a specific value for the attribute.\nJava\nPython\nKotlin\nRaw REST API\nGet all assets with a specific custom metadata attribute value\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nCustomMetadataField\n.\nof\n(\nclient\n,\n\"RACI\"\n,\n\"Responsible\"\n).\neq\n(\n\"This exact value\"\n,\nfalse\n))\n// (2)\n.\n_includesOnResults\n(\nclient\n.\ngetCustomMetadataCache\n().\ngetAttributesForSearchResults\n(\n\"RACI\"\n))\n// (3)\n.\nstream\n()\n// (4)\n.\nforEach\n(\na\n->\n{\n// (5)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 25
    }
  },
  {
    "content": "CustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\neq()\npredicate allows you to limit to assets that have only the exact value provided for this custom metadata attribute (and in the case of a string value, you must supply a second parameter indicating whether the search should be case-sensitive (false) or case-insensitive (true)).\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\ngetAttributesForSearchResults()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includesOnResults\nSince the\ngetAttributesForSearchResults()\nhelper will return a list of strings, you'll need to use the special\n_includesOnResults()\nmethod to add these for inclusion.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 26
    }
  },
  {
    "content": "stream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a custom metadata attribute populated\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fields.atlan_fields\nimport\nCustomMetadataField\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n(\n_includes_on_results\n=\nclient\n.\ncustom_metadata_cache\n.\nget_attributes_for_search_results\n(\n\"RACI\"\n))\n# (2)\n.\nwhere\n(\nCustomMetadataField\n(\nclient\n=\nclient\n,\nset_name\n=\n\"RACI\"\n,\nattribute_name\n=\n\"Responsible\"\n)\n.\neq\n(\n\"This exact value\"\n))\n# (3)\n)\n.\nto_request\n()\n# (4)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (5)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 27
    }
  },
  {
    "content": ".\nTo search across all assets, you can use a\nFluentSearch\nobject.\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\nget_attributes_for_search_results()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includes_on_results\nSince the\nget_attributes_for_search_results()\nhelper will return a list of strings, you'll need to use the special\n_includes_on_results\nparameter to add these for inclusion.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\neq()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 28
    }
  },
  {
    "content": "CustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\neq()\npredicate allows you to limit to assets that have only the exact value provided for this custom metadata attribute.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a specific custom metadata attribute value\n1\n2\n3\n4\n5\n6\n7\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nCustomMetadataField\n.\nof\n(\nclient\n,\n\"RACI\"\n,\n\"Responsible\"\n).\neq\n(\n\"This exact value\"\n,\nfalse\n))\n// (2)\n.\n_includesOnResults\n(\nclient\n.\ncustomMetadataCache\n.\ngetAttributesForSearchResults\n(\n\"RACI\"\n))\n// (3)\n.\nstream\n()\n// (4)\n.\nforEach\n{\n// (5)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 29
    }
  },
  {
    "content": "\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for custom metadata attributes, you can construct a\nCustomMetadataField\nto start a clause that will match a custom metadata property. Since you are searching for the custom metadata attribute itself, there is no enum for the custom metadata or its property names, so these must be provided as strings. (The\nCustomMetadataField\nwill handle translating these from their human-readable values to the Atlan-internal ID strings needed for the search.)\nThe\neq()\npredicate allows you to limit to assets that have only the exact value provided for this custom metadata attribute (and in the case of a string value, you must supply a second parameter indicating whether the search should be case-sensitive (false) or case-insensitive (true)).\nSince you are searching for custom metadata, you probably want to include the values for custom metadata in each search result. This\ngetAttributesForSearchResults()\nhelper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 30
    }
  },
  {
    "content": "helper method will return all of the custom attributes within the\nRACI\ncustom metadata structure. These will be encoded in the specific form required by the search for you.\nNote the use of\n_includesOnResults\nSince the\ngetAttributesForSearchResults()\nhelper will return a list of strings, you'll need to use the special\n_includesOnResults()\nmethod to add these for inclusion.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for custom metadata, you first need to have the Atlan-internal hashed-string representation of the custom metadata property. You will likely need to first\nretrieve the hashed-string representation\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"term\"\n:\n{\n// (3)\n\"omrIzGB4oYlZrFKfTIUz6D\"\n:\n{\n// (4)\n\"value\"\n:\n\"This exact value\"\n// (5)\n}\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 31
    }
  },
  {
    "content": "14\n15\n16\n17\n18\n19\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"term\"\n:\n{\n// (3)\n\"omrIzGB4oYlZrFKfTIUz6D\"\n:\n{\n// (4)\n\"value\"\n:\n\"This exact value\"\n// (5)\n}\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"UQot6bU4XcGcIx8gAQ1dsW.omrIzGB4oYlZrFKfTIUz6D\"\n// (6)\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nFor a search with only a single condition, we can directly provide the condition.\nYou can use the\nterm\nquery to exactly match a value on assets, for a given field.\nUse the\nAtlan-internal hashed-string representation\nof the custom metadata field name.\nProvide the exact value you want to match in that custom metadata property.\nInclude the\nAtlan-internal hashed-string representation\nof the custom metadata field name in the attributes list, so you can see the value of the custom metadata on each result. In this attributes list it needs to be written as\n<CustomMetadata>.<Attribute>\n, using the hashed-string representation for both pieces.\nAssets linked to a term\n¶",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 32
    }
  },
  {
    "content": "<CustomMetadata>.<Attribute>\n, using the hashed-string representation for both pieces.\nAssets linked to a term\n¶\nThis example finds all assets that are linked to a specific glossary term. (And could be extended to do find assets linked to any one of a number of glossary terms.) In this specific example we will find any assets linked to a glossary term named\nRevenue\nin a glossary named\nMetrics\n.\nYou'll need the qualifiedName of the glossary term\nTo find the assets linked to the glossary term, you'll need to search using the\nqualifiedName\nof the term. This is not the human-readable name you see in the UI. So this example is split into two parts:\nFinding the\nqualifiedName\nof the glossary term from its human-readable name and the result of (1).\nFinding all assets linked to that glossary term.\n1.4.0\n4.0.0\nFor example:\nJava\nPython\nKotlin\nRaw REST API\nFind qualifiedName of the term\n1\n2\nGlossaryTerm\nterm\n=\nGlossaryTerm\n.\nfindByName\n(\nclient\n,\n\"Revenue\"\n,\n\"Concepts\"\n);\n// (1)\nString\ntermQualifiedName\n=\nterm\n.\ngetQualifiedName\n();\n// (2)\nThe\nGlossaryTerm.findByName()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 33
    }
  },
  {
    "content": "1\n2\nGlossaryTerm\nterm\n=\nGlossaryTerm\n.\nfindByName\n(\nclient\n,\n\"Revenue\"\n,\n\"Concepts\"\n);\n// (1)\nString\ntermQualifiedName\n=\nterm\n.\ngetQualifiedName\n();\n// (2)\nThe\nGlossaryTerm.findByName()\nhelper method will retrieve the glossary term by its human-readable name, given the name of the glossary in which it should exist. If the term does not exist (within that glossary), it will throw a\nNotFoundException\n. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nIf no exception was thrown, you can retrieve the qualifiedName of the glossary term.\nGet all assets linked to a specific term\n3\n4\n5\n6\n7\n8\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nASSIGNED_TERMS\n.\nin\n(\nList\n.\nof\n(\ntermQualifiedName\n)))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n(\na\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for assets linked to one or more terms, you need to use the\nqualifiedName",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 34
    }
  },
  {
    "content": ",\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for assets linked to one or more terms, you need to use the\nqualifiedName\nof the term(s). (This example shows searching for just one term, but you could search for any number of them in the list. The search will find assets that are assigned at least one of those terms in the list.)\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nFind qualifiedName of the term\n1\n2\n3\n4\n5\n6\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\n,\nCompoundQuery\nclient\n=\nAtlanClient\n()\n# (1)\nterm\n=\nclient\n.\nasset\n.\nfind_term_by_name\n(\n\"Revenue\"\n,\n\"Concepts\"\n)\n# (2)\nterm_qualified_name\n=\nterm\n.\nqualified_name\n# (3)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nThe\nasset.find_term_by_name()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 35
    }
  },
  {
    "content": ")\n# (2)\nterm_qualified_name\n=\nterm\n.\nqualified_name\n# (3)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nThe\nasset.find_term_by_name()\nhelper method will retrieve the glossary term by its human-readable name, given the name of the glossary in which it should exist. If the term does not exist (within that glossary), it will throw a\nNotFoundError\n.\nIf no exception was thrown, you can retrieve the\nqualified_name\nof the glossary term.\nGet all assets linked to a specific term\n7\n8\n9\n10\n11\n12\nrequest\n=\n(\nFluentSearch\n()\n# (1)\n.\nwhere\n(\nCompoundQuery\n.\nassigned_term\n([\nterm_qualified_name\n]))\n# (2)\n)\n.\nto_request\n()\n# (3)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (4)\nprint\n(\nresult\n)\nTo search across all assets, you can use a\nFluentSearch\nobject.\nWhen searching for assets linked to a given term, you need to use the\nqualified_name\nof the term.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nFind qualifiedName of the term\n1\n2\nval\nterm\n=\nGlossaryTerm\n.\nfindByName",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 36
    }
  },
  {
    "content": "Searching for assets\nportion of the SDK documentation.\nFind qualifiedName of the term\n1\n2\nval\nterm\n=\nGlossaryTerm\n.\nfindByName\n(\nclient\n,\n\"Revenue\"\n,\n\"Concepts\"\n)\n// (1)\nval\ntermQualifiedName\n=\nterm\n.\nqualifiedName\n// (2)\nThe\nGlossaryTerm.findByName()\nhelper method will retrieve the glossary term by its human-readable name, given the name of the glossary in which it should exist. If the term does not exist (within that glossary), it will throw a\nNotFoundException\n. Because this operation will directly search for the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nIf no exception was thrown, you can retrieve the qualifiedName of the glossary term.\nGet all assets linked to a specific term\n3\n4\n5\n6\n7\n8\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nASSIGNED_TERMS\n.\n`in`\n(\nlistOf\n(\ntermQualifiedName\n)))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for assets linked to one or more terms, you need to use the\nqualifiedName",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 37
    }
  },
  {
    "content": "$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nWhen searching for assets linked to one or more terms, you need to use the\nqualifiedName\nof the term(s). (This example shows searching for just one term, but you could search for any number of them in the list. The search will find assets that are assigned at least one of those terms in the list.)\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for assets linked to a term, you first need to have the qualifiedName of the term. You will likely need to first\nfind the term by its name\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"terms\"\n:\n{\n// (3)\n\"__meanings\"\n:\n[\n// (4)\n\"5h2wMbSbWtRN1V1b05Mtb@LD5Tb30qbuYCZKsmFRpmS\"\n// (5)\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 38
    }
  },
  {
    "content": "// (3)\n\"__meanings\"\n:\n[\n// (4)\n\"5h2wMbSbWtRN1V1b05Mtb@LD5Tb30qbuYCZKsmFRpmS\"\n// (5)\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nFor a search with only a single condition, we can directly provide the condition.\nYou can use the\nterms\nquery to exactly match a value on assets, for a given field, against a list of possible matches.\nTo find terms, match against the\n__meanings\nfield.\nProvide the exact value of the\nqualifiedName\nfor the term for which you want to find linked assets.\nAssets with an Atlan tag\n¶\n7.0.0\n2.0.0\nThis example finds all assets that are assigned a specific Atlan tag — irrespective of whether they were directly assigned the tag or it was propagated.\nJava\nPython\nKotlin\nRaw REST API\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\ntagged\n(\nList\n.\nof\n(\n\"PII\"\n))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n(\na\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.tagged()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 39
    }
  },
  {
    "content": "))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n(\na\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.tagged()\nhelper method allows us to limit to assets that match at least one of potentially multiple values (since there could be many tags on an asset). The SDK will translate the provided Atlan tag into the necessary internal representation required for the search — you can just provide the human-readable names of the Atlan tags.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\n,\nCompoundQuery\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n()\n# (2)\n.\nwhere\n(\nCompoundQuery\n.\ntagged\n(\nclient\n=\nclient\n,\nwith_one_of\n=\n[\n\"PII\"\n]))\n# (3)\n)\n.\nto_request\n()\n# (4)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (5)\nprint\n(\nresult",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 40
    }
  },
  {
    "content": "()\n# (2)\n.\nwhere\n(\nCompoundQuery\n.\ntagged\n(\nclient\n=\nclient\n,\nwith_one_of\n=\n[\n\"PII\"\n]))\n# (3)\n)\n.\nto_request\n()\n# (4)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (5)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\nCompoundQuery.tagged()\nhelper method allows us to limit to assets that match at least one of potentially multiple values (since there could be many tags on an asset). The SDK will translate the provided Atlan tag into the necessary internal representation required for the search — you can just provide the human-readable names of the Atlan tags.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\ntagged\n(\nlistOf\n(\n\"PII\"\n))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 41
    }
  },
  {
    "content": "Get all assets with a specific tag\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\ntagged\n(\nlistOf\n(\n\"PII\"\n))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nStart with a client to run the search through. For the default client, you can always use\nAtlan.getDefaultClient()\n.\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.tagged()\nhelper method allows us to limit to assets that match at least one of potentially multiple values (since there could be many tags on an asset). The SDK will translate the provided Atlan tag into the necessary internal representation required for the search — you can just provide the human-readable names of the Atlan tags.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for Atlan tags, you first need to have the Atlan-internal hashed-string representation of the tags. You will likely need to first",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 42
    }
  },
  {
    "content": "Requires multiple API operations\nBefore you can search for Atlan tags, you first need to have the Atlan-internal hashed-string representation of the tags. You will likely need to first\nretrieve the hashed-string representation\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"minimum_should_match\"\n:\n\"1\"\n,\n// (3)\n\"should\"\n:\n[\n// (4)\n{\n\"terms\"\n:\n{\n\"__traitNames\"\n:\n[\n// (4)\n\"wAI4bROOqCQzES8HCNso9F\"\n// (5)\n]\n}\n},\n{\n\"terms\"\n:\n{\n\"__propagatedTraitNames\"\n:\n[\n// (6)\n\"wAI4bROOqCQzES8HCNso9F\"\n// (7)\n]\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nTo match both assets that are directly assigned the Atlan tag and those that were propagated the Atlan tag, use a\nbool\nquery for multiple conditions.\nDefine the minimum number of conditions that need to match on an asset to be included in the results. In this example, you want either a direct or propagated Atlan tag, so should match at least one of the conditions provided.\nUse\n__traitNames",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 43
    }
  },
  {
    "content": "Use\n__traitNames\nto match directly-classified assets.\nUse the\nAtlan-internal hashed-string representation\nof the Atlan tag.\nUse\n__propagatedTraitNames\nto match assets that have been propagated this Atlan tag.\nOnce again, use the\nAtlan-internal hashed-string representation\nof the Atlan tag.\nAssets with a source tag\n¶\n7.0.0\n2.0.0\nThis example finds all assets that are assigned a specific source tag.\nJava\nPython\nKotlin\nRaw REST API\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\ntaggedWithValue\n(\n// (2)\n\"Sensitivity\"\n,\n// (3)\n\"Highly Restricted\"\n,\n// (4)\ntrue\n// (5)\n)\n.\nstream\n()\n// (6)\n.\nforEach\n(\na\n->\n{\n// (7)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.taggedWithValue()\nhelper method allows us to limit to assets that match having this particular tag and value combination.\nYou must specify the human-readable name of the Atlan tag that is mapped to a source tag. The SDK will translate the provided Atlan tag into the necessary internal representation required for the search — you can just provide the human-readable names of the Atlan tags.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 44
    }
  },
  {
    "content": "You must also provide the value you want to match.\n(Optional) You can restrict the search to only directly-tagged assets with the value using\ntrue\n, or look for all assets tagged with the value (whether directly or propagated).\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets.core.asset\nimport\nAsset\nfrom\npyatlan.model.fluent_search\nimport\nCompoundQuery\n,\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n()\n.\nselect\n()\n# (2)\n.\nwhere\n(\nCompoundQuery\n.\ntagged_with_value\n(\n# (3)\nclient\n=\nclient\n,\n# (4)\natlan_tag_name\n=\n\"Confidential\"\n,\n# (5)\nvalue\n=\n\"Highly Restricted\"\n,\n# (6)\ndirectly\n=\nTrue\n,\n# (7)\nsource_tag_qualified_name\n=\n\"default/snowflake/1711669993/ANALYTICS/PRODUCTION/CONFIDENTIAL\"\n,\n# (8)\n)\n)\n)\n.\nto_request\n()\n# (9)\nresponse\n=\nclient\n.\nasset\n.\nsearch\n(\nrequest\n)\n# (10)\nfor\nasset\nin",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 45
    }
  },
  {
    "content": "source_tag_qualified_name\n=\n\"default/snowflake/1711669993/ANALYTICS/PRODUCTION/CONFIDENTIAL\"\n,\n# (8)\n)\n)\n)\n.\nto_request\n()\n# (9)\nresponse\n=\nclient\n.\nasset\n.\nsearch\n(\nrequest\n)\n# (10)\nfor\nasset\nin\nresponse\n:\n# (11)\n...\nStart with a client to run the search through.\nTo search across all active assets, you can use the\nFluentSearch.select()\nmethod.\nThe\nCompoundQuery.tagged_with_value()\nhelper method allows.\nus to limit to assets that match having this particular tag and value combination.\nYou must provide a client instance.\nYou must specify the human-readable name of the Atlan tag that is mapped to a source tag.\nThe SDK will translate the provided Atlan tag into the necessary internal representation\nrequired for the search — you can just provide the human-readable names of the Atlan tags.\nYou must also provide the value you want to match.\n(Optional) You can restrict the search to only directly-tagged assets\nwith the value using\nTrue\n, or look for all assets tagged with the value\n(whether directly or propagated) (\nFalse\n).\n(Optional) You can specify which source tag qualified name to use when multiple mapped\nsource-synced tags\nare found.\nNow convert the given\nFluentSearch\ninto an",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 46
    }
  },
  {
    "content": "False\n).\n(Optional) You can specify which source tag qualified name to use when multiple mapped\nsource-synced tags\nare found.\nNow convert the given\nFluentSearch\ninto an\nIndexSearchRequest\nobject for the search.\nThe search will only run when you call the\nclient.asset.search()\nmethod.\nThis is the pattern for iterating through all results (across pages)\ncovered in the\nSearching for assets\nportion of the SDK documentation.\nGet all assets with a specific tag\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\ntaggedWithValue\n(\n// (2)\n\"Sensitivity\"\n,\n// (3)\n\"Highly Restricted\"\n,\n// (4)\ntrue\n// (5)\n)\n.\nstream\n()\n// (6)\n.\nforEach\n{\n// (7)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.taggedWithValue()\nhelper method allows us to limit to assets that match having this particular tag and value combination.\nYou must specify the human-readable name of the Atlan tag that is mapped to a source tag. The SDK will translate the provided Atlan tag into the necessary internal representation required for the search — you can just provide the human-readable names of the Atlan tags.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 47
    }
  },
  {
    "content": "You must also provide the value you want to match.\n(Optional) You can restrict the search to only directly-tagged assets with the value using\ntrue\n, or look for all assets tagged with the value (whether directly or propagated).\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for Atlan tags, you first need to have the Atlan-internal hashed-string representation of the tags. You will likely need to first\nretrieve the hashed-string representation\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__traitNames\"\n:\n{\n// (3)\n\"value\"\n:\n\"Z96sGJrF0S68PxYTUdKG6b\"\n,\n// (4)\n\"case_insensitive\"\n:\nfalse\n}\n}\n},\n{\n\"span_within\"\n:\n{",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 48
    }
  },
  {
    "content": "{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__traitNames\"\n:\n{\n// (3)\n\"value\"\n:\n\"Z96sGJrF0S68PxYTUdKG6b\"\n,\n// (4)\n\"case_insensitive\"\n:\nfalse\n}\n}\n},\n{\n\"span_within\"\n:\n{\n// (5)\n\"big\"\n:\n{\n\"span_near\"\n:\n{\n\"clauses\"\n:\n[\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n// (6)\n\"value\"\n:\n\"Z96sGJrF0S68PxYTUdKG6b\"\n}\n}\n},\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n// (7)\n\"value\"\n:\n\"default/snowflake/1726834662/ANALYTICS/WIDE_WORLD_IMPORTERS/CONFIDENTIAL\"\n}\n}\n}\n],\n\"in_order\"\n:\ntrue\n,\n\"slop\"\n:\n10000000\n}\n},\n\"little\"\n:\n{\n\"span_near\"\n:\n{\n\"clauses\"\n:\n[\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n// (8)\n\"value\"\n:\n\"tagAttachmentValue\"\n}\n}\n},\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n\"value\"\n:\n\"Highly\"\n// (9)\n}\n}\n},\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n\"value\"\n:\n\"Restricted\"\n}\n}\n},\n{\n\"span_term\"\n:\n{\n\"__classificationsText.text\"\n:\n{\n\"value\"\n:\n\"tagAttachmentKey\"\n// (10)\n}\n}\n}\n],\n\"in_order\"\n:\ntrue\n,\n\"slop\"\n:\n0\n}\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 49
    }
  },
  {
    "content": ":\n0\n}\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nTo match assets that are directly assigned the Atlan tag, use a\nbool\nquery for multiple conditions.\nUse\n__traitNames\nto match directly-classified assets.\nUse the\nAtlan-internal hashed-string representation\nof the Atlan tag.\nTo match a source tag, you must use a\nspan_within\nquery that has this exact structure.\nOnce again, everywhere you specify the Atlan tag you must use the\nAtlan-internal hashed-string representation\nof the Atlan tag.\nYou must also specify the\nqualifiedName\nof the source Tag asset.\nWhen matching a value, you must specify these\nlittle.span_near\nclauses in exactly the order shown in this example, starting with\ntagAttachmentValue\n.\nThe value itself should come next, but note that if there are any spaces in the value then you must specify a\nspan_term\nfor each individual word of the value.\nFinally you must specify a\nspan_term\nof\ntagAttachmentKey\nas the final clause.\nDeprecated assets\n¶\n1.4.0\n1.1.0\nThis example finds all assets that are marked as deprecated.\nJava\nPython\nKotlin",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 50
    }
  },
  {
    "content": "Finally you must specify a\nspan_term\nof\ntagAttachmentKey\nas the final clause.\nDeprecated assets\n¶\n1.4.0\n1.1.0\nThis example finds all assets that are marked as deprecated.\nJava\nPython\nKotlin\nRaw REST API\nGet all deprecated assets\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nDEPRECATED\n))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n(\na\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.where()\nmethod allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n.\nSince we only want assets that are deprecated, we will query where that certificate is set to the\nCertificateStatus.DEPRECATED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 51
    }
  },
  {
    "content": "The search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all deprecated assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.enums\nimport\nCertificateStatus\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n()\n# (2)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nDEPRECATED\n.\nvalue\n))\n# (3)\n)\n.\nto_request\n()\n# (4)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (5)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\n.where()\nmethod allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n.",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 52
    }
  },
  {
    "content": "method allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n.\nSince we only want assets that are deprecated, we will query where that certificate is set to the\nCertificateStatus.DEPRECATED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all deprecated assets\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nDEPRECATED\n))\n// (2)\n.\nstream\n()\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\n.where()\nmethod allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 53
    }
  },
  {
    "content": "The\n.where()\nmethod allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n.\nSince we only want assets that are deprecated, we will query where that certificate is set to the\nCertificateStatus.DEPRECATED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nRequires multiple API operations\nBefore you can search for classifications, you first need to have the Atlan-internal hashed-string representation of the classification. You will likely need to first\nretrieve the hashed-string representation\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"term\"\n:\n{\n// (3)\n\"certificateStatus\"\n:\n{\n// (4)\n\"value\"\n:\n\"DEPRECATED\"\n// (5)\n}\n}\n},",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 54
    }
  },
  {
    "content": ".\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n// (2)\n\"term\"\n:\n{\n// (3)\n\"certificateStatus\"\n:\n{\n// (4)\n\"value\"\n:\n\"DEPRECATED\"\n// (5)\n}\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the assets.\nFor a search with only a single condition, we can directly provide the condition.\nYou can use the\nterm\nquery to exactly match a value on assets, for a given field.\nUse the name of the field you want to match. In this example, since you want to match a specific certificate, you can use the\ncertificateStatus\nfield.\nProvide the exact value you want to match in that field. In this example, you will be matching only assets with a certificate of\nDEPRECATED\n.\nCertified but incomplete assets\n¶\n1.4.0\n1.1.0\nThis example finds all assets that are marked as verified, but are missing a description — suggesting they are in fact incomplete.\nJava\nPython\nKotlin\nRaw REST API\nGet all verified assets that have no description\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 55
    }
  },
  {
    "content": "Java\nPython\nKotlin\nRaw REST API\nGet all verified assets that have no description\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n))\n// (2)\n.\nwhereNot\n(\nAsset\n.\nDESCRIPTION\n.\nhasAnyValue\n())\n// (3)\n.\nwhereNot\n(\nAsset\n.\nUSER_DESCRIPTION\n.\nhasAnyValue\n())\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_USERS\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_GROUPS\n)\n// (5)\n.\nstream\n()\n// (6)\n.\nforEach\n(\na\n->\n{\n// (7)\nlog\n.\ninfo\n(\n\"Asset: {}\"\n,\na\n);\n});\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\nwhere()\nhelper method allows us to limit to only assets that meet a a particular condition. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n. (No need to try to remember or ever even know what the precise string value is for the name of this field — we've provided enums for them in the SDK.)\nSince we only want assets that are verified, we will query where that certificate is set to the\nCertificateStatus.VERIFIED",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 56
    }
  },
  {
    "content": "Since we only want assets that are verified, we will query where that certificate is set to the\nCertificateStatus.VERIFIED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nYou can use the\nwhereNot()\nmethod to do the opposite — define all the conditions the search results must\nnot\nmatch. Here we are limiting to only assets that have a description populated.\nThe\nhasAnyValue()\npredicate method allows us to limit to only assets that have a user-defined description populated. In Atlan you have both\ndescription\n(crawled from source) and\nuserDescription\n(user-defined or overridden). For this example use case, you probably want to check that\nboth\nof these are empty.\nAs part of the search, you may want certain details included in every result. In this use case, you may want to know the asset owner — someone to confirm this should really be certified when there is no description.\nIn Atlan you have both users and groups that can own assets. For this example use case, you probably want to retrieve\nboth\nof these for every result.\nThe search will only run when you call the\nstream()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 57
    }
  },
  {
    "content": "both\nof these for every result.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all verified assets that have no description\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAsset\nfrom\npyatlan.model.enums\nimport\nCertificateStatus\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# (1)\nrequest\n=\n(\nFluentSearch\n()\n# (2)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n.\nvalue\n))\n# (3)\n.\nwhere_not\n(\nAsset\n.\nDESCRIPTION\n.\nhas_any_value\n())\n# (4)\n.\nwhere_not\n(\nAsset\n.\nUSER_DESCRIPTION\n.\nhas_any_value\n())\n.\ninclude_on_results\n(\nAsset\n.\nOWNER_USERS\n)\n# (5)\n.\ninclude_on_results\n(\nAsset\n.\nOWNER_GROUPS\n)\n# (6)\n)\n.\nto_request\n()\n# (7)\nfor\nresult\nin\nclient\n.\nasset\n.\nsearch\n(\nrequest\n):\n# (8)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 58
    }
  },
  {
    "content": "asset\n.\nsearch\n(\nrequest\n):\n# (8)\nprint\n(\nresult\n)\nStart with a client to run the search through. For the default client, you can always use\nAtlanClient()\n.\nTo search across all assets, you can use a\nFluentSearch\nobject.\nThe\n.where()\nmethod allows you to limit to only assets that have a particular value in a particular field. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n.\nSince we only want assets that are verified, we will query where that certificate is set to the\nCertificateStatus.VERIFIED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nYou can use the\n.where_not()\nmethod to do the opposite — define all the conditions the search results must\nnot\nmatch. Here we are limiting to only assets that have a description populated.\nThe\nhas_any_value()\npredicate method allows us to limit to only assets that have a user-defined description populated. In Atlan you have both\ndescription\n(crawled from source) and\nuserDescription\n(user-defined or overridden). For this example use case, you probably want to check that\nboth",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 59
    }
  },
  {
    "content": "description\n(crawled from source) and\nuserDescription\n(user-defined or overridden). For this example use case, you probably want to check that\nboth\nof these are empty.\nAs part of the search, you may want certain details included in every result. In this use case, you may want to know the asset owner — someone to confirm this should really be certified when there is no description.\nIn Atlan you have both users and groups that can own assets. For this example use case, you probably want to retrieve\nboth\nof these for every result.\nYou can then translate the fluent search into an index search request.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nGet all verified assets that have no description\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nwhere\n(\nAsset\n.\nCERTIFICATE_STATUS\n.\neq\n(\nCertificateStatus\n.\nVERIFIED\n))\n// (2)\n.\nwhereNot\n(\nAsset\n.\nDESCRIPTION\n.\nhasAnyValue\n())\n// (3)\n.\nwhereNot\n(\nAsset\n.\nUSER_DESCRIPTION\n.\nhasAnyValue\n())\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_USERS\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_GROUPS\n)\n// (5)\n.\nstream\n()\n// (6)\n.\nforEach\n{\n// (7)\nlog\n.\ninfo\n{",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 60
    }
  },
  {
    "content": "(\nAsset\n.\nUSER_DESCRIPTION\n.\nhasAnyValue\n())\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_USERS\n)\n// (4)\n.\nincludeOnResults\n(\nAsset\n.\nOWNER_GROUPS\n)\n// (5)\n.\nstream\n()\n// (6)\n.\nforEach\n{\n// (7)\nlog\n.\ninfo\n{\n\"Asset:\n$\nit\n\"\n}\n}\nTo search across all assets, you can use the\nassets.select()\nconvenience method on a client.\nThe\nwhere()\nhelper method allows us to limit to only assets that meet a a particular condition. In this example, we are looking for values for the certificate status, so use\nAsset.CERTIFICATE_STATUS\n. (No need to try to remember or ever even know what the precise string value is for the name of this field — we've provided enums for them in the SDK.)\nSince we only want assets that are verified, we will query where that certificate is set to the\nCertificateStatus.VERIFIED\nvalue. (No need to try to remember or ever even know what the precise string values for the certificates are — we've provided enums for them in the SDK.)\nYou can use the\nwhereNot()\nmethod to do the opposite — define all the conditions the search results must\nnot\nmatch. Here we are limiting to only assets that have a description populated.\nThe\nhasAnyValue()",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 61
    }
  },
  {
    "content": "whereNot()\nmethod to do the opposite — define all the conditions the search results must\nnot\nmatch. Here we are limiting to only assets that have a description populated.\nThe\nhasAnyValue()\npredicate method allows us to limit to only assets that have a user-defined description populated. In Atlan you have both\ndescription\n(crawled from source) and\nuserDescription\n(user-defined or overridden). For this example use case, you probably want to check that\nboth\nof these are empty.\nAs part of the search, you may want certain details included in every result. In this use case, you may want to know the asset owner — someone to confirm this should really be certified when there is no description.\nIn Atlan you have both users and groups that can own assets. For this example use case, you probably want to retrieve\nboth\nof these for every result.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 62
    }
  },
  {
    "content": "Searching for assets\nportion of the SDK documentation.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n// (2)\n\"filter\"\n:\n[\n// (3)\n{\n\"term\"\n:\n{\n\"certificateStatus\"\n:\n{\n// (4)\n\"value\"\n:\n\"VERIFIED\"\n}\n}\n}\n],\n\"must_not\"\n:\n[\n// (5)\n{\n\"exists\"\n:\n{\n\"field\"\n:\n\"description\"\n}\n},\n{\n\"exists\"\n:\n{\n\"field\"\n:\n\"userDescription\"\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"ownerUsers\"\n,\n// (6)\n\"ownerGroups\"\n// (7)\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nRun a search to find the columns.\nTo start building up a query with multiple conditions, you can use a\nbool\nquery in Elasticsearch.\nYou can use the\nfilter\ncriteria to define all the conditions the search results must match in a binary way (either matches or doesn't). This avoids the need to calculate a score for each result.\nIn this example, you are looking for verified assets. So you can begin by filtering only those assets with a\ncertificateStatus\nof\nVERIFIED\n.\nSince you want to find assets that specifically do\nnot",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 63
    }
  },
  {
    "content": "In this example, you are looking for verified assets. So you can begin by filtering only those assets with a\ncertificateStatus\nof\nVERIFIED\n.\nSince you want to find assets that specifically do\nnot\nhave other characteristics, use the\nmust_not\ncriteria to specify these. Specifically, match assets that do\nnot\nhave either a\ndescription\nor\nuserDescription\npopulated.\nAs part of the search, you may want certain details included in every result. In this use case, you may want to know the asset owner — someone to confirm this should really be certified when there is no description.\nWhere did\nownerUsers\ncome from?\nThe\nModels\nsection of the site details all the attributes that exist in each different type of asset, and therefore which ones you can retrieve as additional details in each search result, like\nownerUsers\n.\nIn Atlan you have both users and groups that can own assets. For this example use case, you probably want to retrieve\nboth\nof these for every result.\nWhere did\nownerGroups\ncome from?\nThe\nModels\nsection of the site details all the attributes that exist in each different type of asset, and therefore which ones you can retrieve as additional details in each search result, like",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 64
    }
  },
  {
    "content": "The\nModels\nsection of the site details all the attributes that exist in each different type of asset, and therefore which ones you can retrieve as additional details in each search result, like\nownerGroups\n.\n2024-07-01\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_common-examples_finding_examples.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_finding_examples.json",
      "chunk_id": 65
    }
  }
]