[
  {
    "content": "Packages and workflows introduction - Developer\nSkip to content\nPackages and workflows introduction\nÂ¶\nIn Atlan, packages define the workflows you can run to retrieve metadata from various sources.\nWorkflows run asynchronously\nThis means the helper method to run a workflow will return immediately, before the workflow itself has finished running. If you want to wait until the workflow is finished you'll need to use other helper methods to check the status and wait accordingly.\nSupported packages\nExplore the\nlist of individual packages currently supported through our SDKs\n.\nEach package section includes examples demonstrating how to build a workflow from scratch and execute it on Atlan.\nBlock until workflow completion\nÂ¶\n6.0.3\n4.0.0\nTo block until the workflow has completed running:\nJava\nPython\nKotlin\nBlock until workflow has completed\n1\n2\n3\n...\nWorkflowResponse\nresponse\n=\nworkflow\n.\nrun\n(\nclient\n);\n// (1)\nAtlanWorkflowPhase\nstate\n=\nresponse\n.\nmonitorStatus\n(\nlog\n);\n// (2)\nEvery package returns a\nWorkflow\nobject, from which you can\nrun()\nthe workflow. This call will return almost immediately with some metadata about the workflow run â€” it will\nnot",
    "metadata": {
      "source_url": "snippets_workflows.html",
      "source_type": "sdk",
      "file": "snippets_workflows.json",
      "chunk_id": 0
    }
  },
  {
    "content": "(\nlog\n);\n// (2)\nEvery package returns a\nWorkflow\nobject, from which you can\nrun()\nthe workflow. This call will return almost immediately with some metadata about the workflow run â€” it will\nnot\nwait until the workflow has completed running. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThere is a\nmonitorStatus()\nmethod on the response of a workflow run that you can use to wait until the workflow has completed. When this method finally returns, it will give the state of the workflow when it completed (for example, success or failure).\nThe method comes in two variations:\none that takes an slf4j logger (in this example) and will log its status periodically\nand another that takes no arguments and does not do any logging\nBlock until workflow has completed\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nimport\nlogging\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nLOGGER\n=\nlogging\n.\ngetLogger\n(\n__name__\n)\nLOGGER\n.\nsetLevel\n(\nlogging\n.\nDEBUG\n)\n...\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\nworkflow\n)\n# (1)\nstate\n=\nclient\n.\nworkflow\n.\nmonitor\n(\n# (2)\nworkflow_response\n=\nresponse\n,\nlogger\n=\nLOGGER\n,",
    "metadata": {
      "source_url": "snippets_workflows.html",
      "source_type": "sdk",
      "file": "snippets_workflows.json",
      "chunk_id": 1
    }
  },
  {
    "content": "__name__\n)\nLOGGER\n.\nsetLevel\n(\nlogging\n.\nDEBUG\n)\n...\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\nworkflow\n)\n# (1)\nstate\n=\nclient\n.\nworkflow\n.\nmonitor\n(\n# (2)\nworkflow_response\n=\nresponse\n,\nlogger\n=\nLOGGER\n,\nworkflow_name\n=\n\"atlan-snowflake-1744600804\"\n# (3)\n)\nEach package returns a\nWorkflow\nobject, which you can subsequently pass to the\nrun()\nmethod of the workflow client. This call will return almost immediately with some metadata\nabout the workflow run â€” it will\nnot\nwait until the workflow has completed running.\nUse the\nmonitor()\nmethod on the workflow client to wait until the workflow\nhas completed. When this method returns, it provides the final state of the workflow,\nindicating whether it was successful or failed.\nThe method comes in two variations:\none that takes a\nlogger\n(in this example) and will log its status periodically.\nand another that takes no arguments and does not do any logging.\nYou can now monitor\nany existing workflow\ndirectly by specifying its\nworkflow_name\n,  as displayed in the Atlan UI. In this case, you only need to pass the\nworkflow_name\nas a parameter to the\nmonitor()\nmethodâ€”no need for a\nworkflow_response\n.\nBlock until workflow has completed\n1\n2\n3\n...\nval",
    "metadata": {
      "source_url": "snippets_workflows.html",
      "source_type": "sdk",
      "file": "snippets_workflows.json",
      "chunk_id": 2
    }
  },
  {
    "content": "workflow_name\nas a parameter to the\nmonitor()\nmethodâ€”no need for a\nworkflow_response\n.\nBlock until workflow has completed\n1\n2\n3\n...\nval\nresponse\n=\nworkflow\n.\nrun\n(\nclient\n)\n// (1)\nval\nstate\n=\nresponse\n.\nmonitorStatus\n(\nlog\n)\n// (2)\nEvery package returns a\nWorkflow\nobject, from which you can\nrun()\nthe workflow. This call will return almost immediately with some metadata about the workflow run â€” it will\nnot\nwait until the workflow has completed running. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThere is a\nmonitorStatus()\nmethod on the response of a workflow run that you can use to wait until the workflow has completed. When this method finally returns, it will give the state of the workflow when it completed (for example, success or failure).\nThe method comes in two variations:\none that takes an slf4j logger (in this example) and will log its status periodically\nand another that takes no arguments and does not do any logging\n2022-09-09\n2025-04-15\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form",
    "metadata": {
      "source_url": "snippets_workflows.html",
      "source_type": "sdk",
      "file": "snippets_workflows.json",
      "chunk_id": 3
    }
  },
  {
    "content": "2022-09-09\n2025-04-15\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_workflows.html",
      "source_type": "sdk",
      "file": "snippets_workflows.json",
      "chunk_id": 4
    }
  }
]