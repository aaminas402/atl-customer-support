[
  {
    "content": "Manage asset owners - Developer\nSkip to content\nChange owners\n¶\nThere are actually two kinds of owners per asset\nThere are actually two fields in Atlan that capture the owners of an asset:\nownerUsers\nand\nownerGroups\n.\nThe examples below illustrate how to change individual (user) owners. To change group owners, replace\nownerUsers\nwith\nownerGroups\n.\nChange an existing asset\n¶\nCould create a new asset\nRemember that Atlan matches the provided\nqualifiedName\nto determine whether to\nupdate or create the asset\n.\n2.0.0\n4.0.0\nTo change owners on an existing\nasset\n:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nChange owners on existing asset\n1\n2\n3\n4\n5\n6\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\nmeta\n:\natlan\n:\nattributes\n:\n# (2)\nownerUsers\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (3)\nYou must of course give the name of the object.\nThe usernames must be nested within the\nmeta\n.\natlan\n.\nattributes\nstructure.\nYou must provide valid usernames, or email addresses, as a list.\nUsers must be valid\nIf the user does not exist in Atlan, there will be no updates to the asset. Please verify the usernames or email addresses in Atlan before assigning them to assets.\nChange owners on existing asset\n1\n2\n3\n4\n5\n6\n7\nTable\ntable\n=\nTable",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 0
    }
  },
  {
    "content": "Change owners on existing asset\n1\n2\n3\n4\n5\n6\n7\nTable\ntable\n=\nTable\n.\nupdater\n(\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (2)\n\"TOP_BEVERAGE_USERS\"\n)\n// (3)\n.\nownerUsers\n(\nList\n.\nof\n(\n\"jsmith\"\n,\n\"jdoe\"\n))\n// (4)\n.\nbuild\n();\n// (5)\nAssetMutationResponse\nresponse\n=\ntable\n.\nsave\n(\nclient\n);\n// (6)\nassert\nresponse\n.\ngetUpdatedAssets\n().\nsize\n()\n==\n1\n// (7)\nUse the\nupdater()\nhelper method to create the minimal object necessary to do an update.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nProvide the new owners. Note that this is a list of the usernames of the users.\nBuild the updater into an object.\nSend the update to Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was updated.\nChange owners on existing asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 1
    }
  },
  {
    "content": "import\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.\nowner_users\n=\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nresponse\n.\nassets_updated\n(\nasset_type\n=\nTable\n))\n# (4)\nUse the\nupdater()\nmethod to create an asset suitable for modification i.e. with all the requisite attributes.\nProvide the new owners. Note that this is a list of the usernames of the users.\nSend the update to Atlan.\nThe response should only include that single asset that was updated.\nChange owners on existing asset\n1\n2\n3\n4\n5\n6\n7\nval\ntable\n=\nTable\n.\nupdater\n(\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (2)\n\"TOP_BEVERAGE_USERS\"\n)\n// (3)\n.\nownerUsers\n(\nlistOf\n(\n\"jsmith\"\n,\n\"jdoe\"\n))\n// (4)\n.\nbuild\n()\n// (5)\nval\nresponse\n=\ntable\n.\nsave\n(\nclient\n)\n// (6)\nassert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n1\n)\n// (7)\nUse the\nupdater()\nhelper method to create the minimal object necessary to do an update.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 2
    }
  },
  {
    "content": "assert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n1\n)\n// (7)\nUse the\nupdater()\nhelper method to create the minimal object necessary to do an update.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nProvide the new owners. Note that this is a list of the usernames of the users.\nBuild the updater into an object.\nSend the update to Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was updated.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"ownerUsers\"\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n// (5)\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nProvide the new owners, as a list of usernames of users.\nRemove from an existing asset\n¶\n2.0.0",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 3
    }
  },
  {
    "content": "You must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nProvide the new owners, as a list of usernames of users.\nRemove from an existing asset\n¶\n2.0.0\n4.0.0\nTo remove owners from an existing asset:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nRemove owners from existing asset\n1\n2\n3\n4\n5\n6\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\nmeta\n:\natlan\n:\nattributes\n:\n# (2)\nownerUsers\n:\n[\n\"jdoe\"\n]\n# (3)\nYou must of course give the name of the object.\nThe details for the owners must be nested within the\nmeta\n.\natlan\n.\nattributes\nstructure.\nSpecify only the usernames or email addresses of the users you want to\nkeep\nas owners. (Compared to the other examples, this would remove\njsmith\nand keep\njdoe\n.)\nUsers must be valid\nIf the user does not exist in Atlan, there will be no updates to the asset. Please verify the usernames or email addresses in Atlan before assigning them to assets.\nRemove owners from existing asset\n1\n2\n3\n4\nTable\ntable\n=\nTable\n.\nremoveOwners\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n);\n// (4)\nUse the\nremoveOwners()",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 4
    }
  },
  {
    "content": "1\n2\n3\n4\nTable\ntable\n=\nTable\n.\nremoveOwners\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n);\n// (4)\nUse the\nremoveOwners()\nhelper method, which for most objects requires a minimal set of information. This helper method will construct the necessary request, call the necessary API(s), and return with the result of the removal operation all-in-one.\nBecause this operation will directly change the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nRemove owners from existing asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.\nowner_users\n=\nNone\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nresponse\n.\nassets_updated\n(\nasset_type\n=\nTable\n))\n# (4)\nUse the\nupdater()",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 5
    }
  },
  {
    "content": "\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.\nowner_users\n=\nNone\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nresponse\n.\nassets_updated\n(\nasset_type\n=\nTable\n))\n# (4)\nUse the\nupdater()\nmethod to create an asset suitable for modification i.e. with all the requisite attributes.\nSet the owners to\nNone\n.\nSend the update to Atlan.\nThe response should only include that single asset that was updated (again, removing owners is an update to the asset — we are not deleting the asset itself).\nRemove owners from existing asset\n1\n2\n3\n4\nval\ntable\n=\nTable\n.\nremoveOwners\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n)\n// (4)\nUse the\nremoveOwners()\nhelper method, which for most objects requires a minimal set of information. This helper method will construct the necessary request, call the necessary API(s), and return with the result of the removal operation all-in-one.\nBecause this operation will directly change the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 6
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"ownerUsers\"\n:\n[],\n// (5)\n\"ownerGroups\"\n:\n[]\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nYou must set the\nownerUsers\nand\nownerGroups\nto an empty list.\nWhen creating an asset\n¶\n2.0.0\n4.0.0\nTo add owners when creating an asset:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nAdd owners when creating asset\n1\n2\n3\n4\n5\n6\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\nmeta\n:\natlan\n:\nattributes\n:\n# (2)\nownerUsers\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (3)\nYou must of course give the name of the object.\nThe usernames must be nested within the\nmeta\n.\natlan\n.\nattributes\nstructure.",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 7
    }
  },
  {
    "content": "meta\n:\natlan\n:\nattributes\n:\n# (2)\nownerUsers\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (3)\nYou must of course give the name of the object.\nThe usernames must be nested within the\nmeta\n.\natlan\n.\nattributes\nstructure.\nYou must provide valid usernames, or email addresses, as a list.\nUsers must be valid\nIf the user does not exist in Atlan, there will be no updates to the asset. Please verify the usernames or email addresses in Atlan before assigning them to assets.\nAdd owners when creating asset\n1\n2\n3\n4\n5\n6\n7\nTable\ntable\n=\nTable\n.\ncreator\n(\n\"TOP_BEVERAGE_USERS\"\n,\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n)\n.\nownerUsers\n(\nList\n.\nof\n(\n\"jsmith\"\n,\n\"jdoe\"\n))\n// (2)\n.\nbuild\n();\n// (3)\nAssetMutationResponse\nresponse\n=\ntable\n.\nsave\n(\nclient\n);\n// (4)\nassert\nresponse\n.\ngetCreatedAssets\n().\nsize\n()\n==\n1\n// (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it](../advanced-examples/create.md#build-minimal-object-needed).\nSet the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nbuild()\nmethod to build the enriched object.\nCall the\nsave()",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 8
    }
  },
  {
    "content": "Set the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nbuild()\nmethod to build the enriched object.\nCall the\nsave()\nmethod to actually create the asset with these owners. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was created.\nAdd owners when creating asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\ncreator\n(\n# (1)\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\nschema_qualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n,\n)\ntable\n.\nowner_users\n=\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nassets_created\n:=\nresponse\n.\nassets_created\n(\nasset_type\n=\nTable\n))\n# (4)\ntable\n=\nassets_created\n[\n0\n]\n# (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it.\nSet the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nsave()",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 9
    }
  },
  {
    "content": "creator()\nmethod to initialize the object with all necessary attributes for creating it.\nSet the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nsave()\nmethod to actually create the asset with these owners.\nSince a save can add, update, delete or partially update multiple assets the\nassets_created()\nmethod can be used to return a list of the assets of the specified type that were added. The assert statement is present to ensure a\nTable\nasset was created.\nSince only one\nTable\nhas been created we use an index of 0 to retrieve the newly created table.\nAdd owners when creating asset\n1\n2\n3\n4\n5\n6\n7\nval\ntable\n=\nTable\n.\ncreator\n(\n\"TOP_BEVERAGE_USERS\"\n,\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n)\n.\nownerUsers\n(\nlistOf\n(\n\"jsmith\"\n,\n\"jdoe\"\n))\n// (2)\n.\nbuild\n()\n// (3)\nval\nresponse\n=\ntable\n.\nsave\n(\nclient\n)\n// (4)\nassert\n(\nresponse\n.\ncreatedAssets\n.\nsize\n==\n1\n)\n// (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it](../advanced-examples/create.md#build-minimal-object-needed).\nSet the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nbuild()",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 10
    }
  },
  {
    "content": "Set the owners that should be added. Note that this is a list of the usernames of the users.\nCall the\nbuild()\nmethod to build the enriched object.\nCall the\nsave()\nmethod to actually create the asset with these owners. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was created.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"atlanSchema\"\n:\n{\n// (5)\n\"typeName\"\n:\n\"Schema\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n}\n},\n\"ownerUsers\"\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n// (6)\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide a name for the asset.\nIn the case of a table, the\nqualifiedName\nmust be the concatenation of the parent schema's qualifiedName and the name of the table.",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 11
    }
  },
  {
    "content": "You must provide a name for the asset.\nIn the case of a table, the\nqualifiedName\nmust be the concatenation of the parent schema's qualifiedName and the name of the table.\nWhen creating a table, you must specify the schema to create it within. This is defined by the\natlanSchema\nattribute. You must specify both the type (must be\nSchema\n) and qualifiedName of the schema within the\natlanSchema\nattribute — and the schema must already exist.\nProvide the owners, as a list of usernames of users.\n2022-08-22\n2024-12-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_common-examples_owners.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_owners.json",
      "chunk_id": 12
    }
  }
]