[
  {
    "content": "Manage lineage - Developer\nSkip to content\nManage lineage\n¶\nCreate lineage between assets\n¶\nDirectly\n¶\n7.0.0\n4.0.0\nTo create lineage between assets, you need to create a\nProcess\nentity.\nInput and output assets must already exist\nNote that the assets you reference as the inputs and outputs of the process must already exist, before creating the process.\nJava\nPython\nKotlin\nRaw REST API\nCreate lineage between assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nLineageProcess\nprocess\n=\nLineageProcess\n.\ncreator\n(\n// (1)\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (2)\n\"default/snowflake/1657025257\"\n,\n// (3)\n\"dag_123\"\n,\n// (4)\nList\n.\nof\n(\n// (5)\nTable\n.\nrefByGuid\n(\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nTable\n.\nrefByGuid\n(\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nTable\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS\"\n)),\nList\n.\nof\n(\n// (6)\nTable\n.\nrefByGuid\n(\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nTable\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n)),\nnull\n)\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n();\nAssetMutationResponse",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 0
    }
  },
  {
    "content": ")),\nnull\n)\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nprocess\n.\nsave\n(\nclient\n);\n// (10)\nassert\nresponse\n.\ngetCreatedAssets\n().\nsize\n()\n==\n1\n// (11)\nassert\nresponse\n.\ngetUpdatedAssets\n().\nsize\n()\n==\n5\n// (12)\nUse the\ncreator()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the process will be shown in the UI.\nProvide the\nqualifiedName\nof the connection that ran the process.\nTips for the connection\nThe process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualifiedName\nthat indicates the system that ran the process:\nYou could use the same connection\nqualifiedName\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualifiedName\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 1
    }
  },
  {
    "content": "You could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also send\nnull\nand the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra processes in lineage as this process itself changes over time.\nBy using your own ID for the process, any changes that occur in that process over time (even if the inputs or outputs change) the same single process in Atlan will be updated.\nProvide the list of inputs to the process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static\n<Type>.refByGuid()\nmethod)\nits",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 2
    }
  },
  {
    "content": "Reference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static\n<Type>.refByGuid()\nmethod)\nits\nqualifiedName\n(for the static\n<Type>.refByQualifiedName()\nmethod)\nProvide the list of outputs to the process. Note that each of these is again only a\nReference\nto an asset.\n(Optional) Provide the parent\nLineageProcess\nin which this process ran (for example, if this process is a subprocess of some higher-level process). If this is a top-level process, you can also send\nnull\nfor this parameter (as in this example).\n(Optional) You can also add other properties to the lineage process, such as SQL code that runs within the process.\n(Optional) You can also provide a link to the process, which will provide a button to click to go to that link from the Atlan UI when viewing the process in Atlan.\nCall the\nsave()\nmethod to actually create the process. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single lineage process asset that was created.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 3
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single lineage process asset that was created.\nThe response will also include the 5 data assets (3 inputs, 2 outputs) that were updated.\nCreate lineage between assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nProcess\n,\nTable\nclient\n=\nAtlanClient\n()\nprocess\n=\nProcess\n.\ncreator\n(\n# (1)\nname\n=\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n# (2)\nconnection_qualified_name\n=\n\"default/snowflake/1657025257\"\n,\n# (3)\nprocess_id\n=\n\"dag_123\"\n,\n# (4)\ninputs\n=\n[\n# (5)\nTable\n.\nref_by_guid\n(\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nTable\n.\nref_by_guid\n(\nguid\n=\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nTable\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS\"\n),\n],\noutputs\n=\n[\n# (6)\nTable\n.\nref_by_guid\n(\nguid\n=\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nTable\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n),\n],\n)\n# (7)\nprocess\n.\nsql\n=\n\"select * from somewhere;\"\n# (8)\nprocess\n.\nsource_url\n=",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 4
    }
  },
  {
    "content": "),\nTable\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n),\n],\n)\n# (7)\nprocess\n.\nsql\n=\n\"select * from somewhere;\"\n# (8)\nprocess\n.\nsource_url\n=\n\"https://your.orchestrator/unique/id/123\"\n# (9)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nprocess\n)\n# (10)\nassert\n(\nprocesses\n:=\nresponse\n.\nassets_created\n(\nProcess\n))\n# (11)\nassert\nlen\n(\nprocesses\n)\n==\n1\n# (12)\nassert\n(\ntables\n:=\nresponse\n.\nassets_updated\n(\nTable\n))\n# (13)\nassert\nlen\n(\ntables\n)\n==\n2\n# (14)\nUse the\ncreate()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the process will be shown in the UI.\nProvide the\nqualified_name\nof the connection that ran the process.\nTips for the connection\nThe process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualified_name\nthat indicates the system that ran the process:\nYou could use the same connection\nqualified_name\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualified_name\nas the target system, if it was the target system \"pulling\" data from the source(s).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 5
    }
  },
  {
    "content": "You could use the same connection\nqualified_name\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualified_name\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also leave it out and the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra processes in lineage as this process itself changes over time.\nBy using your own ID for the process, any changes that occur in that process over time (even if the inputs or outputs change) the same single process in Atlan will be updated.\nProvide the list of inputs to the process. Note that each of these is only a\nReference",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 6
    }
  },
  {
    "content": "Provide the list of inputs to the process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the\nref_by_guid()\nmethod)\nits\nqualifiedName\n(for the\nref_by_qualified_name()\nmethod)\nProvide the list of outputs to the process. Note that each of these is again only a\nReference\nto an asset.\n(Optional) Provide the parent\nProcess\nin which this process ran (for example, if this process is a subprocess of some higher-level process). If this is a top-level process, you can also send\nNone\nfor this parameter (as in this example).\n(Optional) You can also add other properties to the lineage process, such as SQL code that runs within the process.\n(Optional) You can also provide a link to the process, which will provide a button to click to go to that link from the Atlan UI when viewing the process in Atlan.\nCall the\nsave()\nmethod to actually create the process.\nCheck that a\nProcess\nwas created.\nCheck that only 1\nProcess\nwas created.\nCheck that tables were updated.\nCheck that 5 tables (3 inputs, 2 outputs) were updated.\nCreate lineage between assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 7
    }
  },
  {
    "content": "Check that only 1\nProcess\nwas created.\nCheck that tables were updated.\nCheck that 5 tables (3 inputs, 2 outputs) were updated.\nCreate lineage between assets\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nval\nprocess\n=\nLineageProcess\n.\ncreator\n(\n// (1)\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (2)\n\"default/snowflake/1657025257\"\n,\n// (3)\n\"dag_123\"\n,\n// (4)\nlistOf\n<\nICatalog\n>\n(\n// (5)\nTable\n.\nrefByGuid\n(\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nTable\n.\nrefByGuid\n(\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nTable\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS\"\n)),\nlistOf\n<\nICatalog\n>\n(\n// (6)\nTable\n.\nrefByGuid\n(\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nTable\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n)),\nnull\n)\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n()\nval\nresponse\n=\nprocess\n.\nsave\n(\nclient\n)\n// (10)\nassert\n(\nresponse\n.\ncreatedAssets\n.\nsize\n==\n1\n)\n// (11)\nassert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n5\n)\n// (12)\nUse the\ncreator()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 8
    }
  },
  {
    "content": ".\ncreatedAssets\n.\nsize\n==\n1\n)\n// (11)\nassert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n5\n)\n// (12)\nUse the\ncreator()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the process will be shown in the UI.\nProvide the\nqualifiedName\nof the connection that ran the process.\nTips for the connection\nThe process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualifiedName\nthat indicates the system that ran the process:\nYou could use the same connection\nqualifiedName\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualifiedName\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also send\nnull",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 9
    }
  },
  {
    "content": "(Optional) Provide the unique ID of the process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also send\nnull\nand the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra processes in lineage as this process itself changes over time.\nBy using your own ID for the process, any changes that occur in that process over time (even if the inputs or outputs change) the same single process in Atlan will be updated.\nProvide the list of inputs to the process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static\n<Type>.refByGuid()\nmethod)\nits\nqualifiedName\n(for the static\n<Type>.refByQualifiedName()\nmethod)\nProvide the list of outputs to the process. Note that each of these is again only a\nReference\nto an asset.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 10
    }
  },
  {
    "content": "method)\nits\nqualifiedName\n(for the static\n<Type>.refByQualifiedName()\nmethod)\nProvide the list of outputs to the process. Note that each of these is again only a\nReference\nto an asset.\n(Optional) Provide the parent\nLineageProcess\nin which this process ran (for example, if this process is a subprocess of some higher-level process). If this is a top-level process, you can also send\nnull\nfor this parameter (as in this example).\n(Optional) You can also add other properties to the lineage process, such as SQL code that runs within the process.\n(Optional) You can also provide a link to the process, which will provide a button to click to go to that link from the Atlan UI when viewing the process in Atlan.\nCall the\nsave()\nmethod to actually create the process. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single lineage process asset that was created.\nThe response will also include the 5 data assets (3 inputs, 2 outputs) that were updated.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 11
    }
  },
  {
    "content": "POST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Process\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/dag_123\"\n,\n// (4)\n\"inputs\"\n:\n[\n// (5)\n{\n\"typeName\"\n:\n\"Table\"\n,\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n},\n{\n\"typeName\"\n:\n\"Table\"\n,\n\"guid\"\n:\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n},\n{\n\"typeName\"\n:\n\"Table\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS\"\n}\n}\n],\n\"outputs\"\n:\n[\n// (6)\n{\n\"typeName\"\n:\n\"Table\"\n,\n\"guid\"\n:\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n},\n{\n\"typeName\"\n:\n\"Table\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n}\n}\n]\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for a\nProcess\nasset (case-sensitive).\nYou must provide a name of the integration process.\nYou must provide a unique\nqualifiedName\nfor the integration process (case-sensitive).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 12
    }
  },
  {
    "content": "Process\nasset (case-sensitive).\nYou must provide a name of the integration process.\nYou must provide a unique\nqualifiedName\nfor the integration process (case-sensitive).\nYou must list all of the input assets to the process. These can be referenced by GUID or by\nqualifiedName\n.\nYou must list all of the output assets from the process. These can also be referenced by either GUID or\nqualifiedName\n.\nUsing OpenLineage\n¶\nCreating connection for OpenLineage\n¶\n6.0.0\nYou must first configure OpenLineage before creating lineage between assets. You can either configure a\nSpark Assets\nconnection in Atlan before sending any OpenLineage events. (You can skip the\nConfigure the integration in Apache Spark\nsection), or you can follow the steps below to create the Spark connection via SDKs.\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nCreate Spark connection for using OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nAtlanConnectorType\nclient\n=\nAtlanClient\n()\nadmin_role_guid\n=\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)\n#(1)\nspark_connection\n=\nclient\n.\nopen_lineage\n.\ncreate_connection\n(\n#(2)\nname\n=\n\"open_lineage_connection\"\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 13
    }
  },
  {
    "content": "=\nAtlanClient\n()\nadmin_role_guid\n=\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)\n#(1)\nspark_connection\n=\nclient\n.\nopen_lineage\n.\ncreate_connection\n(\n#(2)\nname\n=\n\"open_lineage_connection\"\n,\nconnector_type\n=\nAtlanConnectorType\n.\nSPARK\n,\nadmin_roles\n=\n[\nadmin_role_guid\n],\nadmin_users\n=\n[\n\"jsmith\"\n],\nadmin_groups\n=\n[\n\"group2\"\n],\n)\nRetrieve the GUID for the admin role, to use later for defining the roles that can administer the connection.\nTo create OpenLineage connection using the\nopen_lineage.create_connection()\nmethod. Below params are required:\nname\n: Provide a human-readable name for your connections.\nconnector_type\n: Set the type of connection. Defaults to\nAtlanConnectorType.SPARK\n.\n(Optional)\nadmin_roles\n: List the workspace roles that should be able to administer the connection (if any, defaults to\nNone\n). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of admin_roles, admin_groups, or admin_users must be provided.\n(Optional)\nadmin_users\n: List the user names that can administer this connection (if any, defaults to\nNone",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 14
    }
  },
  {
    "content": "(Optional)\nadmin_users\n: List the user names that can administer this connection (if any, defaults to\nNone\n). Note that the values here are the username(s) of the user(s). At least one of admin_roles, admin_groups, or admin_users must be provided.\n(Optional)\nadmin_groups\n: List the group names that can administer this connection (if any, defaults to\nNone\n). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of admin_roles, admin_groups, or admin_users must be provided.\nWarning\nNote: At least one of the optional parameters\nadmin_roles\n,\nadmin_users\n, or\nadmin_groups\nmust be provided to successfully create the connection.\nComing soon\nPOST /api/service/credentials?testCredential=true\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"authType\"\n:\n\"atlan_api_key\"\n,\n// (1)\n\"name\"\n:\n\"default-spark-1716979138-0\"\n,\n//(2)\n\"connector\"\n:\n\"spark\"\n,\n// (3)\n\"connectorConfigName\"\n:\n\"atlan-connectors-spark\"\n,\n// (4)\n\"connectorType\"\n:\n\"event\"\n,\n// (5)\n\"extra\"\n:\n{\n\"events.enable-partial-assets\"\n:\ntrue\n,\n\"events.enabled\"\n:\ntrue\n,\n\"events.topic\"\n:\n\"openlineage_spark\"\n,\n// (6)\n\"events.urlPath\"\n:",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 15
    }
  },
  {
    "content": ",\n// (4)\n\"connectorType\"\n:\n\"event\"\n,\n// (5)\n\"extra\"\n:\n{\n\"events.enable-partial-assets\"\n:\ntrue\n,\n\"events.enabled\"\n:\ntrue\n,\n\"events.topic\"\n:\n\"openlineage_spark\"\n,\n// (6)\n\"events.urlPath\"\n:\n\"/events/openlineage/spark/api/v1/lineage\"\n// (7)\n}\n}\nThe\nauthType\nmust be exactly\natlan_api_key\n.\nHuman-readable name for your credential which should follow the pattern:\ndefault-spark-<epoch>-0\n, where\n<epoch>\nis the time in milliseconds at which the credential is being created.\nThe\nconnector\nmust be exactly\nspark\n.\nThe\nconnectorConfigName\nmust be exactly\natlan-connectors-spark\n.\nThe\nconnectorType\nmust be exactly\nevent\n.\nThe\nevents.topic\nmust be exactly\nopenlineage_spark\n.\nThe\nevents.urlPath\nmust be exactly\n/events/openlineage/spark/api/v1/lineages\n.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"Connection\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"open_lineage_connection\"\n,\n// (2)\n\"connectorName\"\n:\n\"spark\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/spark/123456789\"\n,\n// (4)\n\"category\"\n:\n\"connector\"\n,\n// (5)\n\"defaultCredentialGuid\"\n:\n\"8b579147-6054-4a4c-8137-463cd349b393\"\n,\n// (6)\n\"adminRoles\"\n:\n[\n// (7)",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 16
    }
  },
  {
    "content": ",\n// (3)\n\"qualifiedName\"\n:\n\"default/spark/123456789\"\n,\n// (4)\n\"category\"\n:\n\"connector\"\n,\n// (5)\n\"defaultCredentialGuid\"\n:\n\"8b579147-6054-4a4c-8137-463cd349b393\"\n,\n// (6)\n\"adminRoles\"\n:\n[\n// (7)\n\"e7ae0295-c60a-469a-bd2c-fb903943aa02\"\n],\n\"adminGroups\"\n:\n[\n// (8)\n\"group2\"\n],\n\"adminUsers\"\n:\n[\n// (9)\n\"jsmith\"\n]\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nConnection\n.\nHuman-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nThe\nconnectorName\nmust be exactly\nspark\n.\nDetermines the icon\nThis determines the icon that Atlan will use for all the assets in the connection. If you use a value that is\nnot\na known value, you will have a default gear icon instead.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/spark/<epoch>\n, where\n<epoch>\nis the time in milliseconds at which the connection is being created.\nThe\ncategory\nmust be exactly\nconnector\n.\nThe\ndefaultCredentialGuid\nshould be obtained from the\nid\nin the response of the previous request.\nList any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 17
    }
  },
  {
    "content": "At least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any users that can administer this connection. Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nCreating lineage between assets using OpenLineage\n¶\n2.5.1\n4.0.0\nTo create lineage between assets through\nOpenLineage\n, you need to send\nat least\ntwo events: one indicating the start of a job run and the other indicating that job run is finished.\nJava\nPython\nKotlin\nRaw REST API\nStart lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nString\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n;\n// (1)\nOpenLineageJob\nolj\n=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n();\nOpenLineageRun\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n();",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 18
    }
  },
  {
    "content": "OpenLineageJob\nolj\n=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n();\nOpenLineageRun\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n();\n// (3)\nOpenLineageInputDataset\ninputDataset\n=\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"OPS.DEFAULT.RUN_STATS\"\n)\n.\nbuild\n();\n// (4)\nOpenLineageOutputDataset\noutputDataset\n=\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"OPS.DEFAULT.FULL_STATS\"\n)\n.\nbuild\n();\n// (5)\nOpenLineageEvent\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\n// (6)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nSTART\n)\n.\ninput\n(\ninputDataset\n)\n// (7)\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"SOME.OTHER.TBL\"\n).\nbuild\n())\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"AN.OTHER.TBL\"\n).\nbuild\n())\n.\noutput\n(\noutputDataset\n)\n// (8)\n.\noutput\n(\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"AN.OTHER.VIEW\"\n).\nbuild\n())\n.\nbuild\n();\nstart\n.\nemit\n(\nclient\n);\n// (9)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 19
    }
  },
  {
    "content": ".\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 20
    }
  },
  {
    "content": "input\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\nOpenLineageEvent\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\n// (1)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nCOMPLETE\n).\nbuild\n();\ncomplete\n.\nemit\n(\nclient\n);\n// (2)\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the event to Atlan to be processed (asynchronously). Because this operation will directly persist the asset in Atlan, you must\nprovide it an",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 21
    }
  },
  {
    "content": "FAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the event to Atlan to be processed (asynchronously). Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nStart lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nOpenLineageEventType\nfrom\npyatlan.model.open_lineage\nimport\nOpenLineageEvent\n,\nOpenLineageJob\n,\nOpenLineageRun\nclient\n=\nAtlanClient\n()\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n# (1)\njob\n=\nOpenLineageJob\n.\ncreator\n(\n# (2)\nconnection_name\n=\n\"ol-spark\"\n,\njob_name\n=\n\"dag_123\"\n,\nproducer\n=\n\"https://your.orchestrator/unique/id/123\"\n)\nrun\n=\nOpenLineageRun\n.\ncreator\n(\njob\n=\njob\n)\n# (3)\ninput_dataset\n=\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"OPS.DEFAULT.RUN_STATS\"\n)\n# (4)\noutput_dataset\n=\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"OPS.DEFAULT.FULL_STATS\"\n)\n# (5)\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nSTART\n)\n# (6)",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 22
    }
  },
  {
    "content": "=\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"OPS.DEFAULT.FULL_STATS\"\n)\n# (5)\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nSTART\n)\n# (6)\nstart\n.\ninputs\n=\n[\ninput_dataset\n,\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"SOME.OTHER.TBL\"\n),\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"AN.OTHER.TBL\"\n),\n]\n# (7)\nstart\n.\noutputs\n=\n[\noutput_dataset\n,\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"AN.OTHER.VIEW\"\n)\n]\n# (8)\nstart\n.\nemit\n(\nclient\n=\nclient\n)\n# (9)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 23
    }
  },
  {
    "content": "OpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nCOMPLETE\n)\n# (1)\ncomplete\n.\nemit\n(\nclient\n=",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 24
    }
  },
  {
    "content": "Complete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nCOMPLETE\n)\n# (1)\ncomplete\n.\nemit\n(\nclient\n=\nclient\n)\n# (2)\nSince each run of a job must consist of\nat least\ntwo events,\ndo not forget to send the terminal state indicating when the job\nhas finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the\nevent to Atlan to be processed (asynchronously).\nStart lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nval\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n// (1)\nval\nolj\n=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n()\nval\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n()\n// (3)\nval\ninputDataset\n=\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"OPS.DEFAULT.RUN_STATS\"\n)\n.\nbuild\n()\n// (4)\nval\noutputDataset\n=\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"OPS.DEFAULT.FULL_STATS\"\n)\n.\nbuild\n()\n// (5)\nval\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\n// (6)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nSTART\n)\n.\ninput\n(\ninputDataset\n)",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 25
    }
  },
  {
    "content": ".\ncreateOutput\n(\nsnowflake\n,\n\"OPS.DEFAULT.FULL_STATS\"\n)\n.\nbuild\n()\n// (5)\nval\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\n// (6)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nSTART\n)\n.\ninput\n(\ninputDataset\n)\n// (7)\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"SOME.OTHER.TBL\"\n).\nbuild\n())\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"AN.OTHER.TBL\"\n).\nbuild\n())\n.\noutput\n(\noutputDataset\n)\n// (8)\n.\noutput\n(\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"AN.OTHER.VIEW\"\n).\nbuild\n())\n.\nbuild\n()\nstart\n.\nemit\n(\nclient\n)\n// (9)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 26
    }
  },
  {
    "content": "OpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nComplete lineage between assets via OpenLineage\n1\n2",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 27
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\nval\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\n// (1)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nCOMPLETE\n).\nbuild\n()\ncomplete\n.\nemit\n(\nclient\n)\n// (2)\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the event to Atlan to be processed (asynchronously). Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /events/openlineage/spark/api/v1/lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n{\n\"eventTime\"\n:\n\"2024-07-01T08:23:37.491542Z\"\n,\n// (1)\n\"producer\"\n:\n\"https://your.orchestrator/unique/id/123\"\n,\n// (2)\n\"schemaURL\"\n:\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"START\"\n,\n// (3)\n\"job\"\n:\n{\n// (4)\n\"namespace\"\n:\n\"ol-spark\"\n,\n\"name\"\n:",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 28
    }
  },
  {
    "content": ",\n// (2)\n\"schemaURL\"\n:\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"START\"\n,\n// (3)\n\"job\"\n:\n{\n// (4)\n\"namespace\"\n:\n\"ol-spark\"\n,\n\"name\"\n:\n\"dag_123\"\n,\n\"facets\"\n:\n{}\n},\n\"run\"\n:\n{\n// (5)\n\"runId\"\n:\n\"eefd52c3-5871-4f0e-8ff5-237e9a6efb53\"\n,\n\"facets\"\n:\n{}\n},\n\"inputs\"\n:\n[\n// (6)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"facets\"\n:\n{}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"SOME.OTHER.TBL\"\n,\n\"facets\"\n:\n{}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"AN.OTHER.TBL\"\n,\n\"facets\"\n:\n{}\n}\n],\n\"outputs\"\n:\n[\n// (7)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.FULL_STATS\"\n,\n\"facets\"\n:\n{}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"AN.OTHER.VIEW\"\n,\n\"facets\"\n:\n{}\n}\n]\n}\nEach event for a job run must have a time at which the event occurred.\nEach event must have a URI indicating the code or system responsible for producing this lineage.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 29
    }
  },
  {
    "content": "Each event must have a URI indicating the code or system responsible for producing this lineage.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan) as its\nnamespace\n,\na unique job name (used to idempotently update the same job with multiple runs)\nA job must be run at least once for any lineage to exist, and each event for the same run of a job must be associated with the same\nrunId\n.\nYou can define any number of inputs (sources) for lineage.\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage.\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 30
    }
  },
  {
    "content": "Datasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nPOST /events/openlineage/spark/api/v1/lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n{\n\"eventTime\"\n:\n\"2024-07-01T08:23:38.360567Z\"\n,\n\"producer\"\n:\n\"https://your.orchestrator/unique/id/123\"\n,\n\"schemaURL\"\n:\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"COMPLETE\"\n,\n// (1)\n\"run\"\n:\n{\n\"runId\"\n:\n\"eefd52c3-5871-4f0e-8ff5-237e9a6efb53\"\n,\n\"facets\"\n:\n{}\n},\n\"job\"\n:\n{\n\"namespace\"\n:\n\"ol-spark\"\n,\n\"name\"\n:\n\"dag_123\"\n,\n\"facets\"\n:\n{}\n}\n}\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nCreate lineage between columns\n¶\nDirectly\n¶\n2.0.0\n4.0.0\nTo create lineage between\nrelational asset columns\n,\nit is necessary to create a\nColumnProcess\nentity.\nLineage with relational columns\nBefore creating the ColumnProcess, verify\nlineage already exists\nbetween the associated",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 31
    }
  },
  {
    "content": "relational asset columns\n,\nit is necessary to create a\nColumnProcess\nentity.\nLineage with relational columns\nBefore creating the ColumnProcess, verify\nlineage already exists\nbetween the associated\nrelational assets\n, and ensure that the\ncolumns referenced as inputs and outputs already exist.\nJava\nPython\nKotlin\nRaw REST API\nCreate lineage between columns\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nColumnProcess\ncolumnProcess\n=\nColumnProcess\n.\ncreator\n(\n// (1)\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (2)\n\"default/snowflake/1657025257\"\n,\n// (3)\n\"dag_123\"\n,\n// (4)\nList\n.\nof\n(\n// (5)\nColumn\n.\nrefByGuid\n(\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nColumn\n.\nrefByGuid\n(\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nColumn\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS/COLUMN\"\n)),\nList\n.\nof\n(\n// (6)\nColumn\n.\nrefByGuid\n(\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nColumn\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS/COLUMN\"\n)),\nProcess\n.\nrefByGuid\n(\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n))\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n();",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 32
    }
  },
  {
    "content": ")),\nProcess\n.\nrefByGuid\n(\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n))\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ncolumnProcess\n.\nsave\n(\nclient\n);\n// (10)\nassert\nresponse\n.\ngetCreatedAssets\n().\nsize\n()\n==\n1\n// (11)\nassert\nresponse\n.\ngetUpdatedAssets\n().\nsize\n()\n==\n5\n// (12)\nUse the\ncreator()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the column process will be shown in the UI.\nProvide the\nqualifiedName\nof the connection that ran the column process.\nTips for the connection\nThe column process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualifiedName\nthat indicates the system that ran the column process:\nYou could use the same connection\nqualifiedName\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualifiedName\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualifiedName",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 33
    }
  },
  {
    "content": "You could use the same connection\nqualifiedName\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the column process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also send\nnull\nand the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the column process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra column processes in lineage as this process itself changes over time.\nBy using your own ID for the column process, any changes that occur in that process over time (even if the inputs or outputs change) the same single process in Atlan will be updated.\nProvide the list of inputs to the column process. Note that each of these is only a\nReference",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 34
    }
  },
  {
    "content": "Provide the list of inputs to the column process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static\n<Type>.refByGuid()\nmethod)\nits\nqualifiedName\n(for the static\n<Type>.refByQualifiedName()\nmethod)\nProvide the list of outputs to the column process. Note that each of these is again only a\nReference\nto an asset.\nProvide the parent\nLineageProcess\nin which this process ran since this process is a subprocess of some higher-level process.\n(Optional) You can also add other properties to the column process, such as SQL code that runs within the column process.\n(Optional) You can also provide a link to the column process, which will provide a button to click to go to that link from the Atlan UI when viewing the column process in Atlan.\nCall the\nsave()\nmethod to actually create the column process. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single column process asset that was created.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 35
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single column process asset that was created.\nThe response will also include the 5 column assets (3 inputs, 2 outputs) that were updated.\nCreate lineage between columns\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nProcess\n,\nColumnProcess\n,\nColumn\nclient\n=\nAtlanClient\n()\ncolumn_process\n=\nColumnProcess\n.\ncreator\n(\n# (1)\nname\n=\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n# (2)\nconnection_qualified_name\n=\n\"default/snowflake/1657025257\"\n,\n# (3)\nprocess_id\n=\n\"dag_123\"\n,\n# (4)\ninputs\n=\n[\n# (5)\nColumn\n.\nref_by_guid\n(\nguid\n=\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nColumn\n.\nref_by_guid\n(\nguid\n=\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nColumn\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS/COLUMN\"\n),\n],\noutputs\n=\n[\n# (6)\nColumn\n.\nref_by_guid\n(\nguid\n=\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nColumn\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS/COLUMN\"\n),\n],\nparent\n=\nProcess\n.\nref_by_guid",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 36
    }
  },
  {
    "content": "(\nguid\n=\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nColumn\n.\nref_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS/COLUMN\"\n),\n],\nparent\n=\nProcess\n.\nref_by_guid\n(\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n),\n)\n# (7)\ncolumn_process\n.\nsql\n=\n\"select * from somewhere;\"\n# (8)\ncolumn_process\n.\nsource_url\n=\n\"https://your.orchestrator/unique/id/123\"\n# (9)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ncolumn_process\n)\n# (10)\nassert\n(\ncolumn_processes\n:=\nresponse\n.\nassets_created\n(\nColumnProcess\n))\n# (11)\nassert\nlen\n(\ncolumn_processes\n)\n==\n1\n# (12)\nassert\n(\ncolumns\n:=\nresponse\n.\nassets_updated\n(\nColumn\n))\n# (13)\nassert\nlen\n(\ncolumns\n)\n==\n2\n# (14)\nUse the\ncreate()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the column process will be shown in the UI.\nProvide the\nqualified_name\nof the connection that ran the column process.\nTips for the connection\nThe column process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualified_name\nthat indicates the system that ran the column process:\nYou could use the same connection\nqualified_name",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 37
    }
  },
  {
    "content": "qualified_name\nthat indicates the system that ran the column process:\nYou could use the same connection\nqualified_name\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualified_name\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualified_name\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the column process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also leave it out and the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the column process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra column processes in lineage as this column process itself changes over time.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 38
    }
  },
  {
    "content": "By using your own ID for the column process, any changes that occur in that column process over time (even if the inputs or outputs change) the same single column process in Atlan will be updated.\nProvide the list of inputs to the column process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the\nref_by_guid()\nmethod)\nits\nqualifiedName\n(for the\nref_by_qualified_name()\nmethod)\nProvide the list of outputs to the column process. Note that each of these is again only a\nReference\nto an asset.\nProvide the parent\nProcess\nin which this process ran since this process is a subprocess of some  higher-level process.\n(Optional) You can also add other properties to the column process, such as SQL code that runs within the column process.\n(Optional) You can also provide a link to the column process, which will provide a button to click to go to that link from the Atlan UI when viewing the column process in Atlan.\nCall the\nsave()\nmethod to actually create the column process.\nCheck that a\nColumnProcess\nwas created.\nCheck that only 1\nColumnProcess\nwas created.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 39
    }
  },
  {
    "content": "Call the\nsave()\nmethod to actually create the column process.\nCheck that a\nColumnProcess\nwas created.\nCheck that only 1\nColumnProcess\nwas created.\nCheck that tables were updated.\nCheck that 5 tables (3 inputs, 2 outputs) were updated.\nCreate lineage between columns\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nval\ncolumnProcess\n=\nColumnProcess\n.\ncreator\n(\n// (1)\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (2)\n\"default/snowflake/1657025257\"\n,\n// (3)\n\"dag_123\"\n,\n// (4)\nlistOf\n<\nICatalog\n>\n(\n// (5)\nColumn\n.\nrefByGuid\n(\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n),\nColumn\n.\nrefByGuid\n(\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n),\nColumn\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS/COLUMN\"\n)),\nlistOf\n<\nICatalog\n>\n(\n// (6)\nColumn\n.\nrefByGuid\n(\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n),\nColumn\n.\nrefByQualifiedName\n(\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS/COLUMN\"\n)),\nProcess\n.\nrefByGuid\n(\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n))\n// (7)\n.\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n()\nval\nresponse\n=\ncolumnProcess\n.\nsave\n(\nclient\n)\n// (10)\nassert\n(\nresponse\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 40
    }
  },
  {
    "content": ".\nsql\n(\n\"select * from somewhere;\"\n)\n// (8)\n.\nsourceURL\n(\n\"https://your.orchestrator/unique/id/123\"\n)\n// (9)\n.\nbuild\n()\nval\nresponse\n=\ncolumnProcess\n.\nsave\n(\nclient\n)\n// (10)\nassert\n(\nresponse\n.\ncreatedAssets\n.\nsize\n==\n1\n)\n// (11)\nassert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n5\n)\n// (12)\nUse the\ncreator()\nmethod to initialize the object with all\nnecessary attributes for creating it\n.\nProvide a name for how the column process will be shown in the UI.\nProvide the\nqualifiedName\nof the connection that ran the column process.\nTips for the connection\nThe column process itself must be created within a connection for both access control and icon labelling. Use a connection\nqualifiedName\nthat indicates the system that ran the column process:\nYou could use the same connection\nqualifiedName\nas the source system, if it was the source system \"pushing\" data to the target(s).\nYou could use the same connection\nqualifiedName\nas the target system, if it was the target system \"pulling\" data from the source(s).\nYou could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 41
    }
  },
  {
    "content": "You could use a different connection\nqualifiedName\nfrom either source or target, if there is a system in-between doing the processing (for example an ETL engine or orchestrator).\n(Optional) Provide the unique ID of the column process within that connection. This could be the unique DAG ID for an orchestrator, for example. Since it is optional, you can also send\nnull\nand the SDK will generate a unique ID for you based on the unique combination of inputs and outputs for the column process.\nUse your own ID if you can\nWhile the SDK can generate this ID for you, since it is based on the unique combination of inputs and outputs the ID can change if those inputs or outputs change. This could result in extra column processes in lineage as this process itself changes over time.\nBy using your own ID for the column process, any changes that occur in that process over time (even if the inputs or outputs change) the same single process in Atlan will be updated.\nProvide the list of inputs to the column process. Note that each of these is only a\nReference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 42
    }
  },
  {
    "content": "Reference\nto an asset, not a full asset object. For a reference you only need (in addition to the type of asset) either:\nits GUID (for the static\n<Type>.refByGuid()\nmethod)\nits\nqualifiedName\n(for the static\n<Type>.refByQualifiedName()\nmethod)\nProvide the list of outputs to the column process. Note that each of these is again only a\nReference\nto an asset.\nProvide the parent\nLineageProcess\nin which this process ran since this process is a subprocess of some higher-level process.\n(Optional) You can also add other properties to the column process, such as SQL code that runs within the column process.\n(Optional) You can also provide a link to the column process, which will provide a button to click to go to that link from the Atlan UI when viewing the column process in Atlan.\nCall the\nsave()\nmethod to actually create the column process. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single column process asset that was created.\nThe response will also include the 5 column assets (3 inputs, 2 outputs) that were updated.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 43
    }
  },
  {
    "content": "The response will also include the 5 column assets (3 inputs, 2 outputs) that were updated.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"ColumnProcess\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Source 1, Source 2, Source 3 -> Target 1, Target 2\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/dag_123\"\n,\n// (4)\n\"inputs\"\n:\n[\n// (5)\n{\n\"typeName\"\n:\n\"Column\"\n,\n\"guid\"\n:\n\"495b1516-aaaf-4390-8cfd-b11ade7a7799\"\n},\n{\n\"typeName\"\n:\n\"Column\"\n,\n\"guid\"\n:\n\"d002dead-1655-4d75-abd6-ad889fa04bd4\"\n},\n{\n\"typeName\"\n:\n\"Column\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/OPS/DEFAULT/RUN_STATS\"\n}\n}\n],\n\"outputs\"\n:\n[\n// (6)\n{\n\"typeName\"\n:\n\"Column\"\n,\n\"guid\"\n:\n\"86d9a061-7753-4884-b988-a02d3954bc24\"\n},\n{\n\"typeName\"\n:\n\"Column\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/OPS/DEFAULT/FULL_STATS\"\n}\n}\n],\n\"process\"\n:\n{\n// (7)\n\"guid\"\n:\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n,\n\"typeName\"\n:\n\"Process\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/parent_123\"\n}\n}\n}\n}\n]\n}",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 44
    }
  },
  {
    "content": "}\n}\n],\n\"process\"\n:\n{\n// (7)\n\"guid\"\n:\n\"76d9a061-7753-9884-b988-a02d3954bc25\"\n,\n\"typeName\"\n:\n\"Process\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657025257/parent_123\"\n}\n}\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for a\nColumnProcess\nasset (case-sensitive).\nYou must provide a name of the integration column process.\nYou must provide a unique\nqualifiedName\nfor the integration column process (case-sensitive).\nYou must list all of the input assets to the column process. These can be referenced by GUID or by\nqualifiedName\n.\nYou must list all of the output assets from the column process. These can also be referenced by either GUID or\nqualifiedName\n.\nYou must provide the parent\nLineageProcess\nin which this process ran since this process is a subprocess of some higher-level process.\nUsing OpenLineage\n¶\n2.5.1\n4.0.0\nTo create column-lineage between assets through\nOpenLineage\n, you need only extend the details of the\noutputs\nyou send in your OpenLineage events.\nYou must first configure OpenLineage\nYou must first configure a\nSpark Assets\nconnection in Atlan before sending any OpenLineage events. (You can skip the",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 45
    }
  },
  {
    "content": "outputs\nyou send in your OpenLineage events.\nYou must first configure OpenLineage\nYou must first configure a\nSpark Assets\nconnection in Atlan before sending any OpenLineage events. (You can skip the\nConfigure the integration in Apache Spark\nsection.)\nJava\nPython\nKotlin\nRaw REST API\nStart column-level lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nString\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n;\n// (1)\nOpenLineageJob\nolj\n=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n();\nOpenLineageRun\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n();\n// (3)\nOpenLineageInputDataset\ninputDataset\n=\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"OPS.DEFAULT.RUN_STATS\"\n)\n.\nbuild\n();\n// (4)\nOpenLineageOutputDataset\noutputDataset\n=\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"OPS.DEFAULT.FULL_STATS\"\n)\n// (5)\n.\ntoField\n(\n// (6)\n\"COLUMN\"\n,\n// (7)\nlistOf\n(\n// (8)\ninputDataset\n.\nfromField\n(\n\"COLUMN\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"ONE\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"TWO\"\n).\nbuild\n(),\n),\n)\n.\ntoField\n(\n\"ANOTHER\"\n,\nlistOf\n(\ninputDataset\n.\nfromField",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 46
    }
  },
  {
    "content": ".\nfromField\n(\n\"COLUMN\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"ONE\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"TWO\"\n).\nbuild\n(),\n),\n)\n.\ntoField\n(\n\"ANOTHER\"\n,\nlistOf\n(\ninputDataset\n.\nfromField\n(\n\"THREE\"\n).\nbuild\n(),\n),\n)\n.\nbuild\n();\nOpenLineageEvent\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\n// (9)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nSTART\n)\n.\ninput\n(\ninputDataset\n)\n// (10)\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"SOME.OTHER.TBL\"\n).\nbuild\n())\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"AN.OTHER.TBL\"\n).\nbuild\n())\n.\noutput\n(\noutputDataset\n)\n// (11)\n.\noutput\n(\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"AN.OTHER.VIEW\"\n).\nbuild\n())\n.\nbuild\n();\nstart\n.\nemit\n(\nclient\n);\n// (12)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 47
    }
  },
  {
    "content": "A job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nFor column-level lineage, you specify the mapping\nonly\non the target (outputs) end of the lineage, by chaining a\ntoField\nfor each output column.\nEach key for such a\ntoField()\nchain is the name of a field (column) in the\noutput\ndataset.\nYou can then provide a list that defines\nall\ninput (source) fields that map to this output field in column-level lineage.\nCreate input fields from input datasets\nYou can quickly create such a input (source) field from an input dataset using the\nfromField()\nmethod and the name of the column in that input dataset.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 48
    }
  },
  {
    "content": "fromField()\nmethod and the name of the column in that input dataset.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\nOpenLineageEvent\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\n// (1)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nCOMPLETE\n).\nbuild\n();\ncomplete\n.\nemit\n(\nclient\n);\n// (2)\nSince each run of a job must consist of\nat least",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 49
    }
  },
  {
    "content": "complete\n=\nOpenLineageEvent\n.\ncreator\n(\n// (1)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nCOMPLETE\n).\nbuild\n();\ncomplete\n.\nemit\n(\nclient\n);\n// (2)\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the event to Atlan to be processed (asynchronously). Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nStart column-level lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nOpenLineageEventType\nfrom\npyatlan.model.open_lineage\nimport\nOpenLineageEvent\n,\nOpenLineageJob\n,\nOpenLineageRun\nclient\n=\nAtlanClient\n()\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n# (1)\njob\n=\nOpenLineageJob\n.\ncreator\n(\n# (2)\nconnection_name\n=\n\"ol-spark\"\n,\njob_name\n=\n\"dag_123\"\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 50
    }
  },
  {
    "content": ",\nOpenLineageRun\nclient\n=\nAtlanClient\n()\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n# (1)\njob\n=\nOpenLineageJob\n.\ncreator\n(\n# (2)\nconnection_name\n=\n\"ol-spark\"\n,\njob_name\n=\n\"dag_123\"\n,\nproducer\n=\n\"https://your.orchestrator/unique/id/123\"\n)\nrun\n=\nOpenLineageRun\n.\ncreator\n(\njob\n=\njob\n)\n# (3)\ninput_dataset\n=\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"OPS.DEFAULT.RUN_STATS\"\n)\n# (4)\noutput_dataset\n=\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"OPS.DEFAULT.FULL_STATS\"\n)\n# (5)\noutput_dataset\n.\nto_fields\n=\n[\n# (6)\n{\n# (7)\n\"COLUMN\"\n:\n[\ninput_dataset\n.\nfrom_field\n(\nfield_name\n=\n\"COLUMN\"\n),\ninput_dataset\n.\nfrom_field\n(\nfield_name\n=\n\"ONE\"\n),\ninput_dataset\n.\nfrom_field\n(\nfield_name\n=\n\"TWO\"\n),\n]\n# (8)\n},\n{\n\"ANOTHER\"\n:\n[\ninput_dataset\n.\nfrom_field\n(\nfield_name\n=\n\"THREE\"\n),\n]\n},\n]\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nSTART\n)\n# (9)\nstart\n.\ninputs\n=\n[\ninput_dataset\n,\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"SOME.OTHER.TBL\"\n),\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"AN.OTHER.TBL\"\n),\n]\n# (10)\nstart\n.\noutputs\n=\n[\noutput_dataset\n,\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 51
    }
  },
  {
    "content": "=\n\"SOME.OTHER.TBL\"\n),\njob\n.\ncreate_input\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"AN.OTHER.TBL\"\n),\n]\n# (10)\nstart\n.\noutputs\n=\n[\noutput_dataset\n,\njob\n.\ncreate_output\n(\nnamespace\n=\nsnowflake\n,\nasset_name\n=\n\"AN.OTHER.VIEW\"\n)\n]\n# (11)\nstart\n.\nemit\n()\n# (12)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 52
    }
  },
  {
    "content": ".\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nFor column-level lineage, you specify the mapping\nonly\non the target (outputs) end of the lineage to the\nto_fields\nattribute.\nEach key is the name of a field (column) in the\noutput\ndataset.\nYou can then provide a list that defines\nall\ninput (source)\nfields that map to this output field in column-level lineage.\nCreate input fields from input datasets\nYou can quickly create such a input (source) field from an input dataset using the\nfrom_Field()\nmethod and the name of the column in that input dataset.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 53
    }
  },
  {
    "content": "Use the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\nrun\n=\nrun\n,\nevent_type\n=\nOpenLineageEventType\n.\nCOMPLETE\n)\n# (1)\ncomplete\n.\nemit\n()\n# (2)\nSince each run of a job must consist of\nat least\ntwo events,\ndo not forget to send the terminal state indicating when the job\nhas finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the\nevent to Atlan to be processed (asynchronously).\nStart column-level lineage between assets via OpenLineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nval\nsnowflake\n=\n\"snowflake://abc123.snowflakecomputing.com\"\n// (1)\nval\nolj\n=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n()\nval\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n()\n// (3)\nval\ninputDataset\n=\nolj\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 54
    }
  },
  {
    "content": "=\nOpenLineageJob\n.\ncreator\n(\n// (2)\n\"ol-spark\"\n,\n\"dag_123\"\n,\n\"https://your.orchestrator/unique/id/123\"\n).\nbuild\n()\nval\nolr\n=\nOpenLineageRun\n.\ncreator\n(\nolj\n).\nbuild\n()\n// (3)\nval\ninputDataset\n=\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"OPS.DEFAULT.RUN_STATS\"\n)\n.\nbuild\n()\n// (4)\nval\noutputDataset\n=\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"OPS.DEFAULT.FULL_STATS\"\n)\n// (5)\n.\ntoField\n(\n// (6)\n\"COLUMN\"\n,\n// (7)\nlistOf\n(\n// (8)\ninputDataset\n.\nfromField\n(\n\"COLUMN\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"ONE\"\n).\nbuild\n(),\ninputDataset\n.\nfromField\n(\n\"TWO\"\n).\nbuild\n(),\n),\n)\n.\ntoField\n(\n\"ANOTHER\"\n,\nlistOf\n(\ninputDataset\n.\nfromField\n(\n\"THREE\"\n).\nbuild\n(),\n),\n)\n.\nbuild\n()\nval\nstart\n=\nOpenLineageEvent\n.\ncreator\n(\n// (9)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nSTART\n)\n.\ninput\n(\ninputDataset\n)\n// (10)\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"SOME.OTHER.TBL\"\n).\nbuild\n())\n.\ninput\n(\nolj\n.\ncreateInput\n(\nsnowflake\n,\n\"AN.OTHER.TBL\"\n).\nbuild\n())\n.\noutput\n(\noutputDataset\n)\n// (11)\n.\noutput\n(\nolj\n.\ncreateOutput\n(\nsnowflake\n,\n\"AN.OTHER.VIEW\"\n).\nbuild\n())\n.\nbuild\n()\nstart\n.\nemit\n(\nclient\n)\n// (12)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 55
    }
  },
  {
    "content": "(\nsnowflake\n,\n\"AN.OTHER.VIEW\"\n).\nbuild\n())\n.\nbuild\n()\nstart\n.\nemit\n(\nclient\n)\n// (12)\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan),\na unique job name (used to idempotently update the same job with multiple runs), and\na unique URI indicating the code or system responsible for producing this lineage.\nA job must be run at least once for any lineage to exist, and these separate runs of the same job are tracked through\nOpenLineageRun\nobjects.\nYou can define any number of inputs (sources) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage. The\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nFor column-level lineage, you specify the mapping\nonly\non the target (outputs) end of the lineage, by chaining a\ntoField\nfor each output column.\nEach key for such a\ntoField()",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 56
    }
  },
  {
    "content": ".\nFor column-level lineage, you specify the mapping\nonly\non the target (outputs) end of the lineage, by chaining a\ntoField\nfor each output column.\nEach key for such a\ntoField()\nchain is the name of a field (column) in the\noutput\ndataset.\nYou can then provide a list that defines\nall\ninput (source) fields that map to this output field in column-level lineage.\nCreate input fields from input datasets\nYou can quickly create such a input (source) field from an input dataset using the\nfromField()\nmethod and the name of the column in that input dataset.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nYou can chain any number of\ninput\ns to the event to indicate the source datasets for the lineage.\nYou can chain any number of\noutput\ns to the event to indicate the target datasets for the lineage.\nUse the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 57
    }
  },
  {
    "content": "Use the\nemit()\nmethod to actually send the event to Atlan to be processed. The processing itself occurs asynchronously, so a successful\nemit()\nwill only indicate that the event has been successfully sent to Atlan, not that it has (yet) been processed. Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nComplete lineage between assets via OpenLineage\n1\n2\n3\n4\n5\nval\ncomplete\n=\nOpenLineageEvent\n.\ncreator\n(\n// (1)\nolr\n,\nOpenLineage\n.\nRunEvent\n.\nEventType\n.\nCOMPLETE\n).\nbuild\n()\ncomplete\n.\nemit\n(\nclient\n)\n// (2)\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nOnce again, use the\nemit()\nmethod to actually send the event to Atlan to be processed (asynchronously). Because this operation will directly persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /events/openlineage/spark/api/v1/lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 58
    }
  },
  {
    "content": "AtlanClient\nthrough which to connect to the tenant.\nPOST /events/openlineage/spark/api/v1/lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n{\n\"eventTime\"\n:\n\"2024-07-01T08:23:37.491542Z\"\n,\n// (1)\n\"producer\"\n:\n\"https://your.orchestrator/unique/id/123\"\n,\n// (2)\n\"schemaURL\"\n:\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"START\"\n,\n// (3)\n\"job\"\n:\n{\n// (4)\n\"namespace\"\n:\n\"ol-spark\"\n,\n\"name\"\n:\n\"dag_123\"\n,\n\"facets\"\n:\n{}\n},\n\"run\"\n:\n{\n// (5)\n\"runId\"\n:\n\"eefd52c3-5871-4f0e-8ff5-237e9a6efb53\"\n,\n\"facets\"\n:\n{}\n},\n\"inputs\"\n:\n[\n// (6)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"facets\"\n:\n{}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"SOME.OTHER.TBL\"\n,\n\"facets\"\n:\n{}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"AN.OTHER.TBL\"\n,\n\"facets\"\n:\n{}\n}\n],\n\"outputs\"\n:\n[\n// (7)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.FULL_STATS\"\n,",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 59
    }
  },
  {
    "content": ",\n\"name\"\n:\n\"AN.OTHER.TBL\"\n,\n\"facets\"\n:\n{}\n}\n],\n\"outputs\"\n:\n[\n// (7)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.FULL_STATS\"\n,\n\"facets\"\n:\n{\n\"columnLineage\"\n:\n{\n// (8)\n\"_producer\"\n:\n\"https://your.orchestrator/unique/id/123\"\n,\n\"_schemaURL\"\n:\n\"https://openlineage.io/spec/facets/1-1-0/ColumnLineageDatasetFacet.json#/$defs/ColumnLineageDatasetFacet\"\n,\n\"fields\"\n:\n{\n\"COLUMN\"\n:\n{\n// (9)\n\"inputFields\"\n:\n[\n// (10)\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"field\"\n:\n\"COLUMN\"\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"field\"\n:\n\"ONE\"\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"field\"\n:\n\"TWO\"\n}\n]\n},\n\"ANOTHER\"\n:\n{\n\"inputFields\"\n:\n[\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"OPS.DEFAULT.RUN_STATS\"\n,\n\"field\"\n:\n\"THREE\"\n}\n]\n}\n}\n}\n}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"AN.OTHER.VIEW\"\n,\n\"facets\"\n:\n{}\n}\n]\n}\nEach event for a job run must have a time at which the event occurred.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 60
    }
  },
  {
    "content": "}\n]\n}\n}\n}\n}\n},\n{\n\"namespace\"\n:\n\"snowflake://abc123.snowflakecomputing.com\"\n,\n\"name\"\n:\n\"AN.OTHER.VIEW\"\n,\n\"facets\"\n:\n{}\n}\n]\n}\nEach event for a job run must have a time at which the event occurred.\nEach event must have a URI indicating the code or system responsible for producing this lineage.\nEach run of a job must consist of\nat least\ntwo events — a\nSTART\nevent indicating when the job ran began, and some terminal state indicating when the job run finished.\nLineage is tracked through jobs. Each job must have:\nthe name of a connection (that already exists in Atlan) as its\nnamespace\n,\na unique job name (used to idempotently update the same job with multiple runs)\nA job must be run at least once for any lineage to exist, and each event for the same run of a job must be associated with the same\nrunId\n.\nYou can define any number of inputs (sources) for lineage.\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 61
    }
  },
  {
    "content": ".\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nYou can define any number of outputs (targets) for lineage.\nDatasets used in data lineage need a\nnamespace\nthat follows the\nsource-specific naming standards of OpenLineage\n.\nThe\nname\nof a dataset should use a\n.\n-qualified form. For example, a table should be\nDATABASE_NAME.SCHEMA_NAME.TABLE_NAME\n.\nFor column-level lineage, you specify the mapping\nonly\non the target (outputs) end of the lineage, by including a\ncolumnLineage\nfacet with an embedded\nfields\nobject.\nEach key for the\nfields\nobject is the name of a field (column) in the\noutput\ndataset.\nYou can then provide a list that defines\nall\ninput (source) fields that map to this output field in column-level lineage.\nPOST /events/openlineage/spark/api/v1/lineage\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n{\n\"eventTime\"\n:\n\"2024-07-01T08:23:38.360567Z\"\n,\n\"producer\"\n:\n\"https://your.orchestrator/unique/id/123\"\n,\n\"schemaURL\"\n:\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"COMPLETE\"\n,\n// (1)\n\"run\"\n:\n{\n\"runId\"\n:\n\"eefd52c3-5871-4f0e-8ff5-237e9a6efb53\"\n,\n\"facets\"\n:\n{}\n},\n\"job\"\n:\n{",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 62
    }
  },
  {
    "content": ":\n\"https://openlineage.io/spec/2-0-2/OpenLineage.json#/$defs/RunEvent\"\n,\n\"eventType\"\n:\n\"COMPLETE\"\n,\n// (1)\n\"run\"\n:\n{\n\"runId\"\n:\n\"eefd52c3-5871-4f0e-8ff5-237e9a6efb53\"\n,\n\"facets\"\n:\n{}\n},\n\"job\"\n:\n{\n\"namespace\"\n:\n\"ol-spark\"\n,\n\"name\"\n:\n\"dag_123\"\n,\n\"facets\"\n:\n{}\n}\n}\nSince each run of a job must consist of\nat least\ntwo events, do not forget to send the terminal state indicating when the job has finished (and whether it was successful with a\nCOMPLETE\nor had some error with a\nFAIL\n.)\nRemove lineage between assets\n¶\n7.0.0\n4.0.0\nTo remove lineage between assets, you need to delete the\nProcess\nentity that links them:\nOnly deletes the process indicated, no more\nAlso be aware that this will only delete the process with the GUID specified. It will\nnot\nremove any column processes that may also exist. To remove those column processes as well, you must identify the GUID of each column-level process and call the same\npurge\nmethod against each of those GUIDs.\nJava\nPython\nKotlin\nRaw REST API\nRemove lineage between assets\n1\n2\n3\n4\n5\n6\n7\nAssetMutationResponse\nresponse\n=\nAsset\n.\npurge\n(\nclient\n,\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n);\n// (1)\nAsset\ndeleted\n=\nresponse\n.\ngetDeletedAssets\n().\nget\n(\n0\n);",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 63
    }
  },
  {
    "content": "1\n2\n3\n4\n5\n6\n7\nAssetMutationResponse\nresponse\n=\nAsset\n.\npurge\n(\nclient\n,\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n);\n// (1)\nAsset\ndeleted\n=\nresponse\n.\ngetDeletedAssets\n().\nget\n(\n0\n);\n// (2)\nLineageProcess\nprocess\n;\nif\n(\ndeleted\ninstanceof\nLineageProcess\n)\n{\nprocess\n=\n(\nLineageProcess\n)\ndeleted\n;\n// (3)\n}\nProvide the GUID for the process to the static\nAsset.purge()\nmethod. Because this operation will directly remove the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single process that was purged.\nIf you want to confirm the details, you'll need to type-check and then cast the generic\nAsset\nreturned into a\nProcess\n.\nRemove lineage between assets\n1\n2\n3\n4\n5\n6\n7\n8\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nProcess\nclient\n=\nAtlanClient\n()\nresponse\n=\nclient\n.\nasset\n.\npurge_by_guid\n(\n# (1)\nguid\n=\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n)\n# (2)\nassert\n(\nprocesses\n:=\nresponse\n.\nassets_deleted\n(\nProcess\n))\n# (3)\nassert\nlen\n(\nprocesses\n)\n==\n1\n# (4)\nInvoke the\nasset.purge_by_guid\nto delete the\nProcess\n.\nProvide the GUID of the process to be purged.\nCheck that a\nProcess\nwas purged.",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 64
    }
  },
  {
    "content": "(\nProcess\n))\n# (3)\nassert\nlen\n(\nprocesses\n)\n==\n1\n# (4)\nInvoke the\nasset.purge_by_guid\nto delete the\nProcess\n.\nProvide the GUID of the process to be purged.\nCheck that a\nProcess\nwas purged.\nCheck that only 1\nProcess\nwas purged.\nRemove lineage between assets\n1\n2\n3\n4\nval\nresponse\n:\nAssetMutationResponse\n=\nAsset\n.\npurge\n(\nclient\n,\n\"b4113341-251b-4adc-81fb-2420501c30e6\"\n)\n// (1)\nval\ndeleted\n=\nresponse\n.\ndeletedAssets\n[\n0\n]\n// (2)\nval\nprocess\n=\nif\n(\ndeleted\nis\nLineageProcess\n)\ndeleted\nelse\nnull\n// (3)\nProvide the GUID for the process to the static\nAsset.purge()\nmethod. Because this operation will directly remove the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single process that was purged.\nIf you want to confirm the details, you'll need to type-check and then cast the generic\nAsset\nreturned into a\nProcess\n.\nDELETE /api/meta/entity/bulk?guid=6fa1f0d0-5720-4041-8243-c2a5628b68bf&deleteType=PURGE\n1\n// (1)\nAll of the details are in the request URL, there is no payload for a deletion. The GUID for the process itself (not any of its inputs or outputs) is what is listed in the URL.\nMore information",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 65
    }
  },
  {
    "content": "// (1)\nAll of the details are in the request URL, there is no payload for a deletion. The GUID for the process itself (not any of its inputs or outputs) is what is listed in the URL.\nMore information\nThis will irreversibly delete the process, and therefore the lineage it represented. The input and output assets themselves will also be updated, to no longer be linked to the (now non-existent) process. However, the input and output assets themselves will continue to exist in Atlan.\n2022-08-22\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_common-examples_lineage_manage.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_lineage_manage.json",
      "chunk_id": 66
    }
  }
]