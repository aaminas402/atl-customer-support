[
  {
    "content": "Manage asset descriptions - Developer\nSkip to content\nChange description\n¶\nThere are actually two descriptions per asset\nThere are actually two fields in Atlan that capture the description of an asset:\ndescription\nand\nuserDescription\n.\nIn the UI,\nuserDescription\nwill take precedence. This is the field that is updated when a user updates the description through the UI.\nWhen a system updates a description, it will populate the\ndescription\nfield. This field is only shown in the UI when the\nuserDescription\nfield is empty.\nThe examples below therefore all update the\ndescription\nfield, to allow a user to still override this value through the UI. If you want to actually override any users' descriptions, however, replace\ndescription\nin the examples below with\nuserDescription\n.\nChange an existing asset\n¶\nCould create a new asset\nRemember that Atlan matches the provided\nqualifiedName\nto determine whether to\nupdate or create the asset\n.\n2.0.0\n4.0.0\nTo change a description on an existing\nasset\n:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nChange description on existing asset\n1\n2\n3\n4\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\ndescription\n:\n>-\n# (2)\nMy new description",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 0
    }
  },
  {
    "content": "asset\n:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nChange description on existing asset\n1\n2\n3\n4\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\ndescription\n:\n>-\n# (2)\nMy new description\nYou must of course give the name of the object.\nYou just use the normal dbt\ndescription\nfield to provide a description — no need for the\nmeta\n.\natlan\n.\nattributes\nstructure.\nChange description on existing asset\n1\n2\n3\n4\n5\n6\n7\nTable\ntable\n=\nTable\n.\nupdater\n(\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (2)\n\"TOP_BEVERAGE_USERS\"\n)\n// (3)\n.\ndescription\n(\n\"My new description\"\n)\n// (4)\n.\nbuild\n();\n// (5)\nAssetMutationResponse\nresponse\n=\ntable\n.\nsave\n(\nclient\n);\n// (6)\nassert\nresponse\n.\ngetUpdatedAssets\n().\nsize\n()\n==\n1\n// (7)\nUse the\nupdater()\nhelper method to create the minimal object necessary to do an update.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nProvide the new description.\nBuild the updater into an object.\nSend the update to Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was updated.",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 1
    }
  },
  {
    "content": "provide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was updated.\nChange description on existing an asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.\ndescription\n=\n\"My new description\"\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nresponse\n.\nassets_updated\n(\nasset_type\n=\nTable\n))\n# (4)\nUse the\nupdater()\nmethod to create an asset suitable for modification i.e. with all the requisite attributes.\nProvide the new description.\nSend the update to Atlan.\nThe response should only include that single asset that was updated.\nChange description on existing asset\n1\n2\n3\n4\n5\n6\n7\nval\ntable\n=\nTable\n.\nupdater\n(\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (2)\n\"TOP_BEVERAGE_USERS\"\n)\n// (3)\n.\ndescription\n(\n\"My new description\"\n)\n// (4)\n.\nbuild\n()\n// (5)\nval\nresponse\n=\ntable\n.\nsave\n(\nclient\n)\n// (6)\nassert\n(\nresponse\n.\nupdatedAssets\n.",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 2
    }
  },
  {
    "content": ",\n// (2)\n\"TOP_BEVERAGE_USERS\"\n)\n// (3)\n.\ndescription\n(\n\"My new description\"\n)\n// (4)\n.\nbuild\n()\n// (5)\nval\nresponse\n=\ntable\n.\nsave\n(\nclient\n)\n// (6)\nassert\n(\nresponse\n.\nupdatedAssets\n.\nsize\n==\n1\n)\n// (7)\nUse the\nupdater()\nhelper method to create the minimal object necessary to do an update.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nProvide the new description.\nBuild the updater into an object.\nSend the update to Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was updated.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"description\"\n:\n\"My new description\"\n// (5)\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 3
    }
  },
  {
    "content": "You must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nProvide the new description.\nRemove from an existing asset\n¶\n2.0.0\n4.0.0\nTo remove a description from an existing asset:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nIt is currently not possible to\nremove\na description from an asset via dbt.\nRemove description from existing asset\n1\n2\n3\n4\nTable\ntable\n=\nTable\n.\nremoveDescription\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n);\n// (4)\nUse the\nremoveDescription()\nhelper method, which for most objects requires a minimal set of information. This helper method will construct the necessary request, call the necessary API(s), and return with the result of the removal operation all-in-one.\nBecause this operation will directly change the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nRemove description from an existing asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 4
    }
  },
  {
    "content": "of the object.\nThe\nname\nof the object.\nRemove description from an existing asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\n)\ntable\n.\ndescription\n=\nNone\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nresponse\n.\nassets_updated\n(\nasset_type\n=\nTable\n))\n# (4)\nUse the\nupdater()\nmethod to create an asset suitable for modification i.e. with all the requisite attributes.\nSet the description to\nNone\n.\nSend the update to Atlan.\nThe response should only include that single asset that was updated (again, removing owners is an update to the asset — we are not deleting the asset itself).\nRemove description from existing asset\n1\n2\n3\n4\nval\ntable\n=\nTable\n.\nremoveDescription\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n)\n// (4)\nUse the\nremoveDescription()",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 5
    }
  },
  {
    "content": "val\ntable\n=\nTable\n.\nremoveDescription\n(\n// (1)\nclient\n,\n// (2)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"TOP_BEVERAGE_USERS\"\n)\n// (4)\nUse the\nremoveDescription()\nhelper method, which for most objects requires a minimal set of information. This helper method will construct the necessary request, call the necessary API(s), and return with the result of the removal operation all-in-one.\nBecause this operation will directly change the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe\nqualifiedName\nof the object.\nThe\nname\nof the object.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"description\"\n:\nnull\n// (5)\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nYou must set the\ndescription",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 6
    }
  },
  {
    "content": "You must provide the exact name of the asset (case-sensitive).\nYou must provide the exact\nqualifiedName\nof the asset (case-sensitive).\nYou must set the\ndescription\nto\nnull\n.\nWhen creating an asset\n¶\n2.0.0\n4.0.0\nTo add a description when creating an asset:\ndbt\nJava\nPython\nKotlin\nRaw REST API\nAdd description when creating an asset\n1\n2\n3\n4\nmodels\n:\n-\nname\n:\nTOP_BEVERAGE_USERS\n# (1)\ndescription\n:\n>-\n# (2)\nMy description of the asset\nYou must of course give the name of the object.\nYou just use the normal dbt\ndescription\nfield to provide a description — no need for the\nmeta\n.\natlan\n.\nattributes\nstructure.\nAdd description when creating asset\n1\n2\n3\n4\n5\n6\n7\nTable\ntable\n=\nTable\n.\ncreator\n(\n\"TOP_BEVERAGE_USERS\"\n,\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n)\n.\ndescription\n(\n\"My description of the asset\"\n)\n// (2)\n.\nbuild\n();\n// (3)\nAssetMutationResponse\nresponse\n=\ntable\n.\nsave\n(\nclient\n);\n// (4)\nassert\nresponse\n.\ngetCreatedAssets\n().\nsize\n()\n==\n1\n// (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it (../advanced-examples/create.md#build-minimal-object-needed).\nSet the description that should be added.\nCall the\nbuild()",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 7
    }
  },
  {
    "content": "method to initialize the object with all necessary attributes for creating it (../advanced-examples/create.md#build-minimal-object-needed).\nSet the description that should be added.\nCall the\nbuild()\nmethod to build the enriched object.\nCall the\nsave()\nmethod to actually create the asset with this description. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was created.\nAdd description when creating asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nclient\n=\nAtlanClient\n()\ntable\n=\nTable\n.\ncreator\n(\n# (1)\nname\n=\n\"TOP_BEVERAGE_USERS\"\n,\nschema_qualified_name\n=\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n,\n)\ntable\n.\ndescription\n=\n\"My description of the asset\"\n# (2)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ntable\n)\n# (3)\nassert\n1\n==\nlen\n(\nassets_created\n:=\nresponse\n.\nassets_created\n(\nasset_type\n=\nTable\n))\n# (4)\ntable\n=\nassets_created\n[\n0\n]\n# (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it.\nSet the description.\nCall the\nsave()",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 8
    }
  },
  {
    "content": "(\nasset_type\n=\nTable\n))\n# (4)\ntable\n=\nassets_created\n[\n0\n]\n# (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it.\nSet the description.\nCall the\nsave()\nmethod to actually create the asset with these owners.\nSince a save can add, update, delete or partially update multiple assets the\nassets_created()\nmethod can be used to return a list of the assets of the specified type that were added. The assert statement is present to ensure a\nTable\nasset was created.\nSince only one\nTable\nhas been created we use an index of 0 to retrieve the newly created table.\nAdd description when creating asset\n1\n2\n3\n4\n5\n6\n7\nval\ntable\n=\nTable\n.\ncreator\n(\n\"TOP_BEVERAGE_USERS\"\n,\n// (1)\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n)\n.\ndescription\n(\n\"My description of the asset\"\n)\n// (2)\n.\nbuild\n()\n// (3)\nval\nresponse\n=\ntable\n.\nsave\n(\nclient\n)\n// (4)\nassert\n(\nresponse\n.\ncreatedAssets\n.\nsize\n==\n1\n)\n// (5)\nUse the\ncreator()\nmethod to initialize the object with all necessary attributes for creating it (../advanced-examples/create.md#build-minimal-object-needed).\nSet the description that should be added.\nCall the\nbuild()\nmethod to build the enriched object.",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 9
    }
  },
  {
    "content": "Set the description that should be added.\nCall the\nbuild()\nmethod to build the enriched object.\nCall the\nsave()\nmethod to actually create the asset with this description. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe response will include that single asset that was created.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Table\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"TOP_BEVERAGE_USERS\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV/TOP_BEVERAGE_USERS\"\n,\n// (4)\n\"atlanSchema\"\n:\n{\n// (5)\n\"typeName\"\n:\n\"Schema\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/snowflake/1657037873/SAMPLE_DB/FOOD_BEV\"\n}\n},\n\"description\"\n:\n\"My description of the asset\"\n// (6)\n}\n}\n]\n}\nAll assets must be wrapped in an\nentities\narray.\nYou must provide the exact type name for the asset (case-sensitive).\nYou must provide a name for the asset.\nIn the case of a table, the\nqualifiedName\nmust be the concatenation of the parent schema's qualifiedName and the name of the table.",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 10
    }
  },
  {
    "content": "You must provide a name for the asset.\nIn the case of a table, the\nqualifiedName\nmust be the concatenation of the parent schema's qualifiedName and the name of the table.\nWhen creating a table, you must specify the schema to create it within. This is defined by the\natlanSchema\nattribute. You must specify both the type (must be\nSchema\n) and qualifiedName of the schema within the\natlanSchema\nattribute — and the schema must already exist.\nProvide the description.\n2022-11-30\n2024-12-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_common-examples_descriptions.html",
      "source_type": "sdk",
      "file": "snippets_common-examples_descriptions.json",
      "chunk_id": 11
    }
  }
]