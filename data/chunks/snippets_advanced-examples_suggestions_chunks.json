[
  {
    "content": "Find and apply suggestions to an asset - Developer\nSkip to content\nFind and apply suggestions to an asset\nÂ¶\nAs a data team ourselves, we understand that metadata curation can be time-consuming.\nTo streamline this process, each time you fill in a metadata gap, Atlan looks\nfor opportunities to reuse that information.\nThis is where\ntrident suggestions ðŸ”±\ncome into play.\nIt provides metadata suggestions for similar assets.\nFor example: CUSTOMER (table)\nYou add the description\n\"Information about customers\"\nto a table called\nCUSTOMER\n.\nAtlan searches for other tables named\nCUSTOMER\nthat lack a description.\nAtlan then suggests\n\"Information about customers\"\nas the description for these other\nCUSTOMER\ntables.\nIn Atlan's SDK, you can use the\nSuggestions\nobject to\nfind and apply these recommendations to your assets.\nFind suggestions\nÂ¶\n2.3.3\n1.12.7\nFind suggestions for a given asset:\nJava\nPython\nKotlin\nFind suggestions for a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nTable\ntable\n=\nTable\n.\nget\n(\n\"default/snowflake/1720661835/db/schema/table\"\n);\n// (1)\nSuggestionResponse\nresponse\n=\nSuggestions\n.\nfinder\n(\ntable\n)\n// (2)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 0
    }
  },
  {
    "content": "(\n\"default/snowflake/1720661835/db/schema/table\"\n);\n// (1)\nSuggestionResponse\nresponse\n=\nSuggestions\n.\nfinder\n(\ntable\n)\n// (2)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUserDescription\n)\n.\nmaxSuggestions\n(\n5\n)\n.\nwithOtherType\n(\nView\n.\nTYPE_NAME\n)\n.\nincludeArchived\n(\nfalse\n)\n.\nget\n();\n// (3)\nassertNotNull\n(\nresponse\n);\n// (4)\nassertNotNull\n(\nresponse\n.\ngetOwnerGroups\n());\nassertNotNull\n(\nresponse\n.\ngetUserDescriptions\n());\nFirst, you need to retrieve the asset for which you want to find suggestions.\nStart by building a\nSuggestions\nrequest by chaining the following methods:\nfinder\n: specify the asset for which you want to find suggestions.\ninclude\n: add criteria to specify the types of suggestions\nto include in the search results. For this example, we're retrieving\nsuggestions for\nGroupOwners\nand\nUserDescription\n.\nWant to find suggestions for ALL types?\nTo include all suggestion types\n(\ndescription\n,\nowner\n,\ntags\n, and\nterms\n):\nSuggestions.includes(Arrays.asList(Suggestions.TYPE.values()))\nmaxSuggestions\n:\n(Optional)\nspecify the maximum\nnumber of suggestions to return. Defaults to\n5\n.\nincludeArchived\n:\n(Optional)\nspecify whether to include",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 1
    }
  },
  {
    "content": "maxSuggestions\n:\n(Optional)\nspecify the maximum\nnumber of suggestions to return. Defaults to\n5\n.\nincludeArchived\n:\n(Optional)\nspecify whether to include\narchived assets in the suggestions (\ntrue\n) or not (\nfalse\n). Defaults to\nfalse\n.\nwithOtherType\n:\n(Optional)\nadd a criterion\nto include another asset type in the suggestions.\nwithOtherType\nBy default, we will only look for suggestions on\nassets of the same type. You may want to expand this,\nfor example, by including\nView\n(s) when looking\nfor suggested metadata for\nTable\n(s).\nwhere\n:\n(Optional)\nadd a criterion that must be present\nin every search result. (\nNOTE:\nThese are translated to filters.)\nwhereNot\n:\n(Optional)\nadd a criterion\nthat must not be present in any search result.\nFinally, to retrieve the suggestions, call the\n.get()\nmethod.\nThe suggestion response contains a list of\nsuggestions for the requested types. You can access\nspecific suggestions by directly referencing the response attributes,\nsuch as\nresponse.getOwnerGroups()\nand\nresponse.getUserDescriptions()\n.\nFind suggestions for a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 2
    }
  },
  {
    "content": "and\nresponse.getUserDescriptions()\n.\nFind suggestions for a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.model.suggestions\nimport\nSuggestions\nclient\n=\nAtlanClient\n()\nasset\n=\nclient\n.\nasset\n.\nget_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1720661835/db/schema/table\"\n,\nasset_type\n=\nTable\n)\n# (1)\nresponse\n=\n(\nSuggestions\n()\n# (2)\n.\nfinder\n(\nasset\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGROUP_OWNERS\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUSER_DESCRIPTION\n)\n.\nmax_suggestion\n(\n5\n)\n.\nwith_other_type\n(\n\"View\"\n)\n.\ninclude_archive\n(\nFalse\n)\n.\nget\n(\nclient\n=\nclient\n)\n# (3)\n)\nassert\nresponse\n# (4)\nassert\nresponse\n.\nowner_groups\nand\nresponse\n.\nowner_groups\n[\n0\n]\nassert\nresponse\n.\nuser_descriptions\nand\nresponse\n.\nuser_descriptions\n[\n0\n]\nFirst, you need to retrieve the asset for which you want to find suggestions.\nStart by instantiating the\nSuggestions()\nobject.\nYou can then build a suggestion request by chaining the following methods:\nfinder\n: specify the asset for which you want to find suggestions.\ninclude\n: add criteria to specify the types of suggestions",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 3
    }
  },
  {
    "content": "finder\n: specify the asset for which you want to find suggestions.\ninclude\n: add criteria to specify the types of suggestions\nto include in the search results. For this example, we're retrieving\nsuggestions for\nGROUP_OWNERS\nand\nUSER_DESCRIPTION\n.\nWant to find suggestions for ALL types?\nTo include all suggestion types\n(\ndescription\n,\nowner\n,\ntags\n, and\nterms\n),\nyou can directly pass\nSuggestions.TYPE.all()\nto the\nSuggestions\n:\nSuggestions(includes=Suggestions.TYPE.all())\nmax_suggestion\n:\n(Optional)\nspecify the maximum\nnumber of suggestions to return. Defaults to\n5\n.\ninclude_archive\n:\n(Optional)\nspecify whether to include\narchived assets in the suggestions (\nTrue\n) or not (\nFalse\n). Defaults to\nFalse\n.\nwith_other_type\n:\n(Optional)\nadd a criterion\nto include another asset type in the suggestions.\nwith_other_type\nBy default, we will only look for suggestions on\nassets of the same type. You may want to expand this,\nfor example, by including\nView\n(s) when looking\nfor suggested metadata for\nTable\n(s).\nwhere\n:\n(Optional)\nadd a criterion that must be present\nin every search result. (\nNOTE:\nThese are translated to filters.)\nwhere_not\n:\n(Optional)\nadd a criterion",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 4
    }
  },
  {
    "content": "for suggested metadata for\nTable\n(s).\nwhere\n:\n(Optional)\nadd a criterion that must be present\nin every search result. (\nNOTE:\nThese are translated to filters.)\nwhere_not\n:\n(Optional)\nadd a criterion\nthat must not be present in any search result.\nFinally, to retrieve the suggestions, call the\n.get()\nmethod.\nThe suggestion response contains a list of\nsuggestions for the requested types. You can access\nspecific suggestions by directly referencing the response attributes,\nsuch as\nresponse.owner_groups\nand\nresponse.user_descriptions\n.\nFind suggestions for a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nvar\ntable\n=\nTable\n.\nget\n(\n\"default/snowflake/1720661835/db/schema/table\"\n);\n// (1)\nvar\nresponse\n=\nSuggestions\n.\nfinder\n(\ntable\n)\n// (2)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUserDescription\n)\n.\nmaxSuggestions\n(\n5\n)\n.\nwithOtherType\n(\nView\n.\nTYPE_NAME\n)\n.\nincludeArchived\n(\nfalse\n)\n.\nget\n();\n// (3)\nassertNotNull\n(\nresponse\n);\n// (4)\nassertNotNull\n(\nresponse\n.\ngetOwnerGroups\n());\nassertNotNull\n(\nresponse\n.\ngetUserDescriptions\n());\nFirst, you need to retrieve the asset for which you want to find suggestions.\nStart by building a\nSuggestions",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 5
    }
  },
  {
    "content": "(\nresponse\n.\ngetOwnerGroups\n());\nassertNotNull\n(\nresponse\n.\ngetUserDescriptions\n());\nFirst, you need to retrieve the asset for which you want to find suggestions.\nStart by building a\nSuggestions\nrequest by chaining the following methods:\nfinder\n: specify the asset for which you want to find suggestions.\ninclude\n: add criteria to specify the types of suggestions\nto include in the search results. For this example, we're retrieving\nsuggestions for\nGroupOwners\nand\nUserDescription\n.\nWant to find suggestions for ALL types?\nTo include all suggestion types\n(\ndescription\n,\nowner\n,\ntags\n, and\nterms\n):\nSuggestions.includes(Suggestions.TYPE.values().toList())\nmaxSuggestions\n:\n(Optional)\nspecify the maximum\nnumber of suggestions to return. Defaults to\n5\n.\nincludeArchived\n:\n(Optional)\nspecify whether to include\narchived assets in the suggestions (\ntrue\n) or not (\nfalse\n). Defaults to\nfalse\n.\nwithOtherType\n:\n(Optional)\nadd a criterion\nto include another asset type in the suggestions.\nwithOtherType\nBy default, we will only look for suggestions on\nassets of the same type. You may want to expand this,\nfor example, by including\nView\n(s) when looking\nfor suggested metadata for\nTable\n(s).\nwhere\n:",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 6
    }
  },
  {
    "content": "By default, we will only look for suggestions on\nassets of the same type. You may want to expand this,\nfor example, by including\nView\n(s) when looking\nfor suggested metadata for\nTable\n(s).\nwhere\n:\n(Optional)\nadd a criterion that must be present\nin every search result. (\nNOTE:\nThese are translated to filters.)\nwhereNot\n:\n(Optional)\nadd a criterion\nthat must not be present in any search result.\nFinally, to retrieve the suggestions, call the\n.get()\nmethod.\nThe suggestion response contains a list of\nsuggestions for the requested types. You can access\nspecific suggestions by directly referencing the response attributes,\nsuch as\nresponse.getOwnerGroups()\nand\nresponse.getUserDescriptions()\n.\nApply suggestions\nÂ¶\n7.0.0\n1.12.7\nApply suggestions to a given asset:\nJava\nPython\nKotlin\nApply suggestions to a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nTable\ntable\n=\nTable\n.\nget\n(\n\"default/snowflake/1720661835/db/schema/table\"\n);\n// (1)\nSuggestionResponse\nresponse\n=\nSuggestions\n.\nfinder\n(\ntable\n)\n// (2)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUserDescription\n)\n.\nmaxSuggestions\n(\n5\n)\n.\nwithOtherType\n(\nView\n.\nTYPE_NAME\n)\n.\nincludeArchived\n(\nfalse\n)\n.\napply\n(",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 7
    }
  },
  {
    "content": ".\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUserDescription\n)\n.\nmaxSuggestions\n(\n5\n)\n.\nwithOtherType\n(\nView\n.\nTYPE_NAME\n)\n.\nincludeArchived\n(\nfalse\n)\n.\napply\n(\ntrue\n);\n// (3)\nassertNotNull\n(\nresponse\n);\n// (4)\nassertNotNull\n(\nresponse\n.\ngetUpdatedAssets\n())\nFirst, retrieve the asset for which you want to apply suggestions.\nStart by building\nSuggestions\nrequest in the same\nway as described in\nFind suggestions section\n,\nsince here we first find the suggestions and then apply them.\nTo apply the suggestions, call the\n.apply()\nmethod.\nOptionally, you can set\nallowMultiple\nto\ntrue\nto allow\nmultiple suggestions to be applied to the asset (up to the\nmaxSuggestions\nrequested), such as for\nowners\n,\nterms\n, and\ntags\n.\nThe\nAssetMutationResponse\nwill contain the updated asset entities.\nApply suggestions to a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.model.suggestions\nimport\nSuggestions\nclient\n=\nAtlanClient\n()\nasset\n=\nclient\n.\nasset\n.\nget_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1720661835/db/schema/table\"\n,",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 8
    }
  },
  {
    "content": "Table\nfrom\npyatlan.model.suggestions\nimport\nSuggestions\nclient\n=\nAtlanClient\n()\nasset\n=\nclient\n.\nasset\n.\nget_by_qualified_name\n(\nqualified_name\n=\n\"default/snowflake/1720661835/db/schema/table\"\n,\nasset_type\n=\nTable\n)\n# (1)\nresponse\n=\n(\nSuggestions\n()\n# (2)\n.\nfinder\n(\nasset\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGROUP_OWNERS\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUSER_DESCRIPTION\n)\n.\nmax_suggestion\n(\n5\n)\n.\nwith_other_type\n(\n\"View\"\n)\n.\ninclude_archive\n(\nFalse\n)\n.\napply\n(\nclient\n=\nclient\n,\nallow_multiple\n=\nTrue\n)\n# (3)\n)\nassert\nresponse\nand\nresponse\n.\nmutated_entities\n# (4)\nassert\nresponse\n.\nmutated_entities\n.\nUPDATE\nassert\nresponse\n.\nmutated_entities\n.\nUPDATE\n[\n0\n]\nFirst, retrieve the asset for which you want to apply suggestions.\nStart by instantiating the\nSuggestions()\nobject.\nYou can then build a suggestion request in the same\nway as described in\nFind suggestions section\n,\nsince here we first find the suggestions and then apply them.\nTo apply the suggestions, call the\n.apply()\nmethod.\nOptionally, you can set\nallow_multiple\nto\nTrue\nto allow\nmultiple suggestions to be applied to the asset (up to the\nmax_suggestions\nrequested), such as for\nowners\n,\nterms\n, and\ntags\n.\nThe",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 9
    }
  },
  {
    "content": "method.\nOptionally, you can set\nallow_multiple\nto\nTrue\nto allow\nmultiple suggestions to be applied to the asset (up to the\nmax_suggestions\nrequested), such as for\nowners\n,\nterms\n, and\ntags\n.\nThe\nAssetMutationResponse\nwill contain the mutated asset entities.\nApply suggestions to a given asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nvar\ntable\n=\nTable\n.\nget\n(\n\"default/snowflake/1720661835/db/schema/table\"\n);\n// (1)\nvar\nresponse\n=\nSuggestions\n.\nfinder\n(\ntable\n)\n// (2)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nGroupOwners\n)\n.\ninclude\n(\nSuggestions\n.\nTYPE\n.\nUserDescription\n)\n.\nmaxSuggestions\n(\n5\n)\n.\nwithOtherType\n(\nView\n.\nTYPE_NAME\n)\n.\nincludeArchived\n(\nfalse\n)\n.\napply\n(\ntrue\n);\n// (3)\nassertNotNull\n(\nresponse\n);\n// (4)\nassertNotNull\n(\nresponse\n.\ngetUpdatedAssets\n())\nFirst, retrieve the asset for which you want to apply suggestions.\nStart by building\nSuggestions\nrequest in the same\nway as described in\nFind suggestions section\n,\nsince here we first find the suggestions and then apply them.\nTo apply the suggestions, call the\n.apply()\nmethod.\nOptionally, you can set\nallowMultiple\nto\ntrue\nto allow\nmultiple suggestions to be applied to the asset (up to the\nmaxSuggestions\nrequested), such as for\nowners\n,",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 10
    }
  },
  {
    "content": ".apply()\nmethod.\nOptionally, you can set\nallowMultiple\nto\ntrue\nto allow\nmultiple suggestions to be applied to the asset (up to the\nmaxSuggestions\nrequested), such as for\nowners\n,\nterms\n, and\ntags\n.\nThe\nAssetMutationResponse\nwill contain the updated asset entities.\n2024-07-22\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
    "metadata": {
      "source_url": "snippets_advanced-examples_suggestions.html",
      "source_type": "sdk",
      "file": "snippets_advanced-examples_suggestions.json",
      "chunk_id": 11
    }
  }
]