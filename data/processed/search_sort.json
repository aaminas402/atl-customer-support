{
  "source_url": "search_sort.html",
  "text": "Sorting search results - Developer\nSkip to content\nSorting search results\nÂ¶\n1.4.0\n4.0.0\nYou can sort search results by one or multiple properties.\nLimited to iterating through less than 100,000 results\nYou can sort any number of results; however, if you plan to\npage\nthrough more than 100,000 total results you cannot specify any sort order.\nJava\nPython\nKotlin\nRaw REST API\nAnnotated sort options, as you would define them in the Java SDK\n1\n2\nSortOptions\nbyUpdate\n=\nAsset\n.\nUPDATE_TIME\n.\norder\n(\nSortOrder\n.\nDesc\n);\n// (1)\nSortOptions\nbyCreation\n=\nAsset\n.\nCREATE_TIME\n.\norder\n(\nSortOrder\n.\nAsc\n);\n// (2)\nFor each property you can specify whether to sort the results in\ndesc\nending order or\nasc\nending order. In this example our first results would be the ones changed most recently.\nEquivalent sort option from Elastic\nSortOptions\nbyUpdate\n=\nSortOptions\n.\nof\n(\ns\n->\ns\n.\nfield\n(\nFieldSort\n.\nof\n(\nf\n->\nf\n// (1)\n.\nfield\n(\n\"__modificationTimestamp\"\n)\n.\norder\n(\nSortOrder\n.\nDesc\n))));\nIn this example, our first results would be the oldest ones (based on when they were created).\nEquivalent sort option from Elastic\nSortOptions\nbyCreation\n=\nSortOptions\n.\nof\n(\ns\n->\ns\n.\nfield\n(\nFieldSort\n.\nof\n(\nf\n->\nf\n// (2)\n.\nfield\n(\n\"__timestamp\"\n)\n.\norder\n(\nSortOrder\n.\nAsc\n))));\nBuild the request\n3\n4\n5\n6\n7\nIndexSearchRequest\nindex\n=\nclient\n.\nassets\n.\nselect\n()\n.\nwhere\n(...)\n// (1)\n.\nsort\n(\nbyUpdate\n)\n// (2)\n.\nsort\n(\nbyCreation\n)\n// (3)\n.\ntoRequest\n();\nYou still need a query, to get some results to sort.\nNote that the sort itself is an array â€” hence we can add multiple sort options and they'll be evaluated in order (to sort by multiple properties). In this example our first results would be the ones changed most recently.\nFor any results that have identical modification dates, we would then sort within those results to present the oldest (created) results first.\nRun the search\n8\n9\n10\n11\nIndexSearchResponse\nresponse\n=\nindex\n.\nsearch\n(\nclient\n);\nfor\n(\nAsset\nresult\n:\nresponse\n)\n{\n// Do something with the ordered results...\n}\nAnnotated sort options, as you would define them in the Python SDK\n1\n2\n3\n4\n5\n6\n7\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nSortOrder\nfrom\npyatlan.model.assets\nimport\nReferenceable\nfrom\npyatlan.model.search\nimport\nIndexSearchRequest\n,\nDSL\nby_update\n=\nReferenceable\n.\nUPDATE_TIME\n.\norder\n(\nSortOrder\n.\nDESCENDING\n)\n# (1)\nby_creation\n=\nReferenceable\n.\nCREATE_TIME\n.\norder\n(\nSortOrder\n.\nASCENDING\n)\n# (2)\nFor each property you can specify whether to sort the results in descending order or ascending order. In this example our first results would be the ones changed most recently.\nIn this example, our first results would be the oldest ones (based on when they were created).\nBuild the request\n8\n9\n10\n11\n12\n13\nindex\n=\n(\nFluentSearch\n()\n.\nwhere\n(\n...\n)\n# (1)\n.\nsort\n(\nby_update\n)\n# (2)\n.\nsort\n(\nby_creation\n)\n# (3)\n)\n.\nto_request\n()\nYou still need a query, to get some results to sort.\nNote that the sort itself is an array â€” hence we can add multiple sort options and they'll be evaluated in order (to sort by multiple properties). In this example our first results would be the ones changed most recently.\nFor any results that have identical modification dates, we would then sort within those results to present the oldest (created) results first.\nRun the search\n14\n15\n16\n17\nclient\n=\nAtlanClient\n();\nresponse\n=\nclient\n.\nasset\n.\nsearch\n(\nindex\n)\nfor\nresult\nin\nresponse\n:\n# Do something with the ordered results...\nAnnotated sort options, as you would define them in the Java SDK\n1\n2\nval\nbyUpdate\n=\nAsset\n.\nUPDATE_TIME\n.\norder\n(\nSortOrder\n.\nDesc\n)\n// (1)\nval\nbyCreation\n=\nAsset\n.\nCREATE_TIME\n.\norder\n(\nSortOrder\n.\nAsc\n)\n// (2)\nFor each property you can specify whether to sort the results in\ndesc\nending order or\nasc\nending order. In this example our first results would be the ones changed most recently.\nEquivalent sort option from Elastic\nval\nbyUpdate\n=\nSortOptions\n.\nof\n(\ns\n->\ns\n.\nfield\n(\nFieldSort\n.\nof\n(\nf\n->\nf\n// (1)\n.\nfield\n(\n\"__modificationTimestamp\"\n)\n.\norder\n(\nSortOrder\n.\nDesc\n))))\nIn this example, our first results would be the oldest ones (based on when they were created).\nEquivalent sort option from Elastic\nval\nbyCreation\n=\nSortOptions\n.\nof\n(\ns\n->\ns\n.\nfield\n(\nFieldSort\n.\nof\n(\nf\n->\nf\n// (2)\n.\nfield\n(\n\"__timestamp\"\n)\n.\norder\n(\nSortOrder\n.\nAsc\n))))\nBuild the request\n3\n4\n5\n6\n7\nval\nindex\n=\nclient\n.\nassets\n.\nselect\n()\n.\nwhere\n(...)\n// (1)\n.\nsort\n(\nbyUpdate\n)\n// (2)\n.\nsort\n(\nbyCreation\n)\n// (3)\n.\ntoRequest\n()\nYou still need a query, to get some results to sort.\nNote that the sort itself is an array â€” hence we can add multiple sort options and they'll be evaluated in order (to sort by multiple properties). In this example our first results would be the ones changed most recently.\nFor any results that have identical modification dates, we would then sort within those results to present the oldest (created) results first.\nRun the search\n8\n9\n10\n11\nval\nresponse\n=\nindex\n.\nsearch\n(\nclient\n)\nfor\n(\nresult\nin\nresponse\n)\n{\n// Do something with the ordered results...\n}\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n{\n\"dsl\"\n:\n{\n\"query\"\n:\n{\n...\n},\n// (1)\n\"sort\"\n:\n[\n// (2)\n{\n\"__modificationTimestamp\"\n:\n{\n\"order\"\n:\n\"desc\"\n}},\n// (3)\n{\n\"__timestamp\"\n:\n{\n\"order\"\n:\n\"asc\"\n}}\n// (4)\n]\n}\n}\nYou still need a query, to get some results to sort.\nNote that the sort itself is an array â€” hence you can sort by multiple properties.\nFor each property you can specify whether to sort the results in\ndesc\nending order or\nasc\nending order. In this example our first results would be the ones changed most recently.\nFor any results that have identical modification dates, we would then sort within those results to present the oldest (created) results first.\nSee Elastic's documentation for more details\nThe examples above should cover most scenarios. If you want to get fancy, see\nElastic's documentation on sorting\n.\n2022-09-08\n2025-01-16\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}