{
  "source_url": "snippets_custom-metadata_badge.html",
  "text": "Manage custom metadata badges - Developer\nSkip to content\nManage custom metadata badges\n¶\nYou can use\nbadges\nin Atlan to provide quick indicators of key signals from custom metadata. They appear in the Overview of the asset, rather than nested within the custom metadata tab.\nBadges are a kind of asset\nBadges are actually modeled as just another kind of asset in Atlan. This means all the standard\nCRUD operations\napply to badges the same as any other asset.\nCreate a badge\n¶\n7.0.0\n4.0.0\nFor example, to create a badge for custom metadata capturing a count of data quality checks that have run:\nJava\nPython\nKotlin\nRaw REST API\nBuild a badge\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nBadge\nbadge\n=\nBadge\n.\ncreator\n(\nclient\n,\n// (1)\n\"DQ Count\"\n,\n// (2)\n\"Data Quality\"\n,\n// (3)\n\"Count\"\n)\n// (4)\n.\nuserDescription\n(\n\"How many data quality checks ran against this asset.\"\n)\n// (5)\n.\nbadgeCondition\n(\n// (6)\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nGTE\n,\n// (7)\n5\n,\n// (8)\nBadgeConditionColor\n.\nGREEN\n))\n// (9)\n.\nbadgeCondition\n(\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nLT\n,\n5\n,\nBadgeConditionColor\n.\nYELLOW\n))\n.\nbadgeCondition\n(\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nLTE\n,\n2\n,\nBadgeConditionColor\n.\nRED\n))\n.\nbuild\n();\n// (10)\nAssetMutationResponse\nresponse\n=\nbadge\n.\nsave\n(\nclient\n);\n// (11)\nLike with any other asset, use the\ncreator()\nmethod to ensure you provide the minimal information required to create a badge. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou must provide a name for the badge.\nYou must specify the name of the custom metadata set the badge will summarize.\nYou must provide the name of the custom metadata property within that set the badge will represent.\nYou can optionally provide other details about the badge, like with any other asset. In this example we provide a description for the badge.\nYou can then specify any number of conditions to represent in the badge.\nEach condition is comprised of an operator (standard mathematical comparisons),\n...a value against which to compare the asset's value for the property,\n...and the color to apply to the badge if the asset's value for the property matches the value (as compared through the operator). This can be one of the predefined colors, or any RGB-based hex value for a custom color.\nAs with all other builder patterns, you must\nbuild()\nthe object you've defined.\nThe\nsave()\noperation will actually create the badge within Atlan, including its conditions. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nBuild a badge\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nBadge\nfrom\npyatlan.model.enums\nimport\nBadgeConditionColor\n,\nBadgeComparisonOperator\nfrom\npyatlan.model.structs\nimport\nBadgeCondition\nclient\n=\nAtlanClient\n()\nbadge\n=\nBadge\n.\ncreator\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"DQ Count\"\n,\n# (3)\ncm_name\n=\n\"Data Quality\"\n,\n# (4)\ncm_attribute\n=\n\"count\"\n,\n# (5)\nbadge_conditions\n=\n[\n# (6)\nBadgeCondition\n.\ncreate\n(\n# (7)\nbadge_condition_operator\n=\nBadgeComparisonOperator\n.\nGTE\n,\n# (8)\nbadge_condition_value\n=\n\"5\"\n,\n# (9)\nbadge_condition_colorhex\n=\nBadgeConditionColor\n.\nGREEN\n,\n# (10)\n),\nBadgeCondition\n.\ncreate\n(\nbadge_condition_operator\n=\nBadgeComparisonOperator\n.\nLT\n,\nbadge_condition_value\n=\n\"5\"\n,\nbadge_condition_colorhex\n=\nBadgeConditionColor\n.\nYELLOW\n,\n),\nBadgeCondition\n.\ncreate\n(\nbadge_condition_operator\n=\nBadgeComparisonOperator\n.\nLTE\n,\nbadge_condition_value\n=\n\"2\"\n,\nbadge_condition_colorhex\n=\nBadgeConditionColor\n.\nRED\n,\n),\n],\n)\nbadge\n.\nuser_description\n=\n\"How many data quality checks ran against this asset.\"\n# (11)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nbadge\n)\n# (12)\nassert\n(\nassets\n:=\nresponse\n.\nassets_created\n(\nasset_type\n=\nBadge\n)\n# (13)\nLike with any other asset, use the\ncreate()\nmethod to ensure you provide the minimal information required to create a badge.\nYou must provide a client instance.\nYou must provide a name for the badge.\nYou must specify the name of the custom metadata set the badge will summarize.\nYou must provide the name of the custom metadata property within that set the badge will represent.\nProperty is renamed\nThe property names used have been converted to the standard python form, i.e. lowercase with spaces replaced with an underscore.\nYou can then specify any number of conditions to represent in the badge.\nUse the 'create()' method to provide the information needed to create the\nBadgeCondition\n.\nEach condition is comprised of an operator (standard mathematical comparisons),\n...a value against which to compare the asset's value for the property,\n...and the color to apply to the badge if the asset's value for the property matches the value (as compared through the operator). This can be one of the predefined colors, or any RGB-based hex value for a custom color.\nYou can optionally provide other details about the badge, like with any other asset. In this example we provide a description for the badge.\nThe\nsave()\noperation will actually create the badge within Atlan, including its conditions.\nCheck that the\nBadge\nwas created.\nBuild a badge\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nval\nbadge\n=\nBadge\n.\ncreator\n(\nclient\n,\n// (1)\n\"DQ Count\"\n,\n// (2)\n\"Data Quality\"\n,\n// (3)\n\"Count\"\n)\n// (4)\n.\nuserDescription\n(\n\"How many data quality checks ran against this asset.\"\n)\n// (5)\n.\nbadgeCondition\n(\n// (6)\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nGTE\n,\n// (7)\n5\n,\n// (8)\nBadgeConditionColor\n.\nGREEN\n))\n// (9)\n.\nbadgeCondition\n(\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nLT\n,\n5\n,\nBadgeConditionColor\n.\nYELLOW\n))\n.\nbadgeCondition\n(\nBadgeCondition\n.\nof\n(\nBadgeComparisonOperator\n.\nLTE\n,\n2\n,\nBadgeConditionColor\n.\nRED\n))\n.\nbuild\n()\n// (10)\nval\nresponse\n=\nbadge\n.\nsave\n(\nclient\n)\n// (11)\nLike with any other asset, use the\ncreator()\nmethod to ensure you provide the minimal information required to create a badge. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou must provide a name for the badge.\nYou must specify the name of the custom metadata set the badge will summarize.\nYou must provide the name of the custom metadata property within that set the badge will represent.\nYou can optionally provide other details about the badge, like with any other asset. In this example we provide a description for the badge.\nYou can then specify any number of conditions to represent in the badge.\nEach condition is comprised of an operator (standard mathematical comparisons),\n...a value against which to compare the asset's value for the property,\n...and the color to apply to the badge if the asset's value for the property matches the value (as compared through the operator). This can be one of the predefined colors, or any RGB-based hex value for a custom color.\nAs with all other builder patterns, you must\nbuild()\nthe object you've defined.\nThe\nsave()\noperation will actually create the badge within Atlan, including its conditions. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Badge\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Count\"\n,\n// (3)\n\"badgeMetadataAttribute\"\n:\n\"gA1HGY8JClmG8wXxC9i4EX.NYcrFDTHGVpBKHv0Ihk8xC\"\n,\n// (4)\n\"qualifiedName\"\n:\n\"badges/global/gA1HGY8JClmG8wXxC9i4EX.NYcrFDTHGVpBKHv0Ihk8xC\"\n,\n// (5)\n\"userDescription\"\n:\n\"How many data quality checks ran against this asset.\"\n,\n// (6)\n\"badgeConditions\"\n:\n[\n// (7)\n{\n\"badgeConditionOperator\"\n:\n\"gte\"\n,\n// (8)\n\"badgeConditionValue\"\n:\n\"5\"\n,\n// (9)\n\"badgeConditionColorhex\"\n:\n\"#047960\"\n// (10)\n},\n{\n\"badgeConditionOperator\"\n:\n\"lt\"\n,\n\"badgeConditionValue\"\n:\n\"5\"\n,\n\"badgeConditionColorhex\"\n:\n\"#F7B43D\"\n},\n{\n\"badgeConditionOperator\"\n:\n\"lte\"\n,\n\"badgeConditionValue\"\n:\n\"2\"\n,\n\"badgeConditionColorhex\"\n:\n\"#BF1B1B\"\n}\n]\n}\n}\n]\n}\nLike with any other asset, define the badge within an\nentities\narray.\nYou must use the exact value\nBadge\nas the\ntypeName\nfor a badge.\nYou must provide a name for the badge.\nYou must specify the full name of the custom metadata property (its set and property name). These must also use\nAtlan's internal hashed-string representation\n.\nYou must provide a\nqualifiedName\nfor the badge that uses the format:\nbadges/global/<custom-metadata-property>\n, where `\nis the full name of the custom metadata property (using\nAtlan's internal hashed-string representation\n).\nYou can optionally provide other details about the badge, like with any other asset. In this example we provide a description for the badge.\nYou can then specify any number of conditions to represent in the badge.\nEach condition is comprised of an operator (standard mathematical comparisons),\n...a value against which to compare the asset's value for the property,\nMust be a string in the JSON\nThe value you provide must always be a string in JSON. For actual string values (for text fields and options fields), you must further wrap the string itself in double-quotes.\n...and the color to apply to the badge if the asset's value for the property matches the value (as compared through the operator). This should be an RGB-based hex value. (The colors given in this example are the standard green, amber, red used in the UI.)\nNow that the badge has been created, any assets with a\nvalue set for the custom metadata\nwill show the badge on its overview tab.\nDelete a badge\n¶\n1.4.0\n4.0.0\nYou can delete a badge at any time using:\nJava\nPython\nKotlin\nRaw REST API\nDelete a badge\n1\nAssetDeletionResponse\nresponse\n=\nBadge\n.\npurge\n(\nclient\n,\n\"1c932bbb-fbe6-4bbc-9d0d-3df2f1fa4f81\"\n);\n// (1)\nThe\npurge()\noperation will permanently delete the badge, given the GUID of the badge. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a badge\n1\nresponse\n=\nclient\n.\nasset\n.\npurge_by_guid\n(\n\"1c932bbb-fbe6-4bbc-9d0d-3df2f1fa4f81\"\n)\n# (1)\nThe\nasset.purge_by_guid()\noperation will permanently delete the badge, given the GUID of the badge.\nDelete a badge\n1\nval\nresponse\n=\nBadge\n.\npurge\n(\nclient\n,\n\"1c932bbb-fbe6-4bbc-9d0d-3df2f1fa4f81\"\n)\n// (1)\nThe\npurge()\noperation will permanently delete the badge, given the GUID of the badge. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDELETE /api/meta/entity/bulk?guid=1c932bbb-fbe6-4bbc-9d0d-3df2f1fa4f81&deleteType=PURGE\n1\n// (1)\nAll information needed to permanently delete the badge is provided in the URL (in particular the GUID of the badge).\nNow that the badge has been deleted, no assets will show it on their overview tab.\n2023-05-10\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}