{
  "source_url": "snippets_access_events.html",
  "text": "Retrieve access events - Developer\nSkip to content\nRetrieve access events\n¶\nAll events\n¶\n1.3.3\n4.0.0\nYou can retrieve and filter all access-related events using:\nJava\nPython\nKotlin\nRaw REST API\nFilter all events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nclient\n// (1)\n.\nlogs\n// (2)\n.\ngetEvents\n(\nKeycloakEventRequest\n.\nbuilder\n()\n// (3)\n.\ndateFrom\n(\n\"2023-01-01\"\n)\n// (4)\n.\ndateTo\n(\n\"2023-01-31\"\n)\n// (5)\n.\ntype\n(\nKeycloakEventType\n.\nLOGIN\n)\n// (6)\n.\ntype\n(\nKeycloakEventType\n.\nLOGOUT\n)\n.\nbuild\n())\n.\nstream\n()\n// (7)\n.\nlimit\n(\n1000\n)\n// (8)\n.\nforEach\n(\nevent\n->\n{\n// (9)\n// Do something with each event\n});\nFrom a client...\n... access the\nlogs\nendpoints.\nThe\ngetEvents()\nmethod allows you to filter across all access events that are logged.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more types of events, for example focusing only on logins and logouts.\nLike other paginated resources, you can iterate or stream the results. The access events will be lazily-fetched from Atlan.\nWhen streaming, you can apply any additional constraints such as limiting or further filtering.\nAnd of course, you can then actually do something with each event.\nFilter all events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nfrom\npyatlan.model.enums\nimport\nKeycloakEventType\nfrom\npyatlan.model.keycloak_events\nimport\nKeycloakEventRequest\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nrequest\n=\nKeycloakEventRequest\n(\n# (1)\ndate_from\n=\n\"2023-01-01\"\n,\n# (2)\ndate_to\n=\n\"2023-01-31\"\n,\n# (3)\ntypes\n=\n[\nKeycloakEventType\n.\nLOGIN\n,\nKeycloakEventType\n.\nLOGOUT\n]\n# (4)\n)\nclient\n=\nAtlanClient\n()\nevents\n=\nclient\n.\nadmin\n.\nget_keycloak_events\n(\nrequest\n)\n# (5)\nfor\nevent\nin\nevents\n:\n# (6)\n# Do something with each event\nBegin by defining your filter criteria in a\nKeycloakEventRequest\n.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more types of events, for example focusing only on logins and logouts.\nFrom a client, call the\nadmin.get_keycloak_events()\nmethod with your requested filters.\nLike other paginated resources, you can iterate directly through the results. The access events will be lazily-fetched from Atlan.\nFilter all events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nclient\n// (1)\n.\nlogs\n// (2)\n.\ngetEvents\n(\nKeycloakEventRequest\n.\nbuilder\n()\n// (3)\n.\ndateFrom\n(\n\"2023-01-01\"\n)\n// (4)\n.\ndateTo\n(\n\"2023-01-31\"\n)\n// (5)\n.\ntype\n(\nKeycloakEventType\n.\nLOGIN\n)\n// (6)\n.\ntype\n(\nKeycloakEventType\n.\nLOGOUT\n)\n.\nbuild\n())\n.\nstream\n()\n// (7)\n.\nlimit\n(\n1000\n)\n// (8)\n.\nforEach\n{\n// (9)\n// Do something with each event\n}\nFrom a client...\n... access the\nlogs\nendpoints.\nThe\ngetEvents()\nmethod allows you to filter across all access events that are logged.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more types of events, for example focusing only on logins and logouts.\nLike other paginated resources, you can iterate or stream the results. The access events will be lazily-fetched from Atlan.\nWhen streaming, you can apply any additional constraints such as limiting or further filtering.\nAnd of course, you can then actually do something with each event.\nGET /api/service/events/login?dateFrom=2023-01-01&dateTo=2023-01-31&type=LOGIN&type=LOGOUT\n1\n// (1)!\nAll parameters for filtering the logs are query parameters sent in the URL itself.\nCommon event types\nSome of the common event types you might want to filter on include:\nType\nMeaning\nLOGIN\nUser has logged in.\nLOGOUT\nUser has logged out.\nREGISTER\nUser has registered.\nUPDATE_EMAIL\nEmail address for an account has changed.\nUPDATE_PASSWORD\nPassword for an account has changed.\nSEND_VERIFY_EMAIL\nVerification email has been sent.\nVERIFY_EMAIL\nEmail address for an account has been verified.\nSEND_RESET_PASSWORD\nPassword reset email has been sent.\nRESET_PASSWORD\nPassword for the account has been reset.\nCODE_TO_TOKEN\nApplication / client has exchanged a code for a token.\nREFRESH_TOKEN\nApplication / client has refreshed a token.\nAdmin events\n¶\n1.3.3\n4.0.0\nYou can retrieve and filter administrative events using:\nJava\nPython\nKotlin\nRaw REST API\nFilter admin events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nclient\n// (1)\n.\nlogs\n// (2)\n.\ngetAdminEvents\n(\nAdminEventRequest\n.\nbuilder\n()\n// (3)\n.\ndateFrom\n(\n\"2023-01-01\"\n)\n// (4)\n.\ndateTo\n(\n\"2023-01-31\"\n)\n// (5)\n.\noperationType\n(\nAdminOperationType\n.\nCREATE\n)\n// (6)\n.\noperationType\n(\nAdminOperationType\n.\nUPDATE\n)\n.\nresourceType\n(\nAdminResourceType\n.\nREALM_ROLE\n)\n// (7)\n.\nresourceType\n(\nAdminResourceType\n.\nREALM_ROLE_MAPPING\n)\n.\nresourcePath\n(\n\"roles/connection_admins_e71551e0-7f59-44bb-989c-e434f2e5bcae\"\n)\n// (8)\n.\nbuild\n())\n.\nstream\n()\n// (9)\n.\nlimit\n(\n1000\n)\n// (10)\n.\nforEach\n(\nevent\n->\n{\n// (11)\n// Do something with each event\n});\nFrom a client...\n... access the\nlogs\nendpoints.\nThe\ngetAdminEvents()\nmethod allows you to filter across all admin events that are logged.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more operations, for example focusing only on creation and updates.\n(Optional) You can filter by one or more resource types, for example only new roles or mappings to roles.\n(Optional) You can filter by a specific resource, such as the role associated with all admins for a specific connection in Atlan.\nLike other paginated resources, you can iterate or stream the results. The access events will be lazily-fetched from Atlan.\nWhen streaming, you can apply any additional constraints such as limiting or further filtering.\nAnd of course, you can then actually do something with each event.\nFilter admin events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nfrom\npyatlan.model.enums\nimport\nAdminOperationType\n,\nAdminResourceType\nfrom\npyatlan.model.keycloak_events\nimport\nAdminEventRequest\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nrequest\n=\nAdminEventRequest\n(\n# (1)\ndate_from\n=\n\"2023-01-01\"\n,\n# (2)\ndate_to\n=\n\"2023-01-31\"\n,\n# (3)\noperation_types\n=\n[\nAdminOperationType\n.\nCREATE\n,\nAdminOperationType\n.\nUPDATE\n],\n# (4)\nresource_types\n=\n[\nAdminResourceType\n.\nREALM_ROLE\n,\nAdminResourceType\n.\nREALM_ROLE_MAPPING\n],\n# (5)\nresource_path\n=\n\"roles/connection_admins_e71551e0-7f59-44bb-989c-e434f2e5bcae\"\n# (6)\n)\nclient\n=\nAtlanClient\n()\nevents\n=\nclient\n.\nadmin\n.\nget_admin_events\n(\nrequest\n)\n# (7)\nfor\nevent\nin\nevents\n:\n# (8)\n# Do something with each event\nBegin by defining your filter criteria in a\nAdminEventRequest\n.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more operations, for example focusing only on creation and updates.\n(Optional) You can filter by one or more resource types, for example only new roles or mappings to roles.\n(Optional) You can filter by a specific resource, such as the role associated with all admins for a specific connection in Atlan.\nFrom a client, call the\nadmin.get_admin_events()\nmethod with your requested filters.\nLike other paginated resources, you can iterate directly through the results. The access events will be lazily-fetched from Atlan.\nFilter admin events\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nclient\n// (1)\n.\nlogs\n// (2)\n.\ngetAdminEvents\n(\nAdminEventRequest\n.\nbuilder\n()\n// (3)\n.\ndateFrom\n(\n\"2023-01-01\"\n)\n// (4)\n.\ndateTo\n(\n\"2023-01-31\"\n)\n// (5)\n.\noperationType\n(\nAdminOperationType\n.\nCREATE\n)\n// (6)\n.\noperationType\n(\nAdminOperationType\n.\nUPDATE\n)\n.\nresourceType\n(\nAdminResourceType\n.\nREALM_ROLE\n)\n// (7)\n.\nresourceType\n(\nAdminResourceType\n.\nREALM_ROLE_MAPPING\n)\n.\nresourcePath\n(\n\"roles/connection_admins_e71551e0-7f59-44bb-989c-e434f2e5bcae\"\n)\n// (8)\n.\nbuild\n())\n.\nstream\n()\n// (9)\n.\nlimit\n(\n1000\n)\n// (10)\n.\nforEach\n{\n// (11)\n// Do something with each event\n}\nFrom a client...\n... access the\nlogs\nendpoints.\nThe\ngetAdminEvents()\nmethod allows you to filter across all admin events that are logged.\n(Optional) You can filter by events only back to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by events only up to a particular point in time (using the format\nyyyy-MM-dd\n).\n(Optional) You can filter by one or more operations, for example focusing only on creation and updates.\n(Optional) You can filter by one or more resource types, for example only new roles or mappings to roles.\n(Optional) You can filter by a specific resource, such as the role associated with all admins for a specific connection in Atlan.\nLike other paginated resources, you can iterate or stream the results. The access events will be lazily-fetched from Atlan.\nWhen streaming, you can apply any additional constraints such as limiting or further filtering.\nAnd of course, you can then actually do something with each event.\nGET /api/service/events/main?dateFrom=2023-01-01&dateTo=2023-01-31&operationTypes=CREATE&operationTypes=UPDATE&resourceTypes=REALM_ROLE&resourceTypes=REALM_ROLE_MAPPING&resourcePath=roles%2Fconnection_admins_e71551e0-7f59-44bb-989c-e434f2e5bcae\n1\n// (1)!\nAll parameters for filtering the logs are query parameters sent in the URL itself. (Note that the values should be URL-encoded.)\nCommon resource types\nSome of the common resource types you might want to filter on include:\nType\nMeaning\nUSER\nAn individual user.\nGROUP\nMechanism to cluster together multiple users.\nGROUP_MEMBERSHIP\nAssociation between a user and a group.\nREALM_ROLE\nObject that controls access to potentially multiple resources.\nREALM_ROLE_MAPPING\nMapping between user(s) and access control objects (roles).\n2023-07-14\n2025-01-16\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}