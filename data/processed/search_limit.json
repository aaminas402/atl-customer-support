{
  "source_url": "search_limit.html",
  "text": "Limiting search result details - Developer\nSkip to content\nLimiting search result details\nÂ¶\nBy default, each search result will contain very limited details â€” typically only the unique identities (GUID and\nqualifiedName\n) and\nname\nof each asset. This is intentional, to prevent retrieving more information than you need, as every piece of information you retrieve will add a little bit of time to the overall runtime of your request.\nYou can request additional details on each search result, though, to ensure the search gives you back exactly the information you require:\nIncluding asset properties\nÂ¶\n1.4.0\n4.0.0\nYou can specify any properties of an asset you want to include in each search result, including relationships:\nJava\nPython\nKotlin\nRaw REST API\nInclude asset properties\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nincludeOnResults\n(\nTable\n.\nCREATE_TIME\n)\n// (2)\n.\nincludeOnResults\n(\nTable\n.\nUPDATE_TIME\n)\n.\nincludeOnResults\n(\nTable\n.\nCOLUMNS\n)\n.\nstream\n()\n// (3)\n...\nStart building a FluentSearch query (in this example from a client, using its 'assets' member's\nselect()\nmethod).\nChain as many\nincludeOnResults\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each search result. (And this can include relationship attributes as well, such as the columns in a table in this example.)\nYou can then run the search as you like (in this example, streaming the results directly).\nInclude asset properties\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentSearch\n.\nselect\n()\n# (1)\n.\ninclude_on_results\n(\nTable\n.\nCREATE_TIME\n)\n# (2)\n.\ninclude_on_results\n(\nTable\n.\nUPDATE_TIME\n)\n.\ninclude_on_results\n(\nTable\n.\nCOLUMNS\n)\n)\n.\nto_request\n()\n# (3)\nresults\n=\nclient\n.\nasset\n.\nsearch\n(\ncriteria\n=\nrequest\n)\nStart building a FluentSearch query (in this example using its\nselect()\nmethod directly).\nChain as many\ninclude_on_results\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each search result. (And this can include relationship attributes as well, such as the columns in a table in this example.)\nYou can then run the search as you like (in this example, converting to a request and running the search using the request).\nInclude asset properties\n1\n2\n3\n4\n5\n6\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nincludeOnResults\n(\nTable\n.\nCREATE_TIME\n)\n// (2)\n.\nincludeOnResults\n(\nTable\n.\nUPDATE_TIME\n)\n.\nincludeOnResults\n(\nTable\n.\nCOLUMNS\n)\n.\nstream\n()\n// (3)\n...\nStart building a FluentSearch query (in this example from a client, using its 'assets' member's\nselect()\nmethod).\nChain as many\nincludeOnResults\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each search result. (And this can include relationship attributes as well, such as the columns in a table in this example.)\nYou can then run the search as you like (in this example, streaming the results directly).\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n...\n},\n\"from\"\n:\n0\n,\n\"size\"\n:\n100\n,\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n// (2)\n\"createTime\"\n,\n\"updateTime\"\n,\n\"columns\"\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nDefine the search query as you normally would.\nSpecify the list of attributes you want to include on each result in the\nattributes\nlist of the request.\nIncluding relationship properties\nÂ¶\n1.4.0\n4.0.0\nYou can also specify which attributes you want to include on each\nrelationship\nin each search result:\nJava\nPython\nKotlin\nRaw REST API\nInclude relationship properties\n1\n2\n3\n4\n5\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nincludeOnResults\n(\nTable\n.\nCOLUMNS\n)\n// (2)\n.\nincludeOnRelations\n(\nColumn\n.\nNAME\n)\n// (3)\n.\nstream\n()\n// (4)\n...\nStart building a FluentSearch query (in this example from a client, using its 'assets' member's\nselect()\nmethod).\nChain as many\nincludeOnResults\ncalls as you like, to include one or more relationships on each search result.\nThen chain as many\nincludeOnRelations\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each\nrelationship\nincluded in each search result. (In this example, every related column that comes back for each search result will include the column's name.)\nYou can then run the search as you like (in this example, streaming the results directly).\nInclude relationship properties\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nTable\n,\nColumn\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentSearch\n.\nselect\n()\n# (1)\n.\ninclude_on_results\n(\nTable\n.\nCOLUMNS\n)\n# (2)\n.\ninclude_on_relations\n(\nColumn\n.\nNAME\n)\n# (3)\n)\n.\nto_request\n()\n# (4)\nresults\n=\nclient\n.\nasset\n.\nsearch\n(\ncriteria\n=\nrequest\n)\nStart building a FluentSearch query (in this example using its\nselect()\nmethod directly).\nChain as many\ninclude_on_results\ncalls as you like, to include one or more relationships on each search result.\nThen chain as many\ninclude_on_relations\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each\nrelationship\nincluded in each search result. (In this example, every related column that comes back for each search result will include the column's name.)\nYou can then run the search as you like (in this example, converting to a request and running the search using the request).\nInclude asset properties\n1\n2\n3\n4\n5\nclient\n.\nassets\n.\nselect\n()\n// (1)\n.\nincludeOnResults\n(\nTable\n.\nCOLUMNS\n)\n// (2)\n.\nincludeOnRelations\n(\nColumn\n.\nNAME\n)\n// (3)\n.\nstream\n()\n// (4)\n...\nStart building a FluentSearch query (in this example from a client, using its 'assets' member's\nselect()\nmethod).\nChain as many\nincludeOnResults\ncalls as you like, to include one or more relationships on each search result.\nThen chain as many\nincludeOnRelations\ncalls as you like. Each method call should include a searchable Atlan field you want to include on each\nrelationship\nincluded in each search result. (In this example, every related column that comes back for each search result will include the column's name.)\nYou can then run the search as you like (in this example, streaming the results directly).\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n...\n},\n\"from\"\n:\n0\n,\n\"size\"\n:\n100\n,\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n// (2)\n\"columns\"\n],\n\"relationAttributes\"\n:\n[\n// (3)\n\"name\"\n]\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nDefine the search query as you normally would.\nSpecify the list of attributes (relationships) you want to include on each result in the\nattributes\nlist of the request.\nSpecify the list of attributes you want to include on each\nrelationship\nin each search result in the\nrelationAttributes\nlist of the request.\nOnly first-degree attributes and relationships\nIt is currently only possible to include details for first-degree attributes and first-degree relationships and their attributes. If you want to see the attributes of related assets' relationships you must run a second search.\n2024-02-20\n2025-01-16\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}