{
  "source_url": "apps_connectors_data-warehouses_snowflake_how-tos_set-up-snowflake.html",
  "text": "Set up Snowflake | Atlan Documentation\nSkip to main content\nOn this page\nWho can do this?\nYou need your Snowflake administrator to run these commands   -  you may not have access yourself.\nCreate user and role in Snowflake\nâ\nCreate a role and user in Snowflake using the following commands:\nCreate role\nâ\nCreate a role in Snowflake using the following commands:\nCREATE\nOR\nREPLACE\nROLE atlan_user_role\n;\nGRANT\nOPERATE\n,\nUSAGE\nON\nWAREHOUSE\n\"<warehouse-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<warehouse-name>\nwith the default warehouse to use when\nrunning the Snowflake crawler\n.\nAtlan requires the following privileges to:\nOPERATE\nenables Atlan to start the virtual warehouse to fetch metadata if the warehouse has stopped.\nUSAGE\nenables Atlan to show or list metadata from Snowflake. This in turn enables the\nSnowflake crawler\nto run the\nSHOW\nquery.\nCreate a user\nâ\nCreate a separate user to integrate into Atlan, using one of the following 3 options:\nWith a public key in Snowflake\nâ\nSee\nSnowflake's official guide for details on generating an RSA key-pair\n. To create a user with a key-pair, replace the value for\nrsa_public_key\nwith the public key and run the following:\nCREATE\nUSER\natlan_user rsa_public_key\n=\n'MIIBIjANBgkqh...'\ndefault_role\n=\natlan_user_role default_warehouse\n=\n'<warehouse-name>'\ndisplay_name\n=\n'Atlan'\nTYPE\n=\n'SERVICE'\nLearn more about the\nSERVICE\ntype property in\nSnowflake documentation\n.\nDid you know?\nAtlan only supports encrypted private keys with a non-empty passphrase   -  generally recommended as more secure. An empty passphrase results in workflow failures. To generate an encrypted private key, omit the\n-nocrypt\noption. Refer to\nSnowflake documentation\nto learn more.\nWith a password in Snowflake\nâ\nDid you know?\nSnowflake recommends transitioning away from basic authentication using username and password. Change to key-pair authentication for enhanced security. For any existing Snowflake workflows, you can\nmodify the crawler configuration\nto update the authentication method.\nTo create a user with a password, replace\n<password>\nand run the following:\nCREATE\nUSER\natlan_user password\n=\n'<password>'\ndefault_role\n=\natlan_user_role default_warehouse\n=\n'<warehouse-name>'\ndisplay_name\n=\n'Atlan'\nTYPE\n=\n'LEGACY_SERVICE'\nLearn more about the\nLEGACY_SERVICE\ntype property in\nSnowflake documentation\n.\nManaged through your identity provider (IdP)\nPrivate preview\nâ\nThis method is currently only available if Okta is your IdP (Snowflake supports)\nauthenticating natively through Okta\n:\nCreate a user in your identity provider (IdP) and\nuse federated authentication in Snowflake\n.\nThe password for this user must be maintained solely in the IdP and multi-factor authentication (MFA) must be disabled.\nGrant role to user\nâ\nTo grant the\natlan_user_role\nto the new user:\nGRANT\nROLE atlan_user_role\nTO\nUSER\natlan_user\n;\nConfigure OAuth (client credentials flow) with Microsoft Entra ID\nâ\nTo configure OAuth authentication using Microsoft Entra ID (formerly Azure AD) with the client credentials flow:\nFollow\nSnowflake's documentation\nto:\nRegister a new application in Microsoft Entra ID\nCollect the\nclient ID\n,\ntenant ID\n, and\nclient secret\nAdd the required API permissions\nIn Snowflake, create a security integration using the following:\nCREATE\nSECURITY INTEGRATION external_oauth_azure_ad\nTYPE\n=\nexternal_oauth\nENABLED\n=\ntrue\nEXTERNAL_OAUTH_TYPE\n=\nazure\nEXTERNAL_OAUTH_ISSUER\n=\n'\\<AZURE_AD_ISSUER\\>'\nEXTERNAL_OAUTH_JWS_KEYS_URL\n=\n'\\<AZURE_AD_JWS_KEY_ENDPOINT\\>'\nEXTERNAL_OAUTH_AUDIENCE_LIST\n=\n(\n'\\<SNOWFLAKE_APPLICATION_ID_URI\\>'\n)\nEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM\n=\n'sub'\nEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE\n=\n'login_name'\n;\nReplace the placeholders with actual values from your Azure AD app:\n<AZURE_AD_ISSUER>\nâ Your tenant's OAuth 2.0 issuer URL\n<AZURE_AD_JWS_KEY_ENDPOINT>\nâ Azure JWKs URI\n<SNOWFLAKE_APPLICATION_ID_URI>\nâ Application ID URI of the Azure app\nCreate a Snowflake user with a login name that exactly matches the Azure AD client object ID:\nCREATE\nUSER\noauth_svc_user\nWITH\nLOGIN_NAME\n=\n'\\<AZURE_AD_CLIENT_OBJECT_ID\\>'\n-- Use Azure client OBJECT ID\nDEFAULT_ROLE\n=\n\\\n<\nROLE\\\n>\nDEFAULT_WAREHOUSE\n=\n\\\n<\nWAREHOUSE\\\n>\n;\nGrant the configured role to this user:\nGRANT\nROLE \\\n<\nROLE\\\n>\nTO\nUSER\noauth_svc_user\n;\nChoose metadata fetching method\nâ\nAtlan supports two methods for fetching metadata from Snowflake   -  account usage and information schema. You should choose one of these two methods to set up Snowflake:\nÂ\nAccount usage\nInformation schema\nOverview\nSimplified grants but some limitations in functionality\nMost comprehensive approach, more grant management required\nMethod\nViews in the\nSNOWFLAKE\ndatabase that display object metadata and usage metrics for your account\nSystem-defined views and table functions that provide extensive metadata for objects created in your account\nPermissions\nUser role and account, single grant for\nSNOWFLAKE\ndatabase\nUser role and account, multiple grants per database\nData latency\n45 minutes to 3 hours (varies by view)\nNone\nHistorical data retention\n1 year\n7 days to 6 months (varies by view or table function)\nAsset extraction\nACCOUNT_USAGE\nschema\nINFORMATION_SCHEMA\nschema\nView lineage\nACCOUNT_USAGE\nschema\nINFORMATION_SCHEMA\nschema\nTable lineage\nACCOUNT_USAGE\nschema\nACCOUNT_USAGE\nschema\nTag import\nACCOUNT_USAGE\nschema\nACCOUNT_USAGE\nschema\nUsage and popularity\nACCOUNT_USAGE\nschema\nACCOUNT_USAGE\nschema\nMetadata extraction time\nVaries by warehouse size. For example, 8 minutes for 10 million assets (recommended for extracting a large number of assets)\nVaries by warehouse size. For example, 2+ hours for 10 million assets\nExtraction limitations\nExternal table location data, procedures, and primary and foreign keys\nNone\nGrant permissions for account usage method\nâ\ndanger\nIf you want to set warehouse timeouts when using this method, set a large value initially for the workflow to succeed. Once the workflow has succeeded, adjust the value to be twice the extraction time.\nThis method uses the views in\nSNOWFLAKE.ACCOUNT_USAGE\n(or a copied version of this schema) to fetch the metadata from Snowflake into Atlan. You can be more granular with permissions using this method, but there are\nlimitations with this approach\n.\nTo crawl assets, generate lineage, and import tags\nâ\nIf you also want to be able to preview and query the data, you can use the preview and query existing assets permissions instead.\nSnowflake\nstores all tag objects\nin the\nACCOUNT_USAGE\nschema. If you're using the\naccount usage method\nto crawl metadata in Atlan or you have\nconfigured the Snowflake miner\n, you need to grant the same permissions to\nimport tags\nas required for crawling Snowflake assets. Note that object tagging in Snowflake currently requires\nEnterprise Edition or higher\n.\nTo use the default\nSNOWFLAKE\ndatabase and\nACCOUNT_USAGE\nschema and also mine Snowflake's query history (for lineage), grant these permissions:\nUSE\nROLE ACCOUNTADMIN\n;\nGRANT\nIMPORTED\nPRIVILEGES\nON\nDATABASE\nSNOWFLAKE\nTO\nROLE atlan_user_role\n;\nThe\nACCOUNTADMIN\nrole is required to grant privileges on the\nSNOWFLAKE\ndatabase due to the following reasons:\nBy default, only the\nACCOUNTADMIN\nrole can access the\nSNOWFLAKE\ndatabase.\nTo enable other roles to access the database and schemas and query the views, a user with the\nACCOUNTADMIN\nrole needs to grant\nIMPORTED PRIVILEGES\non the\nSNOWFLAKE\ndatabase to the desired roles.\nTo use a copied or cloned version of this default schema, where you can also remove any sensitive data for security purposes, grant these permissions:\nGRANT\nUSAGE\nON\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nSCHEMA\n\"<copied-schema>\"\nIN\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nVIEWS\nIN\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<copied-database>\nwith the copied Snowflake database name.\nReplace\n<copied-schema>\nwith the copied Snowflake\nACCOUNT_USAGE\nschema name.\nThe grants for the copied version can't be used on the original\nSNOWFLAKE\ndatabase. This is because Snowflake produces an error that granular grants can't be given to imported databases.\nWhen using a cloned or copied version, verify that the table or view definition remains unchanged as in your\nSNOWFLAKE\ndatabase. If the format is different. For example, a column is missing and it no longer qualifies as a clone.\nTo crawl streams\nâ\nTo crawl streams, provide the following permissions:\nTo crawl current streams:\nGRANT\nUSAGE\nON\nALL\nSCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nSTREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the Snowflake database name.\nTo crawl future streams:\nGRANT\nUSAGE\nON\nFUTURE SCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the Snowflake database name.\n(Optional) To preview and query existing assets\nâ\nTo query and preview data within assets that already exist in Snowflake, add these permissions:\nGRANT\nUSAGE\nON\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nALL\nSCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nEXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nVIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nMATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nSTREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nPIPE\n\"<pipe-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be able to preview and query in Atlan. (Repeat the statements for every database you wish to preview and query in Atlan.)\n(Optional) To preview and query future assets\nâ\nTo query and preview data within assets that may be created in the future in Snowflake, add these permissions. Again, if you want to also be able to preview and query the data for future assets, you can add the preview and query future assets permissions instead.\nGRANT\nUSAGE\nON\nFUTURE SCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE EXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE MATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nFUTURE PIPES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be able to preview and query in Atlan. (Repeat the statements for every database you want to preview and query in Atlan.)\ndanger\nVerify that all the assets you'd like to crawl are present in these grants by\nchecking the grants\non the user role defined for the crawler.\nGrant permissions for information schema method\nâ\nThis method uses views in the\nINFORMATION_SCHEMA\nschema in Snowflake databases to fetch metadata. You still need to grant specific permissions to enable Atlan to crawl metadata, preview data, and query data with this method.\nTo crawl existing assets\nâ\nGrant these permissions to crawl assets that already exist in Snowflake. If you also want to be able to preview and query the data, you can use the preview and query existing assets permissions instead.\nGrant permissions to crawl existing assets:\nGRANT\nUSAGE\nON\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nALL\nSCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nEXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nVIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nMATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nSTREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nPIPE\n\"<pipe-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be available in Atlan. (Repeat the statements for every database you wish to integrate into Atlan.)\nGrant permissions to crawl functions:\nGRANT\nUSAGE\nON\nALL\nFUNCTIONS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be available in Atlan. (Repeat the statements for every database you wish to integrate into Atlan.)\nFor secure user-defined functions (UDFs), grant\nOWNERSHIP\npermissions to retrieve metadata:\nGRANT\nOWNERSHIP\nON\nFUNCTION\n<\nschema_name\n>\n.\n<\nudf_name\n>\nTO\nROLE\n<\nrole_name\n>\n;\nReplace the placeholders with the appropriate values:\n<schema_name>\n: The name of the schema that contains the user-defined function (UDF).\n<udf_name>\n: The name of the secure UDF that requires ownership permissions.\n<role_name>\n: The role that gets assigned ownership of the secure UDF.\nDid you know?\nThe statements given on this page apply to all schemas, tables, and views in a database in Snowflake. If you want to limit access to only certain objects, you can instead specify the exact objects individually as well.\nTo crawl future assets\nâ\nTo crawl assets that may be created in the future in Snowflake, add these permissions. Again, if you want to also be able to preview and query the data for future assets, you can add the preview and query future assets permissions instead.\nTo grant permissions at a database level:\nGRANT\nUSAGE\nON\nFUTURE SCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE EXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE MATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nFUTURE PIPES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nFUTURE FUNCTIONS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to crawl in Atlan. (Repeat the statements for every database you want to integrate into Atlan.)\ndanger\nFor any future grants defined at a schema level to a different role, the schema-level grants take precedence over the database-level grants and any future grants defined at a database level to the Atlan role get ignored. To learn more, refer to\nSnowflake documentation\n.\nTo grant permissions at a schema level:\nGRANT\nREFERENCES\nON\nFUTURE\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE EXTERNAL\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE VIEWS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nFUTURE MATERIALIZED VIEWS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nFUTURE PIPES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database and\n<schema-name>\nwith the schema you want to crawl in Atlan. (Repeat the statements for every database and schema you want to integrate into Atlan.)\nTo mine query history for lineage\nâ\nTo also mine Snowflake's query history (for lineage), add these permissions. You can use either option:\nTo mine query history direct from Snowflake's internal tables:\nUSE\nROLE ACCOUNTADMIN\n;\nGRANT\nIMPORTED\nPRIVILEGES\nON\nDATABASE\nsnowflake\nTO\nROLE atlan_user_role\n;\nTo mine query history from a cloned or copied set of tables, where you can also remove any sensitive data:\nGRANT\nUSAGE\nON\nDATABASE\n\"<cloned-database>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nSCHEMA\n\"<cloned-database>\"\n.\n\"<cloned-account-usage-schema>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nTABLES\nIN\nSCHEMA\n\"<cloned-database>\"\n.\n\"<cloned-account-usage-schema>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nVIEWS\nIN\nSCHEMA\n\"<cloned-database>\"\n.\n\"<cloned-account-usage-schema>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<cloned-database>\nwith the name of the cloned database, and\n<cloned-account-usage-schema>\nwith the name of the cloned schema containing account usage details.\nWhen using a cloned or copied version, verify that the table or view definition remains unchanged as in your\nSNOWFLAKE\ndatabase. If the format is different. For example, a column is missing and it no longer qualifies as a clone.\n(Optional) To preview and query existing assets\nâ\nTo query and preview data within assets that already exist in Snowflake, add these permissions:\nGRANT\nUSAGE\nON\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nALL\nSCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nEXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nVIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nMATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nALL\nSTREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nPIPE\n\"<pipe-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be able to preview and query in Atlan. (Repeat the statements for every database you wish to preview and query in Atlan.)\n(Optional) To preview and query future assets\nâ\nTo query and preview data within assets that may be created in the future in Snowflake, add these permissions. Again, if you want to also be able to preview and query the data for future assets, you can add the preview and query future assets permissions instead.\nGRANT\nUSAGE\nON\nFUTURE SCHEMAS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE EXTERNAL\nTABLES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE MATERIALIZED VIEWS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nFUTURE PIPES\nIN\nDATABASE\n\"<database-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database you want to be able to preview and query in Atlan. (Repeat the statements for every database you want to preview and query in Atlan.)\ndanger\nFor any future grants defined at a schema level to a different role, the schema-level grants take precedence over the database-level grants and any future grants defined at a database level to the Atlan role get ignored. To learn more, refer to\nSnowflake documentation\n.\nTo grant permissions at a schema level:\nGRANT\nSELECT\nON\nFUTURE\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE EXTERNAL\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE VIEWS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE MATERIALIZED VIEWS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nSELECT\nON\nFUTURE STREAMS\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nMONITOR\nON\nFUTURE PIPES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database and\n<schema-name>\nwith the schema you want to be able to preview and query in Atlan. (Repeat the statements for every database and schema you want to preview and query in Atlan.)\ndanger\nVerify that all the assets you'd like to crawl are present in these grants by\nchecking the grants\non the user role defined for the crawler.\n(Optional) To import Snowflake tags\nâ\nSnowflake\nstores all tag objects\nin the\nACCOUNT_USAGE\nschema. Note that object tagging in Snowflake currently requires\nEnterprise Edition or higher\n.\nTo\nimport tags from Snowflake\n, grant these permissions:\nTo use the default\nSNOWFLAKE\ndatabase and\nACCOUNT_USAGE\nschema and also mine Snowflake's query history (for lineage), grant these permissions:\nUSE\nROLE ACCOUNTADMIN\n;\nGRANT\nIMPORTED\nPRIVILEGES\nON\nDATABASE\nSNOWFLAKE\nTO\nROLE atlan_user_role\n;\nThe\nACCOUNTADMIN\nrole is required to grant privileges on the\nSNOWFLAKE\ndatabase due to the following reasons:\nBy default, only the\nACCOUNTADMIN\nrole can access the\nSNOWFLAKE\ndatabase.\nTo enable other roles to access the database and schemas and query the views, a user with the\nACCOUNTADMIN\nrole needs to grant\nIMPORTED PRIVILEGES\non the\nSNOWFLAKE\ndatabase to the desired roles.\nTo use a copied or cloned version of this default schema, where you can also remove any sensitive data for security purposes, grant these permissions:\nGRANT\nUSAGE\nON\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nUSAGE\nON\nSCHEMA\n\"<copied-schema>\"\nIN\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nGRANT\nREFERENCES\nON\nALL\nVIEWS\nIN\nDATABASE\n\"<copied-database>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<copied-database>\nwith the copied Snowflake database name.\nReplace\n<copied-schema>\nwith the copied Snowflake\nACCOUNT_USAGE\nschema name.\nThe grants for the copied version can't be used on the original\nSNOWFLAKE\ndatabase. This is because Snowflake produces an error that granular grants can't be given to imported databases.\n(Optional) To push updated tags to Snowflake\nâ\nTo\npush tags updated for assets in Atlan to Snowflake\n, grant these permissions:\nGRANT\nAPPLY\nTAG\nON\nACCOUNT\nTO\nROLE\n<\nrole\n-\nname\n>\n;\nYou can learn more about tag privileges from\nSnowflake documentation\n.\n(Optional) To crawl dynamic tables\nâ\nAtlan currently supports fetching metadata for dynamic tables using the\nMONITOR\nprivilege. Refer to\nSnowflake documentation\nto learn more.\nTo crawl existing dynamic tables from Snowflake:\nGrant permissions at a database level:\nGRANT\nMONITOR\nON\nALL\nDYNAMIC\nTABLES\nIN\nDATABASE\n\"<DATABASE_NAME>\"\nTO\nROLE atlan_user_role\n;\nGrant permissions at a schema level:\nGRANT\nMONITOR\nON\nALL\nDYNAMIC\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nTo crawl future dynamic tables from Snowflake:\nGrant permissions at a database level:\nGRANT\nMONITOR\nON\nFUTURE DYNAMIC\nTABLES\nIN\nDATABASE\n\"<DATABASE_NAME>\"\nTO\nROLE atlan_user_role\n;\nGrant permissions at a schema level:\nGRANT\nMONITOR\nON\nFUTURE DYNAMIC\nTABLES\nIN\nSCHEMA\n\"<database-name>.<schema-name>\"\nTO\nROLE atlan_user_role\n;\nReplace\n<database-name>\nwith the database and\n<schema-name>\nwith the schema you want to crawl in Atlan. (Repeat the statements for every database and schema you want to integrate into Atlan.)\n(Optional) To crawl Iceberg tables\nâ\nAtlan currently supports fetching metadata for\nIceberg tables\nonly for the information schema extraction method.\nTo crawl Iceberg tables from Snowflake, grant the following permissions:\nTo crawl existing Iceberg tables in Snowflake:\nGRANT\nREFERENCES\nON\nALL\nICEBERG\nTABLES\nIN\nDATABASE\n<\ndatabase\n-\nname\n>\nTO\nROLE atlan_user_role\n;\nTo crawl future Iceberg tables in Snowflake:\nGRANT\nREFERENCES\nON\nFUTURE ICEBERG\nTABLES\nIN\nDATABASE\n<\ndatabase\n-\nname\n>\nTO\nROLE atlan_user_role\n;\nTo crawl Iceberg catalog metadata for Iceberg tables in Snowflake:\nGRANT\nUSAGE\nON\nINTEGRATION\n<\nintegration\n-\nname\n>\nTO\nROLE atlan_user_role\n;\ndanger\nYou must first grant permissions to crawl existing Iceberg tables for this permission to work on catalogs. You must also grant permissions to all the catalogs you want to crawl in Atlan individually.\n(Optional) To crawl Snowflake stages\nâ\nAtlan supports crawling metadata for Snowflake stages using the USAGE and READ privileges. For more information, see the Snowflake documentation for INFORMATION_SCHEMA.STAGES.\nTo crawl stages from Snowflake:\nGrant\nUSAGE\nand\nREAD\nprivileges on all existing stages at the database level:\nGRANT\nUSAGE\nON\nALL\nSTAGES\nIN\nDATABASE\n<\ndatabase_name\n>\nTO\nROLE atlan_user_role\n;\nGRANT\nREAD\nON\nALL\nSTAGES\nIN\nDATABASE\n<\ndatabase_name\n>\nTO\nROLE atlan_user_role\n;\nReplace\n<database_name>\nwith the name of your Snowflake database\nReplace\n<atlan_user_role>\nwith the role you've granted Atlan to use for crawling.\nGrant\nUSAGE\nand\nREAD\nprivileges on all future stages at the database level:\nGRANT\nUSAGE\nON\nFUTURE STAGES\nIN\nDATABASE\n<\ndatabase_name\n>\nTO\nROLE atlan_user_role\n;\nGRANT\nREAD\nON\nFUTURE STAGES\nIN\nDATABASE\n<\ndatabase_name\n>\nTO\nROLE atlan_user_role\n;\nReplace\n<database_name>\nwith the name of your Snowflake database\nReplace\n<atlan_user_role>\nwith the role you've granted Atlan to use for crawling.\nAllowlist the Atlan IP\nâ\nIf you are using the IP allowlist in your Snowflake instance, you must add the Atlan IP to the allowlist. Please raise a support ticket from within Atlan, or\nsubmit a request\n.\n(If you aren't using the IP allowlist in your Snowflake instance, you can skip this step.)\nCreate user and role in Snowflake\nChoose metadata fetching method\nGrant permissions for account usage method\nGrant permissions for information schema method\nAllowlist the Atlan IP",
  "source_type": "docs"
}