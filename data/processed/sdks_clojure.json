{
  "source_url": "sdks_clojure.html",
  "text": "Clojure SDK - Developer\nSkip to content\nClojure SDK\n¶\nObtain the SDK\n¶\nFor Clojure, you can reuse the existing\nJava SDK\nas-is. It is available on Maven Central, ready to be included in your project:\ndeps.edn\ndeps.edn\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n:aliases\n{\n:run\n{\n:ns-default\nmy.proj\n:main-opts\n[\n\"-m\"\n\"my.proj\"\n]\n:jvm-opts\n[\n\"-Dclojure.tools.logging.factory=clojure.tools.logging.impl/slf4j-factory\"\n]\n:deps\n{\ncom.atlan/atlan-java\n{\n:mvn/version\n\"4.2.0\"\n}\n;; (1)\norg.clojure/tools.logging\n{\n:mvn/version\n\"1.3.0\"\n}\n;; (2)\norg.slf4j/slf4j-simple\n{\n:mvn/version\n\"2.0.7\"\n}\n}\n}\n}}\nInclude the latest version of the Java SDK in your project as a dependency (replace the version number with the latest version indicated in the badges above).\nThe Java SDK uses slf4j for logging purposes. You can include the\norg.clojure/tools.logging\nutility as a simple binding mechanism to send any logging information out to your console (standard out).\nConfigure the SDK\n¶\nThere are two ways to configure the\nSDK:\nUsing environment variables\n¶\nATLAN_API_KEY\nshould be given your Atlan\nAPI token\n, for authentication (\ndon't forget to assign one or more personas to the API token to give access to existing assets!\n)\nATLAN_BASE_URL\nshould be given your Atlan URL (for example,\nhttps://tenant.atlan.com\n)\nHere's an example of setting those environment variables:\nSet environment variables\nexport ATLAN_BASE_URL=https://tenant.atlan.com\nexport ATLAN_API_KEY=\"...\"\nsrc/my/proj.clj\n1\n2\n3\n4\n5\n6\n7\n8\n9\n(\nns\nmy.proj\n(\n:import\ncom.atlan.AtlanClient\n)\n(\n:require\n[\nclojure.tools.logging\n:as\nlogger\n]))\n(\ndefn\n-main\n[\n&\nargs\n]\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n)]\n;; Do something with the client\n(\nlogger/info\n\"Using the AtlanClient...\"\n)))\nOn client creation\n¶\nIf you prefer to not use environment variables, you can do the following:\nsrc/my/proj.clj\n1\n2\n3\n4\n5\n6\n7\n8\n9\n(\nns\nmy.proj\n(\n:import\ncom.atlan.AtlanClient\n)\n(\n:require\n[\nclojure.tools.logging\n:as\nlogger\n]))\n(\ndefn\n-main\n[\n&\nargs\n]\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n\"https://tenant.atlan.com\"\n\"...\"\n)]\n;; Do something with the client\n(\nlogger/info\n\"Using the AtlanClient...\"\n)))\nWhat's next?\n¶\nDelve into more detailed examples:\nCommon tasks\nCommon operations on assets, that are available across all assets.\nDiscover actions\nAsset-specific\nOperations that are specific to certain assets.\nFocus on a specific kind of asset\nGovernance structures\nOperations dealing with governance structures, rather than assets.\nManage governance structures\nSamples\nReal code samples our customers use to solve particular use cases.\nReview live samples\nSearching\nDelve deep into searching and aggregating metadata.\nLearn more about searching\nEvents\nDelve deep into the details of the events Atlan triggers.\nLearn more about events\nError-handling\n¶\nThe SDK defines checked exceptions for the following categories of error:\nException\nDescription\nApiConnectionException\nErrors when the SDK is unable to connect to the API, for example due to a lack of network access or timeouts.\nAuthenticationException\nErrors when the API token configured for the SDK is invalid or expired.\nConflictException\nErrors when there is some conflict with an existing\nasset\nand the operation cannot be completed as a result.\nInvalidRequestException\nErrors when the request sent to Atlan does not match its expectations. If you are using the built-in methods like\ntoCreate()\nand\ntoUpdate()\nthis exception should be treated as a bug in the SDK. (These operations take responsibility for avoiding this error.)\nLogicException\nErrors where some assumption made in the SDK's code is proven incorrect. If ever raised, they should be reported as bugs against the SDK.\nNotFoundException\nErrors when the requested resource or\nasset\ndoes not exist in Atlan.\nPermissionException\nErrors when the API token used by the SDK does not have permission to access a resource or carry out an operation on a specific\nasset\n.\nRateLimitException\nErrors when the Atlan server is being overwhelmed by requests.\nA given API call could fail due to all of the errors above. So these all extend a generic\nAtlanException\nchecked exception, and all API operations throw\nAtlanException\n.\nExample\nFor example, when creating a connection there is an asynchronous process that grants permissions to the admins of that connection. So there can be a slight delay between creating the connection and being permitted to do any operations with the connection. During that delay, any attempt to interact with the connection will result in a\nPermissionException\n, even if your API token was used to create connection in the first place.\nAnother example you may occasionally hit is some network issue that causes your connection to Atlan to be interrupted. In these cases, an\nApiConnectionException\nwill be raised.\nDon't worry, the SDK retries automatically\nWhile these are useful to know for detecting issues, the SDK\nautomatically retries\non such problems.\nAdvanced configuration\n¶\nAtlan is a distributed, cloud-native application, where network problems can arise. These advanced configuration options allow you to optimize how the SDK handles such ephemeral problems.\nLogging\n¶\nThe SDK uses slf4j to be logging framework-agnostic. You can therefore configure your own preferred logging framework:\nLog4j2\ndeps.edn\n7\n8\n9\n10\n11\n12\n:deps\n{\ncom.atlan/atlan-java\n{\n:mvn/version\n\"4.2.0\"\n}\norg.clojure/tools.logging\n{\n:mvn/version\n\"1.3.0\"\n}\norg.apache.logging.log4j/log4j-core\n{\n:mvn/version\n\"2.20.0\"\n}\n;; (1)\norg.apache.logging.log4j/log4j-slf4j2-impl\n{\n:mvn/version\n\"2.20.0\"\n}\n}\nAdd log4j2 bindings.\nsrc/resources/log4j2.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration\nstatus=\n\"WARN\"\n>\n<Appenders>\n<Console\nname=\n\"ConsoleAppender\"\ntarget=\n\"SYSTEM_OUT\"\n>\n<PatternLayout>\n<pattern>\n%d{HH:mm:ss.SSS}\n[%thread]\n%-5level\n%logger{36}\n-\n%msg%n\n</pattern>\n</PatternLayout>\n</Console>\n<File\nname=\n\"FileAppender\"\nfileName=\n\"tmp/debug.log\"\nappend=\n\"false\"\n>\n<PatternLayout>\n<pattern>\n%d{HH:mm:ss.SSS}\n[%thread]\n%-5level\n%logger{36}\n-\n%msg%n\n</pattern>\n</PatternLayout>\n</File>\n</Appenders>\n<Loggers>\n<Root\nlevel=\n\"DEBUG\"\n>\n<AppenderRef\nref=\n\"ConsoleAppender\"\nlevel=\n\"INFO\"\n/>\n<AppenderRef\nref=\n\"FileAppender\"\n/>\n</Root>\n<Logger\nname=\n\"com.atlan\"\nlevel=\n\"DEBUG\"\n/>\n</Loggers>\n</Configuration>\nRetries\n¶\nThe SDK handles automatically retrying your requests when it detects certain problems:\nWhen an\nApiConnectionException\noccurs that is caused by an underlying\nConnectException\nor\nSocketTimeoutException\n.\nWhen there is a\n403\nresponse indicating that permission for an operation is not (yet) available.\nWhen there is a\n500\nresponse indicating that something went wrong on the server side.\nMore details on how they work\nIf any request encounters one of these problems, it will be retried. Before each retry, the SDK will apply a delay using:\nAn exponential backoff (starting from 500ms)\nA jitter (in the range of 75-100% of the backoff delay)\nEach retry will be at least 500ms, and at most 5s.\n(Currently these values are not configurable.)\nFor each request that encounters any of these problems, only up to a maximum number of retries will be attempted. (This is set to\n3\nby default.)\nYou can configure the maximum number of retries globally using\nsetMaxNetworkRetries()\non a client. Set this to an integer:\nConfigure the maximum number of retries\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n)]\n(\n.setMaxNetworkRetries\nclient\n10\n))\nTimeouts\n¶\nThe SDK will only wait so long for a response before assuming a network problem has occurred and the request should be timed out. By default, this is set to\n80\nseconds.\nYou can configure the maximum time the SDK will wait before timing out a request using\nsetReadTimeout()\non a client. Set this to an integer giving the number of milliseconds before timing out:\nConfigure the maximum time to wait before timing out\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n)]\n(\n.setReadTimeout\nclient\n(\n*\n120\n1000\n)))\n;; (1)!\nRemember this must be given in milliseconds. This example sets the timeout to 2 minutes (120 seconds * 1000 milliseconds).\nMulti-tenant connectivity\n¶\nSince version 0.9.0, the Java SDK supports connecting to multiple tenants. From version 4.0.0 onwards you can create any number of clients against any number of different tenants, since every operation that interacts with a tenant now explicitly requires a client to be provided to it:\nCreate a client\n1\n2\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n\"https://tenant.atlan.com\"\n)]\n;; (1)!\n(\n.setApiToken\nclient\n\"...\"\n))\nConstructing a new client with a different tenant's URL is sufficient to create connectivity to that other tenant. You can also (optionally) provide a second argument to directly give the API token for the tenant.\nUse a specific client\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n)]\n(\nlet\n[\nterm\n(\n->\n(\nGlossaryTerm/creator\n\"Example Term\"\n;; (1)\n\"836830be-5a11-4094-8346-002e0320684f\"\nnil\n)\n.build\n)]\n(\n.save\n(\n.assets\nclient\n)\nterm\n)\n;; (2)\n(\nlet\n[\nrequest-options\n(\n->\n(\nRequestOptions/from\nclient\n)\n;; (3)\n(\n.maxNetworkRetries\n10\n)\n.build\n)]\n(\n.save\n(\n.assets\nclient\n)\nterm\nrequest-options\n))\n(\n.save\nterm\nclient\n)))\n;; (4)\nCreate an object as usual.\nYou can access the operations for assets directly on the client, under\nclient.assets\n. These will generally give you the most flexibility — they can handle multiple objects at a time and allow overrides.\nEvery operation on the client itself has a variant with an (optional) final argument through which you can override settings like retry limits or timeouts for this single request. You can use the\nfrom(client)\nfactory method to initialize the request options with all the settings of your client, and then you only need to chain on those you want to override for this particular request.\nAlternatively, you can pass the client to the operation on the object itself.\nLimit the number of clients to those you must have\nEach client you create maintains its own independent copy of various caches. So the more clients you have, the more resources your code will consume. For this reason, we recommended limiting the number of clients you create to the bare minimum you require — ideally just a single client per tenant.\nUsing a proxy\n¶\nTo use the Java SDK with a proxy, you need to send in some additional parameters when running any\njava ...\ncommand.\nThese are described in detail in the\nJava documentation\n, but are summarized here for simplicity:\nHTTPS\nSOCKS\nhttps.proxyHost\nshould be set to the hostname for your HTTPS proxy\nhttps.proxyPort\nshould be set to the port for your HTTPS proxy (default being 443)\nRun command using an HTTPS proxy\n1\nclj\n-J-Dhttps.proxyHost\n=\nhostname\n-J-Dhttps.proxyPort\n=\n8080\n-M:run\nsocksProxyHost\nshould be set to the hostname for your SOCKS proxy\nsocksProxyPort\nshould be set to the port for your SOCKS proxy (default being 1080)\nRun command using a SOCKS proxy\n1\nclj\n-J-DsocksProxyHost\n=\nhostname\n-J-DsocksProxyPort\n=\n8080\n-M:run\nProviding credentials to the proxy\nIn either case, if you need to authenticate to your proxy, you will need to wrap whatever code you want to run to set up these credentials using something like the following:\nAuthenticate to proxy\n1\n2\n3\n(\nwith-open\n[\nclient\n(\nAtlanClient.\n)]\n(\nlet\n[\npa\n(\nPasswordAuthentication.\n\"username\"\n(\nchar-array\n\"password\"\n))]\n;; (1)\n(\n.setProxyCredential\nclient\npa\n))))\n;; (2)\nYou need to create a built-in Java\nPasswordAuthentication\nobject.\nProvide your username as the first argument.\n... and your password as the second argument, as a\nchar[]\n. (Of course, you should\nnot\nhard-code your password in your code itself, but rather pull it from elsewhere.)\nThen use\nsetProxyCredential()\nto pass this\nPasswordAuthentication\nobject to the Atlan client, before any of the rest of the code will execute.\n2023-04-19\n2025-06-10\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}