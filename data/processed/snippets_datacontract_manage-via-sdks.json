{
  "source_url": "snippets_datacontract_manage-via-sdks.html",
  "text": "Manage data contracts via SDKs - Developer\nSkip to content\nManage data contracts via SDKs\n¶\nLimited availability\nData contracts can currently only be managed for\ntables\n,\nviews\n,\nand\nmaterialized views\n.\nCreate a new contract\n¶\n2.5.1\n4.0.0\nTo create a\ncontract\nfor an existing asset in Atlan:\nJava\nPython\nKotlin\nRaw REST API\nCreate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nTable\nasset\n=\nTable\n.\nupdater\n(\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n,\n\"SALE_TXN\"\n)\n.\nbuild\n();\nString\nspec\n=\nclient\n.\ncontracts\n.\ngenerateInitialSpec\n(\nasset\n);\n// (1)\nDataContractSpec\ndcs\n=\nDataContractSpec\n.\nfromString\n(\nspec\n)\n// (2)\n.\ntoBuilder\n()\n.\ndescription\n(\n\"Changed description.\"\n)\n.\nextraProperty\n(\n\"something\"\n,\n\"extra\"\n)\n.\nbuild\n();\nDataContract\ncontract\n=\nDataContract\n.\ncreator\n(\nspec\n,\nasset\n)\n// (3)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ncontract\n.\nsave\n(\nclient\n);\n// (4)\nStart by initializing a data contract. You can use the\n.contracts.generateInitialSpec()\non any Atlan client to generate the initial YAML data contract specification for a given asset.\n(Optional) You can translate the YAML string representation into a specification object that you can then programmatically extend, without needing to do direct string manipulations.\nLoses all comments\nBe aware that doing this conversion will remove any comments in the YAML.\nYou need to provide the contract specification (YAML), as a string, and the asset the contract will govern to the\nDataContract.creator()\nmethod.\nConverting an object into the string form\nIf you programmatically modified the specification as an object, you can convert it back to its YAML string form simply by calling\n.toString()\non the object. You are always asked to provide the YAML string form here to ensure that if you want to keep any comments, you have the option to do so (since the object form removes any comments).\nFinally, you can call the\nsave()\nmethod to create the new data contract in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nfrom\npyatlan.model.assets\nimport\nTable\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataContract\nfrom\npyatlan.model.contract\nimport\nDataContractSpec\nclient\n=\nAtlanClient\n()\nasset\n=\nTable\n.\nupdater\n(\nqualified_name\n=\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n,\nname\n=\n\"SALE_TXN\"\n)\nspec\n=\nclient\n.\ncontracts\n.\ngenerate_initial_spec\n(\nasset\n)\n# (1)\ncontract_spec\n=\nDataContractSpec\n.\nfrom_yaml\n(\nspec\n)\n# (2)\ncontract_spec\n.\ndescription\n=\n\"Changed description.\"\ncontract_spec\n.\nextra_properties\n=\n{\n\"something\"\n:\n\"extra\"\n}\ncontract\n=\nDataContract\n.\ncreator\n(\n# (3)\nasset_qualified_name\n=\nasset\n.\nqualified_name\n,\ncontract_spec\n=\ncontract_spec\n,\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ncontract\n)\n# (4)\nStart by initializing a data contract. You can use the\n.contracts.generate_initial_spec()\non any Atlan client to generate the initial YAML data contract specification for a given asset.\n(Optional) You can translate the YAML string representation into a specification object\nthat you can then programmatically extend, without needing to do direct string manipulations.\nLoses all comments\nBe aware that doing this conversion will remove any comments in the YAML.\nYou need to provide the contract specification (YAML), as a string,\nand the asset the contract will govern to the\nDataContract.creator()\nmethod.\nFinally, you can call the\nsave()\nmethod to create the new data contract in Atlan.\nCreate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nval\nasset\n=\nTable\n.\nupdater\n(\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n,\n\"SALE_TXN\"\n)\n.\nbuild\n()\nval\nspec\n=\nclient\n.\ncontracts\n.\ngenerateInitialSpec\n(\nasset\n)\n// (1)\nval\ndcs\n=\nDataContractSpec\n.\nfromString\n(\nspec\n)\n// (2)\n.\ntoBuilder\n()\n.\ndescription\n(\n\"Changed description.\"\n)\n.\nextraProperty\n(\n\"something\"\n,\n\"extra\"\n)\n.\nbuild\n()\nval\ncontract\n=\nDataContract\n.\ncreator\n(\nspec\n,\nasset\n)\n// (3)\n.\nbuild\n()\nval\nresponse\n=\ncontract\n.\nsave\n(\nclient\n)\n// (4)\nStart by initializing a data contract. You can use the\n.contracts.generateInitialSpec()\non any Atlan client to generate the initial YAML data contract specification for a given asset.\n(Optional) You can translate the YAML string representation into a specification object that you can then programmatically extend, without needing to do direct string manipulations.\nLoses all comments\nBe aware that doing this conversion will remove any comments in the YAML.\nYou need to provide the contract specification (YAML), as a string, and the asset the contract will govern to the\nDataContract.creator()\nmethod.\nConverting an object into the string form\nIf you programmatically modified the specification as an object, you can convert it back to its YAML string form simply by calling\n.toString()\non the object. You are always asked to provide the YAML string form here to ensure that if you want to keep any comments, you have the option to do so (since the object form removes any comments).\nFinally, you can call the\nsave()\nmethod to create the new data contract in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"DataContract\"\n,\n// (1)\n\"attributes\"\n:\n{\n// (2)\n\"dataContractJson\"\n:\n\"{\\\"type\\\": \\\"Table\\\", \\\"status\\\": \\\"DRAFT\\\", \\\"kind\\\": \\\"DataContract\\\", \\\"dataset\\\": \\\"SALE_TXN\\\", \\\"data_source\\\": \\\"snowflake\\\", \\\"description\\\": \\\"Created by Python SDK.\\\", \\\"columns\\\": [{\\\"name\\\": \\\"order_id\\\", \\\"data_type\\\": \\\"BIGNUMERIC\\\", \\\"description\\\": \\\"\\\"}]}\"\n,\n\"name\"\n:\n\"Data contract for SALE_TXN\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/contract\"\n// (4)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nDataContract\n.\nProvide the data contract JSON. In this example, we're creating it with only the minimal required properties as specified by the API. Please check the reference section for the complete\ndata contract specification\n.\ntype of the asset in Atlan (\nTable\n,\nView\n, or\nMaterializedView\n).\nstate of the contract (\nDRAFT\nor\nVERIFIED\n).\nmust always be\nDataContract\n.\nname of the asset as it exists inside Atlan.\nname of the asset connection as it exists inside Atlan.\n(Optional) description of this dataset, for documentation purposes.\n(Optional)\ncolumns\n:\nname of the column as it is defined in the source system (often technical).\nphysical data type of values in this column.\ndescription of this column, for documentation purposes.\nYou must provide a human-readable name for your contract.\nThe\nqualifiedName\nshould follow the pattern:\n<assetQualifiedName>/contract\n(where\nassetQualifiedName\nis, in this example, the\nqualifiedName\nof a Snowflake table).\nRetrieve a contract\n¶\n2.2.4\n4.0.0\nBy asset:\n¶\nTo retrieve the latest contract and certified\ncontract of a given asset using its qualified name:\nJava\nPython\nKotlin\nRaw REST API\nRetrieve latest and certified data contract of a asset\n1\n2\n3\nTable\ntable\n=\nTable\n.\nget\n(\nclient\n,\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n,\ntrue\n);\n// (1)\nDataContract\nlatest\n=\ntable\n.\ngetDataContractLatest\n();\n// (2)\nDataContract\ncertified\n=\ntable\n.\ngetDataContractLatestCertified\n();\n// (3)\nFirst, retrieve the asset by its\nqualifiedName\n. Because this operation will retrieve the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the latest data contract by using\n.getDataContractLatest()\n.\nRetrieve the certified data contract by using the\n.getDataContractLatestCertified()\n.\nRetrieve latest and certified data contract of a asset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataContract\nclient\n=\nAtlanClient\n()\ntable\n=\nclient\n.\nasset\n.\nget_by_qualified_name\n(\n# (1)\nasset_type\n=\nTable\n,\nqualified_name\n=\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n)\nlatest_contract\n=\ntable\n.\ndata_contract_latest\n# (2)\ncertified_contract\n=\ntable\n.\ndata_contract_latest_certified\n# (3)\nFirst, retrieve the asset by its\nqualified_name\n.\nRetrieve the latest data contract by using the\ntable.data_contract_latest\nattribute.\nRetrieve the certified data contract by using the\ntable.data_contract_latest_certified\nattribute.\nRetrieve latest and certified data contract of a asset\n1\n2\n3\nval\ntable\n=\nTable\n.\nget\n(\nclient\n,\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN\"\n,\ntrue\n)\n// (1)\nval\nlatest\n=\ntable\n.\ndataContractLatest\n// (2)\nval\ncertified\n=\ntable\n.\ndataContractLatestCertified\n// (3)\nFirst, retrieve the asset by its\nqualifiedName\n. Because this operation will retrieve the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the latest data contract by using\n.dataContractLatest\n.\nRetrieve the certified data contract by using the\n.dataContractLatestCertified\n.\nGET /api/meta/entity/uniqueAttribute/type/Table?attr%3AqualifiedName=default%2Fsnowflake%2F1717514525%2FRAW%2FWIDEWORLD%2FSALE_TXN&minExtInfo=False&ignoreRelationships=False\n1\n// (1)\nAll details are in the URL itself.\nURL-encoded filter\nNote that the filter is URL-encoded.\ndecoded it would be\n:\n/api/meta/entity/uniqueAttribute/type/Table?attr:qualifiedName=default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN&minExtInfo=False&ignoreRelationships=False\nBy qualified name:\n¶\nTo retrieve a contract by its version (\nV1\n,\nV2\n, etc) using its qualified name:\nJava\nPython\nKotlin\nRaw REST API\nRetrieve a data contract by its version\n1\n2\n3\nDataContract\ncontract\n=\nDataContract\n.\nget\n(\n// (1)!\nclient\n,\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/Table/contract/V1\"\n);\nThe\nqualifiedName\nof the data contract must be in the format:\n<assetQualifiedName>/<assetType>/contract/V<versionNumber>\n. For this example:\nassetQualifiedName\n:\nqualifiedName\nof a Snowflake table.\nassetType\n: type of this asset in Atlan, i.e:\nTable\n.\nversionNumber\n: specific version of the data contract to retrieve, e.g:\n1\n,\n2\n, and so on.\nRetrieve a data contract by its version\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataContract\nclient\n=\nAtlanClient\n()\ncontract\n=\nclient\n.\nasset\n.\nget_by_qualified_name\n(\nasset_type\n=\nDataContract\n,\n# (1)\nqualified_name\n=\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/Table/contract/V1\"\n)\nThe\nqualifiedName\nof the data contract must be in the format:\n<assetQualifiedName>/<assetType>/contract/V<versionNumber>\n.\nFor this example:\nassetQualifiedName\n:\nqualifiedName\nof a Snowflake table.\nassetType\n: type of this asset in Atlan, i.e:\nTable\n.\nversionNumber\n: specific version of the data\ncontract to retrieve, e.g:\n1\n,\n2\n, and so on.\nRetrieve a data contract by its version\n1\n2\n3\nval\ncontract\n=\nDataContract\n.\nget\n(\n// (1)!\nclient\n,\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/Table/contract/V1\"\n)\nThe\nqualifiedName\nof the data contract must be in the format:\n<assetQualifiedName>/<assetType>/contract/V<versionNumber>\n. For this example:\nassetQualifiedName\n:\nqualifiedName\nof a Snowflake table.\nassetType\n: type of this asset in Atlan, i.e:\nTable\n.\nversionNumber\n: specific version of the data contract to retrieve, e.g:\n1\n,\n2\n, and so on.\nGET /api/meta/entity/uniqueAttribute/type/DataContract?attr%3AqualifiedName=dedefault%2Fsnowflake%2F1717514525%2FRAW%2FWIDEWORLD%2FSALE_TXN%2FTable%2Fcontract%2FV1&minExtInfo=False&ignoreRelationships=False\n1\n// (1)\nAll details are in the URL itself.\nURL-encoded filter\nNote that the filter is URL-encoded.\ndecoded it would be\n:\nattr:qualifiedName=default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/Table/contract/V1&minExtInfo=False&ignoreRelationships=False\nwhere the\nqualifiedName\nof the data contract must be in the format:\n<assetQualifiedName>/<assetType>/contract/V<versionNumber>\n.\nFor this example:\nassetQualifiedName\n:\nqualifiedName\nof a Snowflake table.\nassetType\n: type of this asset in Atlan, i.e:\nTable\n.\nversionNumber\n: specific version of the data contract to retrieve, e.g:\n1\n,\n2\n, and so on.\nUpdate a contract\n¶\n2.5.1\n4.0.0\nIn the following example, we are updating the contact\ncertificateStatus\nfield to\nVERIFIED\n(shown as\nPUBLISHED\nin the UI):\nJava\nPython\nKotlin\nRaw REST API\nUpdate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nDataContractSpec\nupdatedContractDetails\n=\nDataContractSpec\n.\nfromString\n(\nspec\n)\n// (1)\n.\ntoBuilder\n()\n.\nstatus\n(\nDataContractStatus\n.\nVERIFIED\n)\n// (2)\n.\nbuild\n();\nDataContract\ncontract\n=\nDataContract\n.\nupdater\n(\n// (3)\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/contract\"\n,\n\"Data contract for SALE_TXN\"\n)\n.\ndataContractSpec\n(\nupdatedContractDetails\n.\ntoString\n())\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ncontract\n.\nsave\n(\nclient\n);\n// (5)\nBegin by constructing the updated data contract specification. This example assumes you already have the string YAML form in a variable named\nspec\n, which you have retrieved from the data contract using one of the retrieval methods above.\nAfter converting the specification into a builder (using\n.toBuilder()\n) you can chain any updates you want against it, such as changing its status.\nUse the\nupdater()\nmethod to update a data contract.\nqualifiedName\nof the data contract, ie:\n<assetQualifiedName>/contract\n(where\nassetQualifiedName\nis, in this example, the\nqualifiedName\nof a Snowflake table).\nname\nof the data contract. (\nNOTE:\nSDKs and\nCLI\nalways generate it in the format:\n\"Data contract for\ndataset\n(\nasset.name\n)\"\n).\nYou can then add any other updates or attributes. In this example, we're updating the contract spec itself (must be\nstring\n).\nTo update the data contract in Atlan, call the\nsave()\nmethod with the object you've built. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataContract\nfrom\npyatlan.model.contract\nimport\nDataContractSpec\nfrom\npyatlan.model.enums\nimport\nDataContractStatus\nclient\n=\nAtlanClient\n()\nspec\n=\ncurrent_contract\n.\ndata_contract_spec\nupdated_contract_spec\n=\nDataContractSpec\n.\nfrom_yaml\n(\nspec\n)\n# (1)\nupdated_contract_spec\n.\nstatus\n=\nDataContractStatus\n.\nVERIFIED\n# (2)\ncontract\n=\nDataContract\n.\nupdater\n(\n# (3)\nqualified_name\n=\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/contract\"\n,\nname\n=\n\"Data contract for SALE_TXN\"\n,\n)\ncontract\n.\ndata_contract_spec\n=\nupdated_contract_spec\n.\nto_yaml\n()\n# (4)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ncontract\n)\n# (5)\nBegin by constructing the updated data contract specification.\nThis example assumes you already have the string YAML form in a\nvariable named\nspec\n, which you have retrieved from the data\ncontract using one of the retrieval methods above.\nAfter converting the specification into\nDataContractSpec\ninstance, you can then chain any updates you\nwant against it, such as changing its\nstatus\n.\nUse the\nupdater()\nmethod to update a data contract.\nqualifiedName\nof the data contract,ie:\n<assetQualifiedName>/contract\n(where\nassetQualifiedName\nis, in this example, the\nqualifiedName\nof a Snowflake table).\nname\nof the data contract. (\nNOTE:\nSDKs and\nCLI\nalways generate it in the format:\n\"Data contract for\ndataset\n(\nasset.name\n)\"\n).\nYou can then add any other updates or attributes.\nIn this example, we're updating the contract spec itself\n(make sure to use\n.to_yaml()\nto convert spec instance to YAML string)\nTo update the data contract in Atlan, call the\nsave()\nmethod with the object you've built.\nUpdate a data contract\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nval\nupdatedContractDetails\n=\nDataContractSpec\n.\nfromString\n(\nspec\n)\n// (1)\n.\ntoBuilder\n()\n.\nstatus\n(\nDataContractStatus\n.\nVERIFIED\n)\n// (2)\n.\nbuild\n()\nval\ncontract\n=\nDataContract\n.\nupdater\n(\n// (3)\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/contract\"\n,\n\"Data contract for SALE_TXN\"\n)\n.\ndataContractSpec\n(\nupdatedContractDetails\n.\ntoString\n())\n// (4)\n.\nbuild\n()\nval\nresponse\n=\ncontract\n.\nsave\n(\nclient\n)\n// (5)\nBegin by constructing the updated data contract specification. This example assumes you already have the string YAML form in a variable named\nspec\n, which you have retrieved from the data contract using one of the retrieval methods above.\nWill not retain any comments\nKeep in mind that when programmatically building the specification as an object, no comments will be retained. If you want to have comments in your YAML specification, you must directly manipulate the YAML string yourself.\nAfter converting the specification into a builder (using\n.toBuilder()\n) you can chain any updates you want against it, such as changing its status.\nUse the\nupdater()\nmethod to update a data contract.\nqualifiedName\nof the data contract, ie:\n<assetQualifiedName>/contract\n(where\nassetQualifiedName\nis, in this example, the\nqualifiedName\nof a Snowflake table).\nname\nof the data contract. (\nNOTE:\nSDKs and\nCLI\nalways generate it in the format:\n\"Data contract for\ndataset\n(\nasset.name\n)\"\n).\nYou can then add any other updates or attributes. In this example, we're updating the contract spec itself (must be\nstring\n).\nTo update the data contract in Atlan, call the\nsave()\nmethod with the object you've built. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"DataContract\"\n,\n// (1)\n\"attributes\"\n:\n{\n// (2)\n\"dataContractJson\"\n:\n\"{\\\"type\\\": \\\"Table\\\", \\\"status\\\": \\\"VERIFIED\\\", \\\"kind\\\": \\\"DataContract\\\", \\\"dataset\\\": \\\"SALE_TXN\\\", \\\"data_source\\\": \\\"snowflake\\\", \\\"description\\\": \\\"Created by Python SDK.\\\", \\\"columns\\\": [{\\\"name\\\": \\\"order_id\\\", \\\"data_type\\\": \\\"BIGNUMERIC\\\", \\\"description\\\": \\\"\\\"}]}\"\n,\n\"name\"\n:\n\"Data contract for SALE_TXN\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/snowflake/1717514525/RAW/WIDEWORLD/SALE_TXN/contract\"\n// (4)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nDataContract\n.\nProvide the data contract JSON. In this example, we're updating it with only the minimal required properties as specified by the API. Please check the reference section for the complete\ndata contract specification\n.\ntype of the asset in Atlan (\nTable\n,\nView\n, or\nMaterializedView\n).\nstate of the contract (\nDRAFT\nor\nVERIFIED\n).\nmust always be\nDataContract\n.\nname of the asset as it exists inside Atlan.\nname of the asset connection as it exists inside Atlan.\n(Optional) description of this dataset, for documentation purposes.\n(Optional)\ncolumns\n:\nname of the column as it is defined in the source system (often technical).\nphysical data type of values in this column.\ndescription of this column, for documentation purposes.\nHuman-readable name for your contract.\nThe\nqualifiedName\nof your contract, ie:\n<assetQualifiedName>/contract\n(where\nassetQualifiedName\nis, in this example, the\nqualifiedName\nof a Snowflake table).\nDelete a contract\n¶\nSoft-delete (archive)\n¶\nTo soft-delete, or archive, a contract:\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nComing soon\nComing soon\nComing soon\nHard-delete (purge)\n¶\nTo permanently delete (purge) a contract:\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nComing soon\nComing soon\nComing soon\n2024-06-10\n2025-01-16\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}