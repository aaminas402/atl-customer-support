{
  "source_url": "snippets_workflows_packages_tableau-assets.html",
  "text": "Tableau assets package - Developer\nSkip to content\nTableau assets package\n¶\nThe\nTableau assets package\ncrawls Tableau assets and publishes them to Atlan for discovery.\nDirect extraction\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it\nwill create a new connection and new assets within that connection — which could lead to duplicate assets\nif you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow\n(see\nRe-run existing workflow\nbelow).\n7.0.0\n4.0.0\nTo crawl Tableau assets directly from Tableau:\nJava\nPython\nKotlin\nRaw REST API\nDirect extraction from Tableau\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nWorkflow\ncrawler\n=\nTableauCrawler\n.\ncreator\n(\n// (1)\nclient\n,\n// (2)\n\"production\"\n,\n// (3)\nList\n.\nof\n(\nclient\n.\ngetRoleCache\n().\ngetIdForName\n(\n\"$admin\"\n)),\n// (4)\nnull\n,\nnull\n)\n.\ndirect\n(\n// (5)\n\"example.online.tableau.com\"\n,\n\"atlan-site\"\n,\ntrue\n)\n.\nbasicAuth\n(\n// (6) (7)\n\"atlan-user\"\n,\n\"atlan-pass\"\n)\n.\ninclude\n(\n// (8)\nList\n.\nof\n(\n\"fc2923bd-cf94-2b29-9cdd-9cc2f7a4f029\"\n)\n)\n.\nexclude\n(\nList\n.\nof\n())\n// (9)\n.\ncrawlUnpublished\n(\ntrue\n)\n// (10)\n.\ncrawlHiddenFields\n(\nfalse\n)\n// (11)\n.\nalternateHost\n(\n\"https://alternate.tableau.com\"\n)\n// (12)\n.\nbuild\n()\n// (13)\n.\ntoWorkflow\n();\n// (14)\nWorkflowResponse\nresponse\n=\ncrawler\n.\nrun\n(\nclient\n);\n// (15)\nThe\nTableauCrawler\npackage will create a workflow to crawl assets from Tableau.\nYou must provide Atlan client.\nYou must provide a name for the connection that the Tableau assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nTo configure the crawler for extracting data directly from Tableau then you must provide the following information:\nhostname of your Tableau instance.\nsite to crawl within Tableau.\nwhether to use SSL for the connection.\nWhen using\nbasicAuth()\n, you must provide the following information:\nyour username for accessing Tableau.\nyour password for accessing Tableau.\nor you also can use\npersonalAccessToken()\nauth, then you must provide the following information:\nyour username for accessing Tableau.\nyour access token for accessing Tableau.\nYou can also optionally specify the list of projects to include in crawling. For Tableau assets, this should be specified as a list of project GUIDs. (If set to null, all projects will be crawled.)\nYou can also optionally specify the list of projects to exclude from crawling. For Tableau assets, this should be specified as a list of project GUIDs. (If set to null, no projects will be excluded.)\nYou can also optionally set whether to crawl unpublished worksheets and dashboards (\ntrue\n) or not (\nfalse\n).\nYou can also optionally set whether to crawl hidden datasource fields (\ntrue\n) or not (\nfalse\n).\nYou can also optionally set an alternate host to use for the\n\"View in Tableau\"\nbutton for assets in the UI.\nBuild the minimal package object.\nNow, you can convert the package into a\nWorkflow\nobject.\nYou can then run the workflow using the\nrun()\nmethod on the object you've created. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nDirect extraction from Tableau\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nTableauCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nTableauCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\n)\n.\ndirect\n(\n# (5)\nhostname\n=\n\"example.online.tableau.com\"\n,\nsite\n=\n\"atlan-site\"\n,\nport\n=\n443\n,\nssl_enabled\n=\nTrue\n,\n)\n.\nbasic_auth\n(\n# (6) # (7)\nusername\n=\n\"atlan-user\"\n,\npassword\n=\n\"atlan-pass\"\n,\n)\n.\ninclude\n(\nprojects\n=\n[\n\"fc2923bd-cf94-2b29-9cdd-9cc2f7a4f029\"\n])\n# (8)\n.\nexclude\n(\nprojects\n=\n[])\n# (9)\n.\ncrawl_unpublished\n(\nTrue\n)\n# (10)\n.\ncrawl_hidden_fields\n(\nFalse\n)\n# (11)\n.\nalternate_host\n(\nhostname\n=\n\"https://alternate.tableau.com\"\n)\n# (12)\n.\nto_workflow\n()\n# (13)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (14)\nBase configuration for a new Tableau crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the Tableau assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nTo configure the crawler for extracting data directly from Tableau\nthen you must provide the following information:\nhostname of your Tableau instance.\nport number of the Tableau instance (use\n443\nfor the default).\nsite to crawl within Tableau.\nwhether to use SSL for the connection.\nWhen using\nbasic_auth()\n, you must provide the following information:\nyour username for accessing Tableau.\nyour password for accessing Tableau.\nor you also can use\npersonal_access_token()\nauth, then you must provide the following information:\nyour username for accessing Tableau.\nyour access token for accessing Tableau.\nYou can also optionally specify the list of projects to include in crawling.\nFor Tableau assets, this should be specified as a list of project GUIDs.\n(If set to None, all projects will be crawled.)\nYou can also optionally specify the list of projects to exclude from crawling.\nFor Tableau assets, this should be specified as a list of project GUIDs.\n(If set to None, no projects will be excluded.)\nYou can also optionally set whether to\ncrawl hidden datasource fields (\nTrue\n) or not (\nFalse\n).\nYou can also optionally set whether to\ncrawl unpublished worksheets and dashboards (\nTrue\n) or not (\nFalse\n).\nYou can also optionally set an alternate host to\nuse for the\n\"View in Tableau\"\nbutton for assets in the UI.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nDirect extraction from Tableau\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nval\ncrawler\n=\nTableauCrawler\n.\ncreator\n(\n// (1)\nclient\n,\n// (2)\n\"production\"\n,\n// (3)\nlistOf\n(\nclient\n.\ngetRoleCache\n().\ngetIdForName\n(\n\"\\\n$\nadmin\n\"\n)),\n// (4)\nnull\n,\nnull\n)\n.\ndirect\n(\n// (5)\n\"example.online.tableau.com\"\n,\n\"atlan-site\"\n,\ntrue\n)\n.\nbasicAuth\n(\n// (6) (7)\n\"atlan-user\"\n,\n\"atlan-pass\"\n)\n.\ninclude\n(\n// (8)\nlistOf\n(\n\"fc2923bd-cf94-2b29-9cdd-9cc2f7a4f029\"\n)\n)\n.\nexclude\n(\nemptyList\n())\n// (9)\n.\ncrawlUnpublished\n(\ntrue\n)\n// (10)\n.\ncrawlHiddenFields\n(\nfalse\n)\n// (11)\n.\nalternateHost\n(\n\"https://alternate.tableau.com\"\n)\n// (12)\n.\nbuild\n()\n// (13)\n.\ntoWorkflow\n()\n// (14)\nval\nresponse\n=\ncrawler\n.\nrun\n(\nclient\n)\n// (15)\nThe\nTableauCrawler\npackage will create a workflow to crawl assets from Tableau.\nYou must provide Atlan client.\nYou must provide a name for the connection that the Tableau assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nTo configure the crawler for extracting data directly from Tableau then you must provide the following information:\nhostname of your Tableau instance.\nsite to crawl within Tableau.\nwhether to use SSL for the connection.\nWhen using\nbasicAuth()\n, you must provide the following information:\nyour username for accessing Tableau.\nyour password for accessing Tableau.\nor you also can use\npersonalAccessToken()\nauth, then you must provide the following information:\nyour username for accessing Tableau.\nyour access token for accessing Tableau.\nYou can also optionally specify the list of projects to include in crawling. For Tableau assets, this should be specified as a list of project GUIDs. (If set to null, all projects will be crawled.)\nYou can also optionally specify the list of projects to exclude from crawling. For Tableau assets, this should be specified as a list of project GUIDs.\n(If set to null, no projects will be excluded.)\nYou can also optionally set whether to crawl unpublished worksheets and dashboards (\ntrue\n) or not (\nfalse\n).\nYou can also optionally set whether to crawl hidden datasource fields (\ntrue\n) or not (\nfalse\n).\nYou can also optionally set an alternate host to use for the\n\"View in Tableau\"\nbutton for assets in the UI.\nBuild the minimal package object.\nNow, you can convert the package into a\nWorkflow\nobject.\nYou can then run the workflow using the\nrun()\nmethod on the object you've created. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI. To rerun an existing workflow, see the steps below.\nOffline extraction\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it\nwill create a new connection and new assets within that connection — which could lead to duplicate assets\nif you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow\n(see\nRe-run existing workflow\nbelow).\n7.0.0\nTo crawl Tableau assets from the S3 bucket:\nJava\nPython\nKotlin\nRaw REST API\nComing soon\nCrawl assets from the S3 bucket\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nTableauCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nTableauCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\n)\n.\ns3\n(\n# (5)\nbucket_name\n=\n\"test-bucket\"\n,\nbucket_prefix\n=\n\"test-prefix\"\n,\nbucket_region\n=\n\"test-region\"\n,\n)\n.\nto_workflow\n()\n# (6)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (7)\nBase configuration for a new Tableau crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the Tableau assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nWhen using\ns3()\n, you need to provide the following information:\nname of the bucket/storage that contains the extracted metadata files.\nprefix is everything after the bucket/storage name, including the\npath\n.\n(Optional) name of the region if applicable.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nComing soon\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI. To rerun an existing workflow, see the steps below.\nRe-run existing workflow\n¶\n1.9.5\n4.0.0\nTo re-run an existing workflow for Tableau assets:\nJava\nPython\nKotlin\nRaw REST API\nRe-run existing Tableau workflow\n1\n2\n3\n4\nList\n<\nWorkflowSearchResult\n>\nexisting\n=\nWorkflowSearchRequest\n// (1)\n.\nfindByType\n(\nclient\n,\nTableauCrawler\n.\nPREFIX\n,\n5\n);\n// (2)\n// Determine which of the results is the Tableau workflow you want to re-run...\nWorkflowRunResponse\nresponse\n=\nexisting\n.\nget\n(\nn\n).\nrerun\n(\nclient\n);\n// (3)\nYou can search for existing workflows through the\nWorkflowSearchRequest\nclass.\nYou can find workflows by their type using the\nfindByType()\nhelper method and providing the prefix for one of the packages. In this example, we do so for the\nTableauCrawler\n. (You can also specify the maximum number of resulting workflows you want to retrieve as results.)\nOnce you've found the workflow you want to re-run, you can simply call the\nrerun()\nhelper method on the workflow search result. The\nWorkflowRunResponse\nis just a subtype of\nWorkflowResponse\nso has the same helper method to monitor progress of the workflow run. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nOptionally, you can use the\nrerun(client, true)\nmethod with idempotency to avoid re-running a workflow that is already in running or in a pending state. This will return details of the already running workflow if found, and by default, it is set to\nfalse\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRe-run existing Tableau workflow\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nWorkflowPackage\nclient\n=\nAtlanClient\n()\nexisting\n=\nclient\n.\nworkflow\n.\nfind_by_type\n(\n# (1)\nprefix\n=\nWorkflowPackage\n.\nTABLEAU\n,\nmax_results\n=\n5\n)\n# Determine which Tableau workflow (n)\n# from the list of results you want to re-run.\nresponse\n=\nclient\n.\nworkflow\n.\nrerun\n(\nexisting\n[\nn\n])\n# (2)\nYou can find workflows by their type using the workflow client\nfind_by_type()\nmethod and providing the\nprefix\nfor one of the packages.\nIn this example, we do so for the\nTableauCrawler\n. (You can also specify\nthe\nmaximum number of resulting workflows\nyou want to retrieve as results.)\nOnce you've found the workflow you want to re-run,\nyou can simply call the workflow client\nrerun()\nmethod.\nOptionally, you can use\nrerun(idempotent=True)\nto avoid re-running a workflow that is already in running or in a pending state.\nThis will return details of the already running workflow if found, and by default, it is set to\nFalse\n.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRe-run existing Tableau workflow\n1\n2\n3\n4\n5\nval\nexisting\n=\nWorkflowSearchRequest\n// (1)\n.\nfindByType\n(\nclient\n,\nTableauCrawler\n.\nPREFIX\n,\n5\n)\n// (2)\n// Determine which of the results is the\n// Tableau workflow you want to re-run...\nval\nresponse\n=\nexisting\n.\nget\n(\nn\n).\nrerun\n(\nclient\n)\n// (3)\nYou can search for existing workflows through the\nWorkflowSearchRequest\nclass.\nYou can find workflows by their type using the\nfindByType()\nhelper method and providing the prefix for one of the packages. In this example, we do so for the\nTableauCrawler\n. (You can also specify the maximum number of resulting workflows you want to retrieve as results.)\nOnce you've found the workflow you want to re-run, you can simply call the\nrerun()\nhelper method on the workflow search result. The\nWorkflowRunResponse\nis just a subtype of\nWorkflowResponse\nso has the same helper method to monitor progress of the workflow run. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nOptionally, you can use the\nrerun(client, true)\nmethod with idempotency to avoid re-running a workflow that is already in running or in a pending state. This will return details of the already running workflow if found, and by default, it is set to\nfalse\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRequires multiple steps through the raw REST API\nFind the existing workflow.\nSend through the resulting re-run request.\nPOST /api/service/workflows/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n5\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n,\n\"query\"\n:\n{\n\"prefix\"\n:\n{\n\"metadata.name.keyword\"\n:\n{\n\"value\"\n:\n\"atlan-tableau\"\n// (1)\n}\n}\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"metadata.creationTimestamp\"\n:\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n},\n\"order\"\n:\n\"desc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n}\nSearching by the\natlan-tableau\nprefix will ensure you only find existing Tableau assets workflows.\nName of the workflow\nThe name of the workflow will be nested within the\n_source.metadata.name\nproperty of the response object.\n(Remember since this is a search, there could be multiple results, so you may want to use the other\ndetails in each result to determine which workflow you really want.)\nPOST /api/service/workflows/submit\n100\n101\n102\n103\n104\n{\n\"namespace\"\n:\n\"default\"\n,\n\"resourceKind\"\n:\n\"WorkflowTemplate\"\n,\n\"resourceName\"\n:\n\"atlan-tableau-1684500411\"\n// (1)\n}\nSend the name of the workflow as the\nresourceName\nto rerun it.\n2023-01-27\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}