{
  "source_url": "snippets_common-examples_relationship-attributes.html",
  "text": "Manage asset relationships with attributes - Developer\nSkip to content\nManage asset relationships with attributes\n¶\nAtlan supports relationships between assets that can include attributes, similar to how assets themselves have attributes. These relationship-level attributes provide additional context and metadata about the connection between assets.\nThe SDK enables you to create, retrieve, and delete these attributed relationships programmatically.\nRelationships with attribute support\n¶\nThe following relationship types support attributes that you can set via the SDK:\nAvailable attributed relationships\nAtlasGlossaryAntonym\nAtlasGlossarySynonym\nAtlasGlossaryReplacementTerm\nAtlasGlossarySemanticAssignment\nAtlasGlossaryPreferredTerm\nAtlasGlossaryRelatedTerm\nAtlasGlossaryTermCategorization\nAtlasGlossaryTranslation\nAtlasGlossaryValidValue\nAtlasGlossaryIsARelationship\nCustomParentEntityCustomChildEntities\nCustomRelatedFromEntitiesCustomRelatedToEntities\nUserDefRelationship\nAdd user-defined relationship\n¶\n7.1.0\nThis example demonstrates how to add\nUserDefRelationship\nbetween glossary terms. While this relationship type is currently visible in the Atlan UI for glossary terms, you can create any other supported relationship types that have attributes (\nas listed above\n) between any asset types using similar steps shown in the snippet below. All these relationships will be persisted in the backend (metastore) even if they're not currently visible in the Atlan UI.\nPython\nJava\nRaw REST API\nAdd user-defined relationship between terms\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAtlasGlossaryTerm\nfrom\npyatlan.model.assets.relations\nimport\nUserDefRelationship\nclient\n=\nAtlanClient\n()\n# Create updater for the source term\nterm1_to_update\n=\nAtlasGlossaryTerm\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"FpWBfqOfP0qZQ6tCpK10n@nrrnNyRABZTc6CEKwHh73\"\n,\nname\n=\n\"Policy\"\n,\nglossary_guid\n=\n\"55aaaa56-d8cd-4f19-8026-10d511a9b071\"\n)\n# Create reference to the target term\nterm2\n=\nAtlasGlossaryTerm\n.\nref_by_guid\n(\n\"f558a01a-2e16-440c-ba2d-fed2099e540a\"\n)\n# (2)\n# Create the user-defined relationship with attributes\nudr\n=\nUserDefRelationship\n(\n# (3)\nfrom_type_label\n=\n\"Sold by\"\n,\nto_type_label\n=\n\"Sells\"\n)\n# Build and assign the relationship\nterm1_to_update\n.\nuser_def_relationship_to\n=\n[\n# (4)\nudr\n.\nuser_def_relationship_to\n(\nterm2\n)\n]\n# Save the relationship\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nterm1_to_update\n)\n# (5)\nCreate an updater for the source term using\n.updater()\nwith the\nqualified_name\n,\nname\n, and\nglossary_guid\nof the term you want to add the relationship to.\nCreate a reference to the target term using\nref_by_guid()\nor\nref_by_qualified_name()\n.\nDefine the relationship by creating a\nUserDefRelationship\nobject with attributes like\nfrom_type_label\nand\nto_type_label\n.\nBuild the relationship using the\nuser_def_relationship_to()\nmethod and assign it to the\nuser_def_relationship_to\nattribute.\nSave the changes using\nclient.asset.save()\nto persist the relationship in Atlan.\nComing soon\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"AtlasGlossaryTerm\"\n,\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Policy\"\n,\n// (1)\n\"qualifiedName\"\n:\n\"FpWBfqOfP0qZQ6tCpK10n@nrrnNyRABZTc6CEKwHh73\"\n,\n\"anchor\"\n:\n{\n\"typeName\"\n:\n\"AtlasGlossary\"\n,\n\"guid\"\n:\n\"55aaaa56-d8cd-4f19-8026-10d511a9b071\"\n},\n\"userDefRelationshipTo\"\n:\n[\n{\n\"typeName\"\n:\n\"AtlasGlossaryTerm\"\n,\n// (2)\n\"guid\"\n:\n\"f558a01a-2e16-440c-ba2d-fed2099e540a\"\n,\n\"relationshipAttributes\"\n:\n{\n\"typeName\"\n:\n\"UserDefRelationship\"\n,\n// (3)\n\"attributes\"\n:\n{\n\"toTypeLabel\"\n:\n\"Sells\"\n,\n\"fromTypeLabel\"\n:\n\"Sold by\"\n}\n},\n\"relationshipType\"\n:\n\"UserDefRelationship\"\n}\n]\n}\n}\n]\n}\nProvide source asset details: Include the required attributes\nname\n,\nqualifiedName\n, and glossary\nguid\nfor the term you want to add the relationship to.\nReference the target asset: Create a reference to the target term using its\nguid\n.\nDefine relationship attributes: Provide the necessary attributes for the\nUserDefRelationship\n, including\ntoTypeLabel\nand\nfromTypeLabel\n.\nRelationship visibility\nUser-defined relationships between glossary terms are visible in the Atlan UI. For other asset types, relationships are stored in the backend but may not be visible in the UI until support is added.\nRemove user-defined relationship\n¶\n7.1.0\nThis example demonstrates how to remove\nUserDefRelationship\nbetween glossary terms. You can use the same approach to remove any attributed relationship type (\nas listed above\n) between any asset types using the steps shown in the snippet below.\nPython\nJava\nRaw REST API\nRemove user-defined relationship between terms\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAtlasGlossaryTerm\nclient\n=\nAtlanClient\n()\n# Create updater for the source term\nterm1_to_update\n=\nAtlasGlossaryTerm\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"FpWBfqOfP0qZQ6tCpK10n@nrrnNyRABZTc6CEKwHh73\"\n,\nname\n=\n\"Policy\"\n,\nglossary_guid\n=\n\"55aaaa56-d8cd-4f19-8026-10d511a9b071\"\n)\n# Remove all outgoing relationships by setting to empty list\nterm1_to_update\n.\nuser_def_relationship_to\n=\n[]\n# (2)\n# Save the changes to remove the relationship\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nterm1_to_update\n)\n# (3)\nCreate an updater for the source term using\n.updater()\nwith the\nqualified_name\n,\nname\n, and\nglossary_guid\nof the term you want to remove relationships from.\nClear relationships by assigning an empty list\n[]\nto\nuser_def_relationship_to\nto remove all existing outgoing relationships.\nSave the changes using\nclient.asset.save()\nto persist the removal in Atlan.\nComing soon\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"AtlasGlossaryTerm\"\n,\n\"attributes\"\n:\n{\n\"anchor\"\n:\n{\n// (1)\n\"typeName\"\n:\n\"AtlasGlossary\"\n,\n\"guid\"\n:\n\"55aaaa56-d8cd-4f19-8026-10d511a9b071\"\n},\n\"name\"\n:\n\"Policy\"\n,\n\"qualifiedName\"\n:\n\"FpWBfqOfP0qZQ6tCpK10n@nrrnNyRABZTc6CEKwHh73\"\n,\n\"userDefRelationshipTo\"\n:\n[]\n// (2)\n}\n}\n]\n}\nProvide source asset details: Include the required attributes\nname\n,\nqualifiedName\n, and glossary\nguid\nfor the term you want to add the relationship to.\nClear relationships by assigning an empty array\n[]\nto\nuserDefRelationshipTo\nto remove all existing outgoing relationships.\nComplete removal\nSetting\nuser_def_relationship_to = []\nremoves\nall\noutgoing user-defined relationships from the asset. To remove only specific relationships while keeping others, you would need to retrieve the existing relationships first and reconstruct the list without the unwanted ones.\nRetrieve user-defined relationship\n¶\n7.1.0\nThis example demonstrates how to retrieve\nUserDefRelationship\nbetween glossary terms. You can use the same approach to retrieve any attributed relationship type (\nas listed above\n) between any asset types. While\nUserDefRelationship\nis visible in the UI for glossary terms, all relationships are persisted in the backend regardless of UI visibility.\nPython\nJava\nRaw REST API\nRetrieve user-defined relationships between terms\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nAtlasGlossaryTerm\nfrom\npyatlan.model.assets.relations\nimport\nUserDefRelationship\nfrom\npyatlan.model.query\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\n# Build search request for both terms in the relationship\nrequest\n=\n(\nFluentSearch\n()\n.\nselect\n()\n.\nwhere_some\n(\nAtlasGlossaryTerm\n.\nGUID\n.\neq\n(\n\"f558a01a-2e16-440c-ba2d-fed2099e540a\"\n))\n# (1)\n.\nwhere_some\n(\nAtlasGlossaryTerm\n.\nGUID\n.\neq\n(\n\"540ee0f6-bb26-4b1a-88b7-31cfc26746b4\"\n))\n# (2)\n.\ninclude_on_results\n(\nAtlasGlossaryTerm\n.\nUSER_DEF_RELATIONSHIP_TO\n)\n# (3)\n.\ninclude_on_results\n(\nAtlasGlossaryTerm\n.\nUSER_DEF_RELATIONSHIP_FROM\n)\n# (4)\n.\ninclude_relationship_attributes\n(\nTrue\n)\n# (5)\n.\nto_request\n()\n)\n# Execute the search\nresults\n=\nclient\n.\nasset\n.\nsearch\n(\nrequest\n)\n# (6)\nassert\nresults\nand\nresults\n.\ncount\n==\n2\n# (7)\n# Access the source term (with outgoing relationship)\nsource_term\n=\nresults\n.\ncurrent_page\n()[\n0\n]\n# (8)\nif\nsource_term\n.\nuser_def_relationship_to\n:\nrelationship\n=\nsource_term\n.\nuser_def_relationship_to\n[\n0\n]\nprint\n(\nf\n\"Source term GUID:\n{\nrelationship\n.\nguid\n}\n\"\n)\nprint\n(\nf\n\"Relationship type:\n{\nrelationship\n.\ntype_name\n}\n\"\n)\nprint\n(\nf\n\"Relationship attributes:\n{\nrelationship\n.\nattributes\n.\nrelationship_attributes\n.\nattributes\n}\n\"\n)\n# Access the target term (with incoming relationship)\ntarget_term\n=\nresults\n.\ncurrent_page\n()[\n1\n]\nif\ntarget_term\n.\nuser_def_relationship_from\n:\nrelationship\n=\ntarget_term\n.\nuser_def_relationship_from\n[\n0\n]\nprint\n(\nf\n\"Target term GUID:\n{\nrelationship\n.\nguid\n}\n\"\n)\nprint\n(\nf\n\"Relationship type:\n{\nrelationship\n.\ntype_name\n}\n\"\n)\nprint\n(\nf\n\"Relationship attributes:\n{\nrelationship\n.\nattributes\n.\nrelationship_attributes\n.\nattributes\n}\n\"\n)\nSearch for source term: Provide the GUID of the source term (relationship origin -\nUSER_DEF_RELATIONSHIP_TO\n).\nSearch for target term: Provide the GUID of the target term (relationship destination -\nUSER_DEF_RELATIONSHIP_FROM\n).\nInclude outgoing relationships: Ensure results include the\nUSER_DEF_RELATIONSHIP_TO\nattribute.\nInclude incoming relationships: Ensure results include the\nUSER_DEF_RELATIONSHIP_FROM\nattribute.\nInclude relationship attributes: Set to\nTrue\nto retrieve attributes for each relationship.\nExecute search: Run the search request using\nclient.asset.search()\n.\nVerify results: Since we're retrieving two specific terms with relationships,\nresults.count\nshould be\n2\n.\nAccess results: Iterate through results or use\ncurrent_page()[index]\nto access specific terms.\nComing soon\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n{\n\"attributes\"\n:\n[\n\"userDefRelationshipTo\"\n,\n// (1)\n\"userDefRelationshipFrom\"\n// (2)\n],\n\"dsl\"\n:\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n100\n,\n\"aggregations\"\n:\n{},\n\"track_total_hits\"\n:\ntrue\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"must\"\n:\n[\n{\n\"term\"\n:\n{\n\"__superTypeNames.keyword\"\n:\n{\n\"value\"\n:\n\"Referenceable\"\n}\n}\n}\n],\n\"should\"\n:\n[\n{\n\"term\"\n:\n{\n\"__guid\"\n:\n{\n\"value\"\n:\n\"f558a01a-2e16-440c-ba2d-fed2099e540a\"\n,\n// (3)\n\"case_insensitive\"\n:\nfalse\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__guid\"\n:\n{\n\"value\"\n:\n\"540ee0f6-bb26-4b1a-88b7-31cfc26746b4\"\n,\n// (4)\n\"case_insensitive\"\n:\nfalse\n}\n}\n}\n],\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__superTypeNames.keyword\"\n:\n{\n\"value\"\n:\n\"Asset\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__superTypeNames.keyword\"\n:\n{\n\"value\"\n:\n\"Referenceable\"\n}\n}\n}\n],\n\"minimum_should_match\"\n:\n1\n}\n},\n\"sort\"\n:\n[\n{\n\"__guid\"\n:\n{\n\"order\"\n:\n\"asc\"\n}\n}\n]\n},\n\"relationAttributes\"\n:\n[\n\"name\"\n],\n\"includeRelationshipAttributes\"\n:\ntrue\n// (5)\n}\nInclude outgoing relationships: Ensure results include the\nUSER_DEF_RELATIONSHIP_TO\nattribute.\nInclude incoming relationships: Ensure results include the\nUSER_DEF_RELATIONSHIP_FROM\nattribute.\nSearch for source term: Provide the GUID of the source term (relationship origin -\nUSER_DEF_RELATIONSHIP_TO\n).\nSearch for target term: Provide the GUID of the target term (relationship destination -\nUSER_DEF_RELATIONSHIP_FROM\n).\nInclude relationship attributes: Set to\ntrue\nto retrieve attributes for each relationship.\nRelationship direction\nUSER_DEF_RELATIONSHIP_TO\n: Outgoing relationships from this asset\nUSER_DEF_RELATIONSHIP_FROM\n: Incoming relationships to this asset\nAccessing attributes\nRelationship attributes are nested under\nrelationship.attributes.relationship_attributes.attributes\n. Make sure to include\ninclude_relationship_attributes(True)\nin your search to retrieve these values.\n2025-06-27\n2025-06-27\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}