{
  "source_url": "patterns_create_airflow.html",
  "text": "Manage Airflow assets - Developer\nSkip to content\nManage Airflow assets\n¶\nOperations on Airflow assets (AirflowDag, AirflowTask).\nIn general, these should be:\nCreated in top-down order\n(connection, then AirflowDag, then AirflowTask)\nDeleted in bottom-up order (tasks, then dags, then connections)\n1\nerDiagram\nConnection ||--o{ AirflowDag : contains\nAirflowDag ||--o{ AirflowTask : contains\nAsset structure\n¶\nConnection\n¶\n7.0.0\n1.11.2\nAn Airflow\nconnection\nrequires a\nname\nand\nqualifiedName\n. For creation, specific settings are also required to distinguish it as an Airflow connection rather than another type of connection. In addition,\nat least one\nof\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nJava\nPython\nKotlin\nRaw REST API\nCreate an Airflow connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nString\nadminRoleGuid\n=\nclient\n.\ngetRoleCache\n().\ngetIdForName\n(\n\"$admin\"\n);\n// (1)\nConnection\nconnection\n=\nConnection\n.\ncreator\n(\n// (2)\n\"airflow-connection\"\n,\n// (3)\nAtlanConnectorType\n.\nAIRFLOW\n,\n// (4)\nList\n.\nof\n(\nadminRoleGuid\n),\n// (5)\nList\n.\nof\n(\n\"group2\"\n),\n// (6)\nList\n.\nof\n(\n\"jsmith\"\n))\n// (7)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nconnection\n.\nsave\n(\nclient\n);\n// (8)\nString\nconnectionQualifiedName\n=\nresponse\n.\ngetCreatedAssets\n().\nget\n(\n0\n).\ngetQualifiedName\n();\n// (9)\nRetrieve the GUID for the admin role, to use later\nfor defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection to\nAIRFLOW\n.\nList the workspace roles that should be able to administer the connection\n(or null if none). All users with that workspace role (current and future) will be\nadministrators of the connection. Note that the values here need to be the GUID(s)\nof the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nActually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.)\nCreate an Airflow connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nConnection\n,\nAirflowDag\n,\nAirflowTask\nfrom\npyatlan.model.enums\nimport\nAtlanConnectorType\nclient\n=\nAtlanClient\n()\nadmin_role_guid\n=\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)\n# (1)\nconnection\n=\nConnection\n.\ncreator\n(\n# (2)\nclient\n=\nclient\n,\n# (3)\nname\n=\n\"airflow-connection\"\n,\n# (4)\nconnector_type\n=\nAtlanConnectorType\n.\nAIRFLOW\n,\n# (5)\nadmin_roles\n=\n[\nadmin_role_guid\n],\n# (6)\nadmin_groups\n=\n[\n\"group2\"\n],\n# (7)\nadmin_users\n=\n[\n\"jsmith\"\n]\n# (8)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nconnection\n)\n# (9)\nconnection_qualified_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nConnection\n)[\n0\n]\n.\nqualified_name\n# (10)\nRetrieve the GUID for the admin role, to use later for defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nYou must provide a client instance.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection to\nAIRFLOW\n.\nList the workspace roles that should be able to administer the connection\n(or\nNone\nif none). All users with that workspace role (current and future) will be\nadministrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nList the group names that can administer this connection (or\nNone\nif none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nList the user names that can administer this connection (or\nNone\nif none). Note that the values here are the username(s) of the user(s).\nAt least one of\nadmin_roles\n,\nadmin_groups\n, or\nadmin_users\nmust be provided.\nActually call Atlan to create the connection.\nRetrieve the qualifiedName for use in subsequent creation calls.\n(You'd probably want to do some\nNone\nchecking first.)\nCreate an Airflow connection\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\nadminRoleGuid\n=\nclient\n.\nroleCache\n.\ngetIdForName\n(\n\"\\\n$\nadmin\n\"\n)\n// (1)\nval\nconnection\n=\nConnection\n.\ncreator\n(\n// (2)\n\"airflow-connection\"\n,\n// (3)\nAtlanConnectorType\n.\nAIRFLOW\n,\n// (4)\nlistOf\n(\nadminRoleGuid\n),\n// (5)\nlistOf\n(\n\"group2\"\n),\n// (6)\nlistOf\n(\n\"jsmith\"\n))\n// (7)\n.\nbuild\n()\nval\nresponse\n=\nconnection\n.\nsave\n(\nclient\n)\n// (8)\nval\nconnectionQualifiedName\n=\nresponse\n.\ncreatedAssets\n[\n0\n]\n.\nqualifiedName\n// (9)\nRetrieve the GUID for the admin role, to use later\nfor defining the roles that can administer the connection.\nBuild up the minimum request to create a connection.\nProvide a human-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nSet the type of connection to\nAIRFLOW\n.\nList the workspace roles that should be able to administer the connection\n(or null if none). All users with that workspace role (current and future) will be\nadministrators of the connection. Note that the values here need to be the GUID(s)\nof the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nActually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.)\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"Connection\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"airflow-connection\"\n,\n// (2)\n\"connectorName\"\n:\n\"airflow\"\n,\n// (3)\n\"qualifiedName\"\n:\n\"default/airflow/123456789\"\n,\n// (4)\n\"category\"\n:\n\"elt\"\n,\n// (5)\n\"adminRoles\"\n:\n[\n// (6)\n\"e7ae0295-c60a-469a-bd2c-fb903943aa02\"\n],\n\"adminGroups\"\n:\n[\n// (7)\n\"group2\"\n],\n\"adminUsers\"\n:\n[\n// (8)\n\"jsmith\"\n]\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nConnection\n.\nHuman-readable name for your connection, such as\nproduction\nor\ndevelopment\n.\nThe\nconnectorName\nmust be exactly\nairflow\n.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/airflow/<epoch>\n, where\n<epoch>\nis the time in milliseconds at which the connection is being created.\nThe\ncategory\nmust be\nelt\n.\nList any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nList any users that can administer this connection. Note that the values here are the username(s) of the user(s).\nAt least one of\nadminRoles\n,\nadminGroups\n, or\nadminUsers\nmust be provided.\nAccess policies\nAtlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection.\nYou may therefore need to wait before you'll be able to create the assets below within the connection.\nTo confirm access,\nretrieve the connection\nafter it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets.\nNote: if you are\nreusing\nan existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions.\nAirflowDag\n¶\n2.1.4\n4.0.0\nAn\nAirflowDag\nrequires a\nname\nand a\nqualifiedName\n.\nFor creation, you also need to specify the\nconnectionQualifiedName\nof the connection for the dag.\nJava\nPython\nKotlin\nRaw REST API\nCreate an Airflow dag\n11\n12\n13\n14\n15\n16\n17\nAirflowDag\nairflowDag\n=\nAirflowDag\n.\ncreator\n(\n// (1)\n\"myAirflowDag\"\n,\n// (2)\nconnectionQualifiedName\n// (3)\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nairflowDag\n.\nsave\n(\nclient\n);\n// (4)\nairflowDag\n=\nresponse\n.\ngetResult\n(\nairflowDag\n);\n// (5)\nBuild up the minimum request to create a dag.\nProvide a human-readable name for your dag.\nProvide the\nqualifiedName\nof the Airflow connection.\nActually call Atlan to create the dag. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created dag for use in subsequent creation calls. (You'd probably want to do some\nnull\nchecking first.)\nCreate an Airflow dag\n17\n18\n19\n20\n21\n22\nairflow_dag\n=\nAirflowDag\n.\ncreator\n(\n# (1)\nname\n=\n\"myAirflowDag\"\n,\n# (2)\nconnection_qualified_name\n=\nconnection_qualified_name\n# (3)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nairflow_dag\n)\n# (4)\nairflow_dag_qualifed_name\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nAirflowDag\n)[\n0\n]\n.\nqualified_name\n# (5)\nBuild up the minimum request to create a dag.\nProvide a human-readable name for your dag.\nProvide the\nqualifiedName\nof the Airflow connection.\nActually call Atlan to create the dag.\nRetrieve the created dag for use in subsequent creation calls.\n(You'd probably want to do some\nNone\nchecking first.)\nCreate an Airflow dag\n11\n12\n13\n14\n15\n16\n17\nvar\nairflowDag\n=\nAirflowDag\n.\ncreator\n(\n// (1)\n\"myAirflowDag\"\n,\n// (2)\nconnectionQualifiedName\n// (3)\n)\n.\nbuild\n()\nval\nresponse\n=\nairflowDag\n.\nsave\n(\nclient\n)\n// (4)\nairflowDag\n=\nresponse\n.\ngetResult\n(\nairflowDag\n)\n// (5)\nBuild up the minimum request to create a dag.\nProvide a human-readable name for your dag.\nProvide the\nqualifiedName\nof the Airflow connection.\nActually call Atlan to create the dag. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve the created dag for use in subsequent creation calls. (You'd probably want to do some\nnull\nchecking first.)\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"AirflowDag\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"myAirflowDag\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/airflow/123456789/myAirflowDag\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/airflow/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"airflow\"\n// (5)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nAirflowDag\n.\nHuman-readable name for your dag.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/airflow/<epoch>/<name>\n,\nwhere\ndefault/airflow/<epoch>\nis the qualifiedName of the connection for this\ndag and\n<name>\nis the unique name for this dag.\nThe\nconnectionQualifiedName\nmust be the exact\nqualifiedName\nof the connection for this dag.\nThe\nconnectorName\nmust be exactly\nairflow\n.\nAirflowTask\n¶\n2.1.4\n4.0.0\nAn\nAirflowTask\nrequires a\nname\nand a\nqualifiedName\n.\nFor creation, you also need to specify the\nairflowDagQualifiedName\nof the dag that will contain the task.\nJava\nPython\nKotlin\nRaw REST API\nCreate an Airflow task\n18\n19\n20\n21\n22\n23\nAirflowTask\nairflowTask\n=\nAirflowTask\n.\ncreator\n(\n// (1)\n\"myAirflowTask\"\n,\n// (2)\nairflowDag\n// (3)\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nairflowTask\n.\nsave\n(\nclient\n);\n// (4)\nBuild up the minimum request to create a task.\nProvide a human-readable name for your task.\nProvide the dag for this task. If you did not already have the DAG, you could also use\nAirflowDag.refByGuid()\nwith the GUID of the DAG, or\nAirflowDag.refByQualifiedName()\nwith the\nqualifiedName\nof the DAG.\nActually call Atlan to create the task. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreate an Airflow task\n23\n24\n25\n26\n27\nairflowTask\n=\nAirflowTask\n.\ncreator\n(\n# (1)\nname\n=\n\"myAirflowTask\"\n,\n# (2)\nairflow_dag_qualified_name\n=\nairflow_dag_qualifed_name\n# (3)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nairflowTask\n)\n# (4)\nBuild up the minimum request to create a task.\nProvide a human-readable name for your task.\nProvide the\nqualified_name\nof the dag for this task.\nActually call Atlan to create the task.\nCreate an Airflow task\n18\n19\n20\n21\n22\n23\nval\nairflowTask\n=\nAirflowTask\n.\ncreator\n(\n// (1)\n\"myAirflowTask\"\n,\n// (2)\nairflowDag\n// (3)\n)\n.\nbuild\n()\nval\nresponse\n=\nairflowTask\n.\nsave\n(\nclient\n)\n// (4)\nBuild up the minimum request to create a task.\nProvide a human-readable name for your task.\nProvide the dag for this task. If you did not already have the DAG, you could also use\nAirflowDag.refByGuid()\nwith the GUID of the DAG, or\nAirflowDag.refByQualifiedName()\nwith the\nqualifiedName\nof the DAG.\nActually call Atlan to create the task. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"AirflowTask\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"myAirflowTask\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/airflow/123456789/myAirflowDag/myAirflowTask\"\n,\n// (3)\n\"connectionQualifiedName\"\n:\n\"default/airflow/123456789\"\n,\n// (4)\n\"connectorName\"\n:\n\"airflow\"\n,\n// (5)\n\"airflowDag\"\n:\n{\n// (6)\n\"typeName\"\n:\n\"AirflowDag\"\n,\n// (7)\n\"uniqueAttributes\"\n:\n{\n// (8)\n\"qualifiedName\"\n:\n\"default/airflow/123456789/myAirflowDag\"\n,\n}\n},\n\"airflowDagName\"\n:\n\"myAirflowDag\"\n,\n// (9)\n\"airflowDagQualifiedName\"\n:\n\"default/airflow/123456789/myAirflowDag\"\n// (10)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nAirflowTask\n.\nHuman-readable name for your task.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/airflow/<epoch>/<dag>/<name>\n,\nwhere\ndefault/airflow/<epoch>/<dag>\nis the qualifiedName of the dag that contains\nthis task and\n<name>\nis the unique name for this task.\nThe\nconnectionQualifiedName\nmust be the exact qualifiedName of the connection for this task.\nThe\nconnectorName\nmust be exactly\nairflow\n.\nThe dag in which this task exists is embedded in the\nairflowDag\nattribute.\nThe\ntypeName\nfor this embedded reference must be\nAirflowDag\n.\nTo complete the reference, you must include a\nuniqueAttributes\ntask\nwith the\nqualifiedName\nof the dag. Note: the dag must already exist\nin Atlan before creating the task.\nThe\nairflowDagName\nshould be the human-readable name of the dag.\nThe\nairflowDagQualifiedName\nshould be the qualifiedName of the dag.\nAvailable relationships\n¶\nEvery level of the\nAirflow\nstructure is an\nAsset\n, and can therefore be related to the following other assets.\nerDiagram\nAsset }o--o{ AtlasGlossaryTerm : meanings\nAsset ||--o{ Link : links\nAsset ||--o| Readme : readme\nAsset }o--o{ Process : inputToProcesses\nAsset }o--o{ Process : outputFromProcesses\nAtlasGlossaryTerm\n¶\nA\nglossary term\nprovides meaning to an asset. The\nlink terms to assets snippet\nprovides more detail on setting this relationship.\nLink\n¶\nA\nlink\nprovides additional context to an asset, by providing a URL to additional information.\nReadme\n¶\nA\nREADME\nprovides rich documentation for an asset. The\nadd asset READMEs snippet\nprovides more detail on setting this relationship.\nProcess\n¶\nA\nprocess\nprovides lineage information for an asset. An asset can be both an input and an output for one or more processes. The\nlineage snippets\nprovide more detail on creating and working with lineage.\nAlthough if you want to delete everything in a connection, your better avenue is the packaged\nconnection delete utility\nin the UI.\n↩\n2024-05-02\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}