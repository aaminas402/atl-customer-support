{
  "source_url": "toolkits_custom-package_render.html",
  "text": "Render your package - Developer\nSkip to content\nRender your package\nÂ¶\nFull example (expand for details)\nFollowing is the complete package file for the running example, without any comments, in case you want to try it yourself as a sort of \"hello world\" example:\nMyCustomPackage.pkl\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\namends\n\"package://developer.atlan.com/toolkits/custom-package/config@5.0.3#/Framework.pkl\"\nimport\n\"pkl:semver\"\nimport\n\"package://developer.atlan.com/toolkits/custom-package/config@5.0.3#/Connectors.pkl\"\npackageId\n=\n\"@csa/openapi-spec-loader\"\npackageName\n=\n\"OpenAPI Spec Loader\"\nversion\n=\nsemver\n.\nVersion\n(\n\"1.0.0\"\n)\ndescription\n=\n\"Loads API specs and paths from an OpenAPI (v3) definition.\"\niconUrl\n=\n\"http://assets.atlan.com/assets/apispec.png\"\ndocsUrl\n=\n\"https://developer.atlan.com/samples/loaders/openapi/\"\nimplementationLanguage\n=\n\"Kotlin\"\ncontainerImage\n=\n\"ghcr.io/atlanhq/atlan-kotlin-samples:\\(version)\"\ncontainerCommand\n{\n\"/dumb-init\"\n\"--\"\n\"java\"\n\"OpenAPISpecLoaderKt\"\n}\noutputs\n{\nfiles\n{\n[\n\"debug-logs\"\n]\n=\n\"/tmp/debug.log\"\n}\n}\nkeywords\n{\n\"kotlin\"\n\"crawler\"\n\"openapi\"\n}\npreview\n=\ntrue\nconnectorType\n=\nConnectors\n.\nAPI\nuiConfig\n{\ntasks\n{\n[\n\"Configuration\"\n]\n{\ndescription\n=\n\"OpenAPI spec configuration\"\ninputs\n{\n[\n\"spec_url\"\n]\n=\nnew\nTextInput\n{\ntitle\n=\n\"Specification URL\"\nrequired\n=\ntrue\nhelpText\n=\n\"Full URL to the JSON form of the OpenAPI specification.\"\nplaceholderText\n=\n\"https://petstore3.swagger.io/api/v3/openapi.json\"\n}\n}\n}\n[\n\"Connection\"\n]\n{\ndescription\n=\n\"Connection details\"\ninputs\n{\n[\n\"connection_usage\"\n]\n=\nnew\nRadio\n{\ntitle\n=\n\"Connection\"\nrequired\n=\ntrue\npossibleValues\n{\n[\n\"CREATE\"\n]\n=\n\"Create\"\n[\n\"REUSE\"\n]\n=\n\"Reuse\"\n}\ndefault\n=\n\"REUSE\"\nfallback\n=\ndefault\nhelpText\n=\n\"Whether to create a new connection to hold these API assets, or reuse an existing connection.\"\n}\n[\n\"connection\"\n]\n=\nnew\nConnectionCreator\n{\ntitle\n=\n\"Connection\"\nrequired\n=\ntrue\nhelpText\n=\n\"Enter details for a new connection to be created.\"\n}\n[\n\"connection_qualified_name\"\n]\n=\nnew\nConnectionSelector\n{\ntitle\n=\n\"Connection\"\nrequired\n=\ntrue\nhelpText\n=\n\"Select an existing connection to load assets into.\"\n}\n}\n}\n}\nrules\n{\nnew\nUIRule\n{\nwhenInputs\n{\n[\n\"connection_usage\"\n]\n=\n\"REUSE\"\n}\nrequired\n{\n\"connection_qualified_name\"\n}\n}\nnew\nUIRule\n{\nwhenInputs\n{\n[\n\"connection_usage\"\n]\n=\n\"CREATE\"\n}\nrequired\n{\n\"connection\"\n}\n}\n}\n}\nRender through\npkl\nÂ¶\nOnce your package is defined, you can then \"render\" it into the files Atlan needs using the\npkl\nCLI:\npkl\neval\nMyCustomPackage.pkl\n-m\n.\nThis will generate multiple YAML files representing the package, in the folder structure required by Atlan, ready to be submitted in a PR.\nOutput produced\nÂ¶\nRendering the package will create various files and subdirectories under the output directory you specify (the location you specify for\n-m\n), depending on the\nimplementationLanguage\nyou defined in your package:\nPython\nKotlin\nâ”œâ”€â”€\nrequirements.txt\n# (1)\nâ”œâ”€â”€\nrequirements-dev.txt\n# (2)\nâ”œâ”€â”€\nversion.txt\n# (3)\nâ”œâ”€â”€\nDockerfile\n# (4)\nâ”œâ”€â”€\n{{\npackage_name\n}}\n/\nâ”‚\nâ”œâ”€â”€\n__init__.py\n# (5)\nâ”‚\nâ”œâ”€â”€\nlogging.conf\n# (6)\nâ”‚\nâ”œâ”€â”€\nmain.py.example\n# (7)\nâ”‚\nâ””â”€â”€\n{{\npackage_name\n}}\n_cfg.py\n# (8)\nâ”‚\nâ””â”€â”€\nbuild/\n# (9)\nâ””â”€â”€\npackage/\nâ””â”€â”€\n{{\npackage-name\n}}\n/\nâ”œâ”€â”€\npackage.json\n# (10)\nâ”œâ”€â”€\nindex.js\n# (11)\nâ”œâ”€â”€\nconfigmaps/\nâ”‚\nâ””â”€â”€\ndefault.yaml\n# (12)\nâ”‚\nâ””â”€â”€\ntemplates/\nâ””â”€â”€\ndefault.yaml\n# (13)\nMinimal dependencies for a Python-based package (you can of course extend this with other dependencies if your package requires them).\nMinimal dependencies for testing a Python-based package (you can of course extend this with other dependencies if your package requires them).\nVersion of the Python package.\nDefault container image file for a Python package.\nEmpty init file for Python.\nDefault logging configuration for Python to separate info and debug-level logging.\nSkeletal starting point for a main program using the runtime toolkit.\nA strongly-typed class capturing all the configuration details a user could provide, which we can use with the package's runtime toolkit.\nThe\nbuild\nsubdirectory will contain the artifacts needed by Argo to deploy your package.\nThe\npackage.json\ncontains descriptive metadata about your package, such as its name, description, icon, and documentation links.\nThe\nindex.js\nis a placeholder file, which should be left as-is.\nYour package's UI configuration is bundled into this\nconfigmaps/default.yaml\nfile.\nYour package's orchestration is bundled into this\ntemplates/default.yaml\nfile.\nâ”œâ”€â”€\nsrc/\nâ”‚\nâ””â”€â”€\nmain/\nâ”‚\nâ””â”€â”€\nkotlin/\nâ”‚\nâ””â”€â”€\n{{\nPackageName\n}}\nCfg.kt\n# (1)\nâ”‚\nâ””â”€â”€\nbuild/\n# (2)\nâ””â”€â”€\npackage/\nâ””â”€â”€\n{{\npackage-name\n}}\n/\nâ”œâ”€â”€\npackage.json\n# (3)\nâ”œâ”€â”€\nindex.js\n# (4)\nâ”œâ”€â”€\nconfigmaps/\nâ”‚\nâ””â”€â”€\ndefault.yaml\n# (5)\nâ”‚\nâ””â”€â”€\ntemplates/\nâ””â”€â”€\ndefault.yaml\n# (6)\nThe\nsrc\nsubdirectory will contain a generated Kotlin class for transferring the UI-based inputs to your code (if the you have configured your package's\nimplementationLanguage\nas\nKotlin\n).\nThe\nbuild\nsubdirectory will contain the artifacts needed by Argo to deploy your package.\nThe\npackage.json\ncontains descriptive metadata about your package, such as its name, description, icon, and documentation links.\nThe\nindex.js\nis a placeholder file, which should be left as-is.\nYour package's UI configuration is bundled into this\nconfigmaps/default.yaml\nfile.\nYour package's orchestration is bundled into this\ntemplates/default.yaml\nfile.\nOutput produced\nFor our running example (since the\nimplementationLanguage\nis\nKotlin\n), this would produce:\nâ”œâ”€â”€\nsrc/\nâ”‚\nâ””â”€â”€\nmain/\nâ”‚\nâ””â”€â”€\nkotlin/\nâ”‚\nâ””â”€â”€\nOpenAPISpecLoaderCfg.kt\nâ”‚\nâ””â”€â”€\nbuild/\nâ””â”€â”€\npackage/\nâ””â”€â”€\ncsa-openapi-spec-loader/\nâ”œâ”€â”€\npackage.json\nâ”œâ”€â”€\nindex.js\nâ”œâ”€â”€\nconfigmaps/\nâ”‚\nâ””â”€â”€\ndefault.yaml\nâ”‚\nâ””â”€â”€\ntemplates/\nâ””â”€â”€\ndefault.yaml\n2025-03-12\n2025-03-12\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}