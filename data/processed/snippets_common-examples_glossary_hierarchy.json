{
  "source_url": "snippets_common-examples_glossary_hierarchy.html",
  "text": "Traverse glossary categories - Developer\nSkip to content\nTraverse categories\n¶\nYou can populate glossaries in Atlan with arbitrarily deep category hierarchies.\ngraph\ng([Glossary])\nc1([Category 1])\nc2([Category 2])\nc1a([Category 1a])\nc1b([Category 1b])\nc1ai([\"Category 1a(i)\"])\nc1aii([\"Category 1a(ii)\"])\ntA([Term A])\ntB([Term B])\ng-->c1-->c1a\ng-->c2\nc1-->c1b\nc1a-->c1ai\nc1a-->c1aii\nc1b-->tB\nc1ai-->tA\nTo traverse these categories efficiently (without retrieving each level through a separate API call) you need to search for all categories in a glossary and reconstruct the hierarchy in-memory. This reconstruction can be cumbersome, so we've provided a helper method for that in the SDKs.\nRetrieve the hierarchy\n¶\n1.6.2\n4.0.0\nTo retrieve a traversable hierarchy for a glossary:\nJava\nPython\nKotlin\nRaw REST API\nRetrieve traversable hierarchy\n1\n2\nGlossary\nglossary\n=\nGlossary\n.\nfindByName\n(\nclient\n,\n\"Concepts\"\n);\n// (1)\nGlossary\n.\nCategoryHierarchy\ntree\n=\nglossary\n.\ngetHierarchy\n(\nclient\n);\n// (2)\nStart by retrieving the glossary itself, for example using\nGlossary.findByName()\n. The glossary object used\nmust\nhave its\nqualifiedName\npresent, so if you already know the\nqualifiedName\nyou could also use\nGlossary._internal().qualifiedName(\"...\").build();\nas a shortcut, which does not require making any API call. Because this operation will lookup the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCall the\n.getHierarchy()\nmethod on the glossary to retrieve a traversable\nGlossary.CategoryHierarchy\nobject. Because this operation will lookup the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nMore details\nThe\n.getHierarchy()\nmethod will only retrieve the bare minimum information about each category (its GUID, qualifiedName and name). If you want to retrieve additional details, such as the terms in that category or certificate for the category, you need to pass these as an additional argument. To do this, use the\n.getHierarchy(AtlanClient, List<String>)\nmethod, and pass a list of strings giving the names of any additional attributes you want to retrieve for each category. (For example, to retrieve terms you would use\nterms\n, for certificates you would use\ncertificateStatus\n.)\nRetrieve traversable hierarchy\n1\n2\n3\n4\n5\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nglossary\n=\nclient\n.\nasset\n.\nfind_glossary_by_name\n(\n\"Concepts\"\n)\n# (1)\nhierarchy\n=\nclient\n.\nasset\n.\nget_hierarchy\n(\nglossary\n)\n# (2)\nStart by retrieving the glossary itself, for example using\nfind_glossary_by_name()\n. The glossary object used\nmust\nhave its\nqualified_name\npresent.\nCall the\nget_hierarchy()\nto retrieve a traversable\nAtlasGlossary.CategoryHierarchy\nobject.\nMore details\nThe\n.get_hierarchy()\nmethod will only retrieve the bare minimum information about each category (its GUID, qualifiedName and name). If you want to retrieve additional details, such as the terms in that category or certificate for the category, you need to pass these as an additional argument. To do this, add the additional\nattributes\nparameter and pass a list of strings giving the names of any additional attributes ou want to retrieve for each category. (For example, to retrieve terms you would use\nterms\n, for certificates you would use\ncertificateStatus\n.)\nRetrieve traversable hierarchy\n1\n2\nval\nglossary\n=\nGlossary\n.\nfindByName\n(\nclient\n,\n\"Concepts\"\n)\n// (1)\nval\ntree\n=\nglossary\n.\ngetHierarchy\n(\nclient\n)\n// (2)\nStart by retrieving the glossary itself, for example using\nGlossary.findByName()\n. The glossary object used\nmust\nhave its\nqualifiedName\npresent, so if you already know the\nqualifiedName\nyou could also use\nGlossary._internal().qualifiedName(\"...\").build();\nas a shortcut, which does not require making any API call. Because this operation will lookup the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCall the\n.getHierarchy()\nmethod on the glossary to retrieve a traversable\nGlossary.CategoryHierarchy\nobject. Because this operation will lookup the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nMore details\nThe\n.getHierarchy()\nmethod will only retrieve the bare minimum information about each category (its GUID, qualifiedName and name). If you want to retrieve additional details, such as the terms in that category or certificate for the category, you need to pass these as an additional argument. To do this, use the\n.getHierarchy(AtlanClient, List<String>)\nmethod, and pass a list of strings giving the names of any additional attributes you want to retrieve for each category. (For example, to retrieve terms you would use\nterms\n, for certificates you would use\ncertificateStatus\n.)\nRequires multiple API operations and non-API logic\nTo retrieve all categories in a glossary could require multiple API operations, to page through results. You would do this by incrementing the\nfrom\nin each subsequent call (in increments equal to the\nsize\n) to get the next page of results.\nEach page of results from the search will return a flat list of categories. You will need to use the\nparentCategory\nrelationship within each result to reverse-engineer the hierarchical structure of the categories from the flat lists.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n{\n\"dsl\"\n:\n{\n// (1)\n\"from\"\n:\n0\n,\n// (2)\n\"size\"\n:\n20\n,\n// (3)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n// (4)\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (5)\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"AtlasGlossaryCategory\"\n}\n}\n},\n{\n\"term\"\n:\n{\n// (6)\n\"__glossary\"\n:\n{\n\"value\"\n:\n\"LD5Tb30qbuYCZKsmFRpmS\"\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n// (7)\n{\n\"name.keyword\"\n:\n{\n\"order\"\n:\n\"asc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"parentCategory\"\n// (8)\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nYou should run a search to efficiently retrieve many categories at the same time.\nUse the\nfrom\nparameter to define the start of each page. If you have many categories in the glossary, page through them rather than trying to retrieve them all in a single request. The\nfrom\nshould be incremented in multiples of the\nsize\n, so in this example would be\n0\n,\n20\n,\n40\n, and so on.\nThe\nsize\nparameter controls how many categories you will try to retrieve per search request.\nYou will probably want to filter the categories to only those that are active (excluding any archived or soft-deleted categories).\nYou should filter the search by a specific type, in this example\nAtlasGlossaryCategory\nis the name of the type in Atlan for categories.\nFinally, you should also filter the search for the specific glossary in which to find the categories.\nRequires qualifiedName of the glossary\nNote that this requires the `qualifiedName of the glossary, which therefore must first be known or found by an earlier search on glossaries.\nWhen you expect to page through results, it is always a good idea to sort the results so that each page returns them in a consistent order.\nSince we want to be able to understand the hierarchy of categories, we also need to include the\nparentCategory\nin each result.\nTraverse the hierarchy\n¶\nTo traverse the hierarchy of categories you then have a few options.\nDepth-first traversal\n¶\n1.6.2\n1.0.0\nTo list every category in the hierarchy in depth-first order:\nJava\nPython\nKotlin\nRaw REST API\nTraverse the hierarchy depth-first\n3\n4\n5\n6\n7\nList\n<\nIGlossaryCategory\n>\ndfs\n=\ntree\n.\ndepthFirst\n();\n// (1)\nfor\n(\nGlossaryCategory\ncategory\n:\ndfs\n)\n{\n// (2)\n// Do something with the category...\n// Order: [1, 1a, 1a(i), 1a(ii), 1b, 2]\n}\nThe\n.depthFirst()\nmethod will return an ordered list of all the categories in the glossary, ordered by a depth-first traversal.\nYou can then iterate through them in this particular order.\nTraverse the hierarchy depth-first\n6\n7\n8\nfor\ncategory\nin\nhierarchy\n.\ndepth_first\n:\n# (1)\n...\n# Do something with the category\n...\n# Order [1, 1a, 1a(i), 1a(ii), 1b, 2]\nThe\ndepth_first\nproperty will return an ordered list of all the categories in the glossary, ordered by a depth-first traversal. You can then iterate through them in this particular order.\nTraverse the hierarchy depth-first\n3\n4\n5\n6\n7\nval\ndfs\n=\ntree\n.\ndepthFirst\n()\n// (1)\nfor\n(\ncategory\nin\ndfs\n)\n{\n// (2)\n// Do something with the category...\n// Order: [1, 1a, 1a(i), 1a(ii), 1b, 2]\n}\nThe\n.depthFirst()\nmethod will return an ordered list of all the categories in the glossary, ordered by a depth-first traversal.\nYou can then iterate through them in this particular order.\nNon-API logic\nOnce you have retrieved the categories using the search approach outlined above, traversing them becomes an operation entirely in your own program (does not interact with Atlan APIs).\nFor a depth-first traversal:\nStart by listing a single top-level category (those whose\nparentCategory\nrelationship is empty).\nThen output a single child category of that top-level category.\nThen output a single child category of (2).\nContinue in this way down the hierarchy.\nOnce exhausted, then move on to the next (grand-)child category and exhaust its (grand-)children.\nContinue in this way until all categories are listed.\nBreadth-first traversal\n¶\n1.6.2\n1.0.0\nTo list every category in the hierarchy in breadth-first order:\nJava\nPython\nKotlin\nRaw REST API\nTraverse the hierarchy breadth-first\n3\n4\n5\n6\n7\nList\n<\nIGlossaryCategory\n>\nbfs\n=\ntree\n.\nbreadthFirst\n();\n// (1)\nfor\n(\nGlossaryCategory\ncategory\n:\nbfs\n)\n{\n// (2)\n// Do something with the category...\n// Order: [1, 2, 1a, 1b, 1a(i), 1a(ii)]\n}\nThe\n.breadthFirst()\nmethod will return an ordered list of all the categories in the glossary, ordered by a breadth-first traversal.\nYou can then iterate through them in this particular order.\nTraverse the hierarchy breadth-first\n6\n7\n8\nfor\ncategory\nin\nhierarchy\n.\nbreadth_first\n:\n# (1)\n...\n# Do something with the category\n...\n# Order [1, 1a, 1a(i), 1a(ii), 1b, 2]\nThe\nbreadth-first\nproperty will return an ordered list of all the categories in the glossary, ordered by a depth-first traversal. You can then iterate through them in this particular order.\nTraverse the hierarchy breadth-first\n3\n4\n5\n6\n7\nval\nbfs\n=\ntree\n.\nbreadthFirst\n()\n// (1)\nfor\n(\ncategory\nin\nbfs\n)\n{\n// (2)\n// Do something with the category...\n// Order: [1, 2, 1a, 1b, 1a(i), 1a(ii)]\n}\nThe\n.breadthFirst()\nmethod will return an ordered list of all the categories in the glossary, ordered by a breadth-first traversal.\nYou can then iterate through them in this particular order.\nNon-API logic\nOnce you have retrieved the categories using the search approach outlined above, traversing them becomes an operation entirely in your own program (does not interact with Atlan APIs).\nFor a breadth-first traversal:\nStart by listing the top-level categories (those whose\nparentCategory\nrelationship is empty).\nFor each of these categories, then list all of its children.\nContinue the logic from (1) for each child category.\nBuild-your-own traversal\n¶\n1.6.2\n1.0.0\nAlternatively, you may want to iterate through the hierarchy in your own order. From the traversable hierarchy you can retrieve the top-level categories, and then decide what to do from there:\nJava\nPython\nKotlin\nRaw REST API\nTraverse the hierarchy as you like, starting from the top\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfor\n(\nIGlossaryCategory\ntop\n:\ntree\n.\ngetRootCategories\n())\n{\n// (1)\n// Do something with the top-level categories [1, 2]\nfor\n(\nIGlossaryCategory\nchild\n:\ntop\n.\ngetChildrenCategories\n())\n{\n// (2)\n// Do something with the child categories [1a, 1b]\nfor\n(\nIGlossaryCategory\ngc\n:\nchild\n.\ngetChildrenCategories\n())\n{\n// Do something with the grand-children categories [1a(i), 1a(ii)]\n// ... and so on\n}\n}\n}\nThe\n.getRootCategories()\nmethod will return a list of only those categories at the root of the glossary. (The categories that have no parent categories themselves.)\nYou can then retrieve the child categories using\n.getChildrenCategories()\n. And you can do this iteratively as you traverse down the hierarchy.\nTraverse the hierarchy as you like, starting from the top\n6\n7\n8\n9\n10\nfor\ntop\nin\nhierarchy\n.\nroot_categories\n:\n# (1)\nfor\nchild\nin\ntop\n.\nchildren_categories\nor\n[]:\n# (2)\nfor\ngc\nin\nchild\n.\nchildren_categories\nor\n[]:\n...\n# Do something with the grand-children categories [1a(i), 1a(ii)]\n...\n# ... and so on\nThe\nroot_categories\nproperty will return a list of only those categories at the root of the glossary. (The categories that have no parent categories themselves.)\nYou can then retrieve the child categories using\nchildren_categories\nproperty. And you can do this iteratively as you traverse down the hierarchy.\nTraverse the hierarchy as you like, starting from the top\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfor\n(\ntop\nin\ntree\n.\nrootCategories\n)\n{\n// (1)\n// Do something with the top-level categories [1, 2]\nfor\n(\nchild\nin\ntop\n.\nchildrenCategories\n)\n{\n// (2)\n// Do something with the child categories [1a, 1b]\nfor\n(\ngc\nin\nchild\n.\nchildrenCategories\n)\n{\n// Do something with the grand-children categories [1a(i), 1a(ii)]\n// ... and so on\n}\n}\n}\nThe\n.rootCategories\nmember will return a list of only those categories at the root of the glossary. (The categories that have no parent categories themselves.)\nYou can then retrieve the child categories using\n.childrenCategories\n. And you can do this iteratively as you traverse down the hierarchy.\nNon-API logic\nOnce you have retrieved the categories using the search approach outlined above, traversing them becomes an operation entirely in your own program (does not interact with Atlan APIs).\n2022-10-05\n2025-01-03\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}