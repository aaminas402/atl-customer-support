{
  "source_url": "snippets_datamesh_datadomains.html",
  "text": "Managing data domains - Developer\nSkip to content\nManage data domains\n¶\nCreate a new data domain\n¶\n4.0.0\n2.0.4\nTo create a new data domain:\nJava\nPython\nKotlin\nRaw REST API\nCreate a data domain\n1\n2\n3\n4\n5\nDataDomain\ndomain\n=\nDataDomain\n.\ncreator\n(\n\"Marketing\"\n)\n// (1)\n.\nassetIcon\n(\nAtlanIcon\n.\nROCKET\n)\n// (2)\n.\nassetThemeHex\n(\nAtlanMeshColor\n.\nMAGENTA\n)\n.\nbuild\n();\n// (3)\nAssetMutationResponse\nresponse\n=\ndomain\n.\nsave\n(\nclient\n);\n// (4)\nYou must provide a human-readable name for your data domain.\nYou can chain onto the creator any other enrichment, for example choosing a different icon or color to represent the domain.\nYou then need to build the object.\nYou can then\nsave()\nthe object you've built to create the new data domain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreate a data domain\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataDomain\nfrom\npyatlan.model.enums\nimport\nAtlanIcon\n,\nAtlanMeshColor\nclient\n=\nAtlanClient\n()\ndomain\n=\nDataDomain\n.\ncreator\n(\nname\n=\n\"Marketing\"\n,\n# (1)\n)\ndomain\n.\nasset_icon\n=\nAtlanIcon\n.\nROCKET\n# (2)\ndomain\n.\nasset_theme_hex\n=\nAtlanMeshColor\n.\nMAGENTA\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndomain\n)\n# (3)\nYou must provide a human-readable name for your data domain.\nYou can apply any other enrichment, for example choosing a different icon or color to represent the domain.\nYou can then\nsave()\nthe object to create the new data domain in Atlan.\nCreate a data domain\n1\n2\n3\n4\n5\nval\ndomain\n=\nDataDomain\n.\ncreator\n(\n\"Marketing\"\n)\n// (1)\n.\nassetIcon\n(\nAtlanIcon\n.\nROCKET\n)\n// (2)\n.\nassetThemeHex\n(\nAtlanMeshColor\n.\nMAGENTA\n)\n.\nbuild\n()\n// (3)\nval\nresponse\n=\ndomain\n.\nsave\n(\nclient\n)\n// (4)\nYou must provide a human-readable name for your data domain.\nYou can chain onto the creator any other enrichment, for example choosing a different icon or color to represent the domain.\nYou then need to build the object.\nYou can then\nsave()\nthe object you've built to create the new data domain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"DataDomain\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Marketing\"\n,\n// (2)\n\"assetIcon\"\n:\n\"PhRocket\"\n,\n// (3)\n\"assetThemeHex\"\n:\n\"#F34D77\"\n,\n\"qualifiedName\"\n:\n\"default/domain/marketing\"\n// (4)\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nDataDomain\n.\nHuman-readable name for your data domain.\nYou can specify other enrichment, for example choosing a different icon or color to represent the domain.\nThe\nqualifiedName\nshould follow the pattern:\ndefault/domain/<lowerCamelCaseName>\n.\nCreate a new subdomain\n¶\n4.0.0\n2.0.0\nTo create a new subdomain:\nJava\nPython\nKotlin\nRaw REST API\nCreate a subdomain\n1\n2\n3\n4\nDataDomain\nsub\n=\nDataDomain\n.\ncreator\n(\n\"Social Marketing\"\n,\n// (1)\nDataDomain\n.\nrefByQualifiedName\n(\n\"default/domain/marketing\"\n))\n// (2)\n.\nbuild\n();\n// (3)\nAssetMutationResponse\nresponse\n=\nsub\n.\nsave\n(\nclient\n);\n// (4)\nYou must provide a human-readable name for your data domain.\nTo create subdomain, you must provide the parent domain with at least its\nqualifiedName\n.\nYou can chain on other enrichment, like above, but ultimately then need to build the object.\nYou can then\nsave()\nthe object you've built to create the new data subdomain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nCreate a subdomain\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataDomain\nclient\n=\nAtlanClient\n()\nsub_domain\n=\nDataDomain\n.\ncreator\n(\nname\n=\n\"Social Marketing\"\n,\n# (1)\nparent_domain_qualified_name\n=\n\"default/domain/marketing\"\n,\n# (2)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nsub_domain\n)\nHuman-readable name for your data domain.\nTo create subdomain, you must provide the parent domain\nqualifiedName\n.\nCreate a subdomain\n1\n2\n3\n4\nval\nsub\n=\nDataDomain\n.\ncreator\n(\n\"Social Marketing\"\n,\n// (1)\nDataDomain\n.\nrefByQualifiedName\n(\n\"default/domain/marketing\"\n))\n// (2)\n.\nbuild\n()\n// (3)\nval\nresponse\n=\nsub\n.\nsave\n(\nclient\n)\n// (4)\nYou must provide a human-readable name for your data domain.\nTo create subdomain, you must provide the parent domain with at least its\nqualifiedName\n.\nYou can chain on other enrichment, like above, but ultimately then need to build the object.\nYou can then\nsave()\nthe object you've built to create the new data subdomain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"DataDomain\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Social Marketing\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/domain/gAbQGZNrFjG2F9lGB3hYp/super/domain/socialMarketing\"\n,\n// (3)\n\"parentDomainQualifiedName\"\n:\n\"default/domain/gAbQGZNrFjG2F9lGB3hYp/super\"\n,\n// (4)\n\"superDomainQualifiedName\"\n:\n\"default/domain/gAbQGZNrFjG2F9lGB3hYp/super\"\n// (5)\n},\n\"relationshipAttributes\"\n:\n{\n\"parentDomain\"\n:\n{\n// (6)\n\"typeName\"\n:\n\"DataDomain\"\n,\n\"uniqueAttributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/domain/gAbQGZNrFjG2F9lGB3hYp\"\n}\n}\n}\n}\n]\n}\nThe\ntypeName\nmust be exactly\nDataDomain\n.\nHuman-readable name for your data sub-domain.\nThe\nqualifiedName\nshould follow the pattern:\n<parentQualifiedName>/domain/<lowerCamelCaseName>\n.\nYou must provide the\nqualifiedName\nof the parent domain.\nProvide a\nsuperDomainQualifiedName\nfor the data domain under which you want to create this sub-domain.\nIf creating a sub-domain under another sub-domains (ie. nested sub-domains), this should be the qualified name of the root-level domain.\nYou must also specify a relationship to the parent domain, in this example through its\nqualifiedName\n.\nRetrieve a data domain\n¶\n4.0.0\n2.2.1\nTo retrieve a data domain by its human-readable name:\nJava\nPython\nKotlin\nRaw REST API\nRetrieve a data domain by its human-readable name\n1\n2\n3\nDataDomain\ndomain\n=\nDataDomain\n.\nfindByName\n(\n// (1)\nclient\n,\n\"marketing\"\n,\nList\n.\nof\n(\n\"certificateStatus\"\n)\n).\nget\n(\n0\n);\nUse\nDataDomain.findByName()\nmethod to retrieve a data domain by its human-readable name:\nclient through which to access a tenant.\nname of the data domain.\n(optional) a list of attributes to retrieve for the data domain, for example\ncertificateStatus\n.\nRetrieve a data domain by its human-readable name\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataDomain\nclient\n=\nAtlanClient\n()\ndomain\n=\nclient\n.\nasset\n.\nfind_domain_by_name\n(\n# (1)\nname\n=\n\"marketing\"\n,\nattributes\n=\n[\n\"certificateStatus\"\n]\n)\nassert\ndomain\nassert\ndomain\n.\ncertificate_status\nUse\nclient.asset.find_domain_by_name()\nmethod to retrieve a data domain by its human-readable name:\nname of the data domain.\n(optional) a list of attributes to retrieve\nfor the data domain, for example\ncertificateStatus\n.\nRetrieve a data domain by its human-readable name\n1\n2\n3\nval\ndomain\n=\nDataDomain\n.\nfindByName\n(\n// (1)\nclient\n,\n\"marketing\"\n,\nlistOf\n(\n\"certificateStatus\"\n)\n).\nget\n(\n0\n)\nUse\nDataDomain.findByName()\nmethod to retrieve a data domain by its human-readable name:\nclient through which to access a tenant.\nname of the data domain.\n(optional) a list of attributes to retrieve for the data domain, for example\ncertificateStatus\n.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n{\n\"dsl\"\n:\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n100\n,\n\"aggregations\"\n:\n{},\n\"track_total_hits\"\n:\ntrue\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"marketing\"\n// (1)\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"DataDomain\"\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"__guid\"\n:\n{\n\"order\"\n:\n\"asc\"\n}\n}\n]\n},\n\"attributes\"\n:\n[\n\"certificateStatus\"\n// (2)\n]\n}\nHuman-readable name of the data domain.\n(optional) a list of attributes to retrieve\nfor the data domain, for example\ncertificateStatus\n.\nUpdate a data domain\n¶\n4.0.0\n2.0.0\nTo update a data domain or subdomain:\nJava\nPython\nKotlin\nRaw REST API\nUpdate a data domain\n1\n2\n3\n4\n5\nDataDomain\ndomain\n=\nDataDomain\n.\nupdater\n(\n\"default/domain/marketing\"\n,\n// (1)\n\"Marketing\"\n)\n.\nuserDescription\n(\n\"Now with a description!\"\n)\n// (2)\n.\nbuild\n();\n// (3)\nAssetMutationResponse\nresponse\n=\ndomain\n.\nsave\n(\nclient\n);\n// (4)\nUse the\nupdater()\nmethod to update a data domain, providing the\nqualifiedName\nand name of the data domain.\nYou can chain onto the updater any other enrichment, for example changing the domain's description.\nYou then need to build the object.\nYou can then\nsave()\nthe object you've built to update the data domain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a data domain\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nDataDomain\nclient\n=\nAtlanClient\n()\ndata_domain\n=\nDataDomain\n.\nupdater\n(\n# (1)\nqualified_name\n=\n\"default/domain/marketing\"\n,\n# (2)\nname\n=\n\"Marketing\"\n,\n# (3)\n)\ndata_domain\n.\nuser_description\n=\n\"Now with a description!\"\n# (4)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndata_domain\n)\n# (5)\nUse the\nupdater()\nmethod to update a data domain.\nYou must provide the\nqualifiedName\nof the data domain.\nYou must provide the\nname\nof the data domain.\nYou can then add on any other updates, such as changing the user description of the data domain.\nTo update the data domain in Atlan, call the\nsave()\nmethod with the object you've built.\nUpdate a data domain\n1\n2\n3\n4\n5\nval\ndomain\n=\nDataDomain\n.\nupdater\n(\n\"default/domain/marketing\"\n,\n// (1)\n\"Marketing\"\n)\n.\nuserDescription\n(\n\"Now with a description!\"\n)\n// (2)\n.\nbuild\n()\n// (3)\nval\nresponse\n=\ndomain\n.\nsave\n(\nclient\n)\n// (4)\nUse the\nupdater()\nmethod to update a data domain, providing the\nqualifiedName\nand name of the data domain.\nYou can chain onto the updater any other enrichment, for example changing the domain's description.\nYou then need to build the object.\nYou can then\nsave()\nthe object you've built to update the data domain in Atlan. Because this operation will persist the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n{\n\"typeName\"\n:\n\"DataDomain\"\n,\n// (1)\n\"attributes\"\n:\n{\n\"name\"\n:\n\"Marketing\"\n,\n// (2)\n\"qualifiedName\"\n:\n\"default/domain/marketing\"\n,\n// (3)\n\"userDescription\"\n:\n\"Now with a description!\"\n// (4)\n},\n}\n]\n}\nThe\ntypeName\nmust be exactly\nDataDomain\n.\nHuman-readable name for your data domain.\nYou must provide the the\nqualifiedName\nof the domain to update.\nYou can add on any other updates, such as changing the user description of the data domain.\nDelete a data domain\n¶\n4.0.0\n1.8.1\nSoft-delete (archive)\n¶\nTo soft-delete, or archive, a data domain:\nJava\nPython\nKotlin\nRaw REST API\nDelete a data domain\n1\nAssetDeletionResponse\nresponse\n=\nDataDomain\n.\ndelete\n(\nclient\n,\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n);\n// (1)\nTo archive a data domain in Atlan, call the\nDataDomain.delete()\nmethod with the GUID of the data domain. Because this operation will archive the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a data domain\n1\n2\n3\n4\n5\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nclient\n.\nasset\n.\ndelete_by_guid\n(\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n)\n# (1)\nTo archive a data domain in Atlan, call the\nasset.delete_by_guid()\nmethod with the GUID of the data domain.\nDelete a data domain\n1\nval\nresponse\n=\nDataDomain\n.\ndelete\n(\nclient\n,\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n)\n// (1)\nTo archive a data domain in Atlan, call the\nDataDomain.delete()\nmethod with the GUID of the data domain. Because this operation will archive the asset in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDELETE /api/meta/entity/bulk?guid=218c8144-dc39-43a5-b0c0-9eeb4d11e74a&deleteType=SOFT\n1\n// (1)\nAll the details for deleting the data domain are specified in the URL directly. Note that you must provide the GUID of the data domain to delete it.\nHard-delete (purge)\n¶\nTo permanently delete (purge) a data domain:\nJava\nPython\nKotlin\nRaw REST API\nPurge a data domain\n1\nAssetDeletionResponse\nresponse\n=\nDataDomain\n.\npurge\n(\nclient\n,\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n);\n// (1)\nTo permanently delete a data domain in Atlan, call the\nDataDomain.purge()\nmethod with the GUID of the data domain. Because this operation will remove the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPurge a data domain\n1\n2\n3\n4\n5\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nclient\n.\nasset\n.\npurge_by_guid\n(\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n)\n# (1)\nTo permanently delete a data domain in Atlan, call the\nasset.purge_by_guid()\nmethod with the GUID of the data domain.\nPurge a data domain\n1\nval\nresponse\n=\nDataDomain\n.\npurge\n(\n\"218c8144-dc39-43a5-b0c0-9eeb4d11e74a\"\n)\n// (1)\nTo permanently delete a data domain in Atlan, call the\nDataDomain.purge()\nmethod with the GUID of the data domain. Because this operation will remove the asset from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDELETE /api/meta/entity/bulk?guid=218c8144-dc39-43a5-b0c0-9eeb4d11e74a&deleteType=PURGE\n1\n// (1)\nAll the details for deleting the data domain are specified in the URL directly. Note that you must provide the GUID of the data domain to delete it.\n2023-11-30\n2025-01-16\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}