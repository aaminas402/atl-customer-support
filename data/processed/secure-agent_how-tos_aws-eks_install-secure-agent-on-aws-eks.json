{
  "source_url": "secure-agent_how-tos_aws-eks_install-secure-agent-on-aws-eks.html",
  "text": "Install on AWS EKS | Atlan Documentation\nSkip to main content\nOn this page\nThis guide provides step-by-step instructions to install the Secure Agent on an Amazon Elastic Kubernetes Service (AWS EKS) cluster.\nSystem requirements\nâ\nTo deploy the Secure Agent on AWS EKS, ensure the following system requirements are met:\nConfigure network access between your Secure Agent and Atlan tenant. For more information, see\nWhitelisting Secure Agent\n.\nYou need Kubernetes version 1.19 or higher.\nYou need to install Helm and kubectl on the machine you're using to connect to the AWS EKS cluster.\nYou need at least 1 node for base services with a disk space of 20 GB and instance configuration as below:\nEnvironment\nMinimum instance type\nRecommended instance type\nProduction\nt3.large\nCustom based on workload\nNon-production\nt3.large\nt3.xlarge\ninfo\nðª\nDid you know?\nFor optimal autoscaling, scale nodes based on the number of concurrent workflows.\nPermissions required\nâ\nBefore installing the Secure Agent, make sure the following permissions are in place:\nPermissions for the Installer\nâ\nThe user, service or system account performing the installation needs access to the EKS cluster and permissions to manage Custom Resource Definitions (CRDs).\nEnsure the kubeconfig is correctly configured for your target EKS cluster. If needed, use the following command to configure or update your kubeconfig file.\naws eks update-kubeconfig --region ``<region>`` --name ``<cluster-name>``\nReplace\n<region>\nwith your AWS region (for example, us-east-1) and\n<cluster-name>\nwith the name of your EKS cluster.\nThe installer needs permission to create, update, and delete Custom Resource Definitions (CRDs). If not using the cluster-admin role, grant the following:\nCreate a file named\nagent-crd-permissions.yaml\non your machine.\nCopy the following content into the file:\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n# Use a descriptive name\nname: helm-crd-installer-role\nrules:\n- apiGroups: [\"apiextensions.k8s.io\"]\nresources: [\"customresourcedefinitions\"]\n# Recommended verbs for Helm CRD management\nverbs: [\"create\", \"get\", \"list\", \"watch\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n# Use a descriptive name\nname: helm-crd-installer-binding\nsubjects:\n# *** IMPORTANT: Modify this section based on who is running Helm ***\n# Choose ONE of the following options and replace placeholders.\n# Option 1: Bind to a specific User\n- kind: User\nname: \"your-kubernetes-username\" # Replace with the installing user's K8s username recognized by the cluster\napiGroup: rbac.authorization.k8s.io\n# Option 2: Bind to a specific Group\n# - kind: Group\n#   name: \"your-kubernetes-groupname\" # Replace with the installing user's K8s group name\n#   apiGroup: rbac.authorization.k8s.io\n# Option 3: Bind to a Service Account (e.g., for CI/CD pipelines)\n# - kind: ServiceAccount\n#   name: \"installer-sa-name\" # Replace with the installer SA's name\n#   namespace: \"installer-sa-namespace\" # Replace with the installer SA's namespace\nroleRef:\n# This refers to the ClusterRole created above\nkind: ClusterRole\nname: helm-crd-installer-role\napiGroup: rbac.authorization.k8s.io\nFollow the comments in the file to replace the placeholders. In the above file:\nResource:\ncustomresourcedefinitions\n- needed for managing CRDs in the cluster.\nAPI Group:\napiextensions.k8s.io\n- required to work with CRDs.\nVerbs: create, get, list, update, delete - necessary for installing, inspecting, updating, and cleaning up CRDs using Helm.\nClusterRoleBinding: needed to assign the role to the user or group performing the installation.\nOnce youâve updated the placeholders, use the below\nkubectl\ncommand to apply the configuration:\nOnce youâve updated the placeholders, use the below kubectl command to apply the configuration:\nkubectl apply -f agent-crd-permissions.yaml\nPermissions for the Secure Agent Pod (Runtime)\nâ\nThe Secure Agent runs as pods in your EKS cluster and requires permissions to interact with AWS services like S3. These permissions are granted through IAM Roles for Service Accounts (IRSA).\nCreate a new IAM role for the Secure Agent pod.\nConfigure the trust policy to enable the Secure Agentâs Kubernetes service account to assume the role. Make sure the argo-workflow service account exists in the same namespace where you plan to install the agent. For more information, see the AWS documentation on\nIAM roles for service accounts (IRSA)\n.\nExample: Trust policy for the argo-workflow service account:\n\"Condition\": {\n\"StringEquals\": {\n\":sub\": \"system:serviceaccount::argo-workflow\"\n}\n}\nReplace\n<namespace>\nwith the namespace where you plan to install agent.\nCreate an S3 bucket (or use an existing one), and attach the following permissions to the IAM role used by the Secure Agent:\ns3:PutObject\n: Needed to write logs and artifacts\ns3:GetObject\n: Needed to read logs and artifacts.\ns3:ListBucket\n: Needed by Argo artifact repository for listing objects.\nDid you know?\nThe Helm chart automatically configures the necessary Kubernetes RBAC for Argo Workflows, which the Secure Agent uses. No additional configuration is required for the Secure Agent pod..\nPrerequisites\nâ\nBefore proceeding, complete the following setup steps to prepare your Atlan tenant and AWS EKS cluster.\nConfigure Atlan tenant\nâ\nIn your Atlan tenant:\nSign in as an Atlan admin.\nGo to\nAdmin\nfrom the left menu.\nUnder\nWorkspace\n, click\nLabs\n.\nNavigate to\nWorkflow Center\n.\nEnable the\nCrawl assets using Secure Agent\ntoggle.\nConfigure Secure Agent settings\nâ\nThe\nagent_config_values.yaml\nfile is used to configure the Secure Agent, Argo Workflows, and storage for the AWS EKS cluster. Follow these instructions on the machine where you're performing the installation.\nCreate a file named\nagent_config_values.yaml\nfile.\nCopy the configuration below into the file:\n# -----------------------------------------------------------------------------------------\n# Agent core settings   -  Follow the comments to update:\n# 1. Image registry settings - To be updated only if you are using a private image registry\n# 2. Atlan connection settings - To be updated only if you want agent to use the S3 bucket\n# 3. Argo Private repository settings - To be updated only if you are using private repository for Argo workflows\n# 4. Kubernetes Pod Annotation settings - To be updated only if you want to customize the Kubernetes podâs metadata\n# 5. Argo Private repository settings - To be updated only if you are using private repository for Argo workflows\n# 6. S3 storage settings - To be updated with S3 bucket details.\n# -----------------------------------------------------------------------------------------\nagent:\nenabled: true\nenableStorageProxy: false\nca:\ncrt: \"\"\n#Provide a base64-encoded string of a JSON object, e.g., {\"client_id\": 123, \"client_secret\": 1243}.\n#Set this only if you need to include custom headers in API calls made by the agent.\nrestAPIHeaders: \"\"\nversions:\nk3s: \"\"\nk8s: \"\"\nhelm: \"\"\n# 1. Image Registry Settings\nimage:\n# Only update if you're using a private image registry\nregistry: \"public.ecr.aws\"\nrepository: \"atlanhq\"\n# Only update if you're using custom images\nrestImageName: \"rest-2\"\nrestImageTag: \"1.0\"\n# Only update if you're using custom images\njdbcImageName: \"jdbc-metadata-extractor-with-jars\"\njdbcImageTag: \"1.0\"\n# Only update if you're using custom images\ncredentialImageName: \"connector-auth\"\ncredentialImageTag: \"1.0\"\n# Only update if you're using custom images\ncsaScriptsImageName: \"marketplace-csa-scripts\"\ncsaScriptsImageTag: \"1.0\"\n# Marketplace scripts image details - keep these values as is unless using custom images\nmarketplaceScriptsImageName: \"marketplace-scripts-agent\"\nmarketplaceScriptsImageTag: \"1.0\"\npullPolicy: IfNotPresent\npullSecrets: []  # Add pull secrets if using private registry\nannotations: {}\nlabels: {}\nserviceAccountName: \"\"\nautomountServiceAccountToken: true\nresources: {}\n# 2. Atlan connection settings - Only update if you want to agent to use the S3 bucket\natlan:\nargoToken: \"\"\nvaultEnvEnabled: false\n# Set to true only if the agent should store metadata\n# in your bucket instead of sending it to Atlan via presigned URL.\nuseAgentBucket: false\nmetadataBucket: \"\"\npersistentVolume:\nscripts:\nenabled: false\ndata:\nenabled: false\nminio:\nenabled: false\nargo-workflows:\nimages:\npullPolicy: IfNotPresent\npullSecrets: []\ncrds:\ninstall: true\nkeep: true\nannotations: {}\nsingleNamespace: true\nworkflow:\nserviceAccount:\ncreate: true\nrbac:\ncreate: true\ncontroller:\n# 3. Argo Private repository settings - Only update if you are using a private image repository for Argo\nimage:\n# update the private image repository details\nregistry: quay.io\nrepository: argoproj/workflow-controller\ntag: \"\"\nparallelism: 10\nresourceRateLimit:\nlimit: 10\nburst: 5\nrbac:\ncreate: true\nsecretWhitelist: []\naccessAllSecrets: false\nwriteConfigMaps: false\nconfigMap:\ncreate: true\nname: \"\"\nnamespaceParallelism: 10\nworkflowDefaults:\n# 4. Kubernetes Pod Annotation settings - Only update if you want to customize the Pod metadata.\n## For example, the annotation might be used by external systems such as proxies, or monitoring tools, and more.\nspec:\npodMetadata:\nannotations:\nargo.workflow/agent-type: \"atlan-agent-service\"\nlabels:\napp.kubernetes.io/name: \"atlan-agent\"\npodGC:\nstrategy: OnPodSuccess\nserviceAccountName: argo-workflow\nautomountServiceAccountToken: true\nttlStrategy:\nsecondsAfterCompletion: 84600\ntemplateDefaults:\ncontainer:\nsecurityContext:\nallowPrivilegeEscalation: false\nresources: {}\nenv:\n- name: CA_CERT\nvalueFrom:\nconfigMapKeyRef:\nname: cert-config\nkey: ca.crt\noptional: true\n- name: REST_API_HEADERS\nvalueFrom:\nconfigMapKeyRef:\nname: agent-registry-settings\nkey: restAPIHeaders\noptional: true\nserviceAccount:\ncreate: true\nname: workflow-controller\nworkflowNamespaces:\n- default\nreplicas: 1\nrevisionHistoryLimit: 10\nnodeEvents:\nenabled: false\nserver:\nenabled: true\n# 5. Argo Private repository settings - Only update if you are using a private image repository for Argo\nimage:\nregistry: quay.io\nrepository: argoproj/argocli\ntag: \"\"\nrbac:\ncreate: true\nserviceAccount:\ncreate: true\nreplicas: 1\nautoscaling:\nenabled: false\ningress:\nenabled: false\nannotations:\ningress.kubernetes.io/ssl-redirect: \"false\"\nresources: {}\nexecutor:\nsecurityContext: {}\nresources: {}\nartifactRepository:\narchiveLogs: true\nuseStaticCredentials: false\n# 6. S3 bucket settings - needed by the secure agent to store logs and artifacts\ns3:\n# S3 bucket name - Update with the bucket name you created in the Permissions required section.\nbucket: \"atlan--bucket\"\n# S3 endpoint\nendpoint: \"s3.us-east-2.amazonaws.com\"\n# AWS region - Update with the region where you created bucket in the Permissions required section.\nregion: \"us-east-2\"\n# Artifact path format\nkeyFormat: \"argo-artifacts/{{workflow.namespace}}/{{workflow.name}}/{{pod.name}}\"\n# Whether to use insecure connections\ninsecure: false\n# Use AWS SDK credentials (IAM role)\nuseSDKCreds: true\nIn the configuration file, follow the comments to replace the necessary attributes. You may want to update the below configurations if:\nYou are using a private image registry (Image registry settings)\nYou want the agent to use an S3 bucket (Atlan connection settings)\nYou are using a private repository for Argo workflows (Argo Private repository settings)\nYou want to customize the Kubernetes pod's metadata (Kubernetes Pod Annotation settings)\nYou need specific S3 storage configuration (S3 storage settings)\nInstall using Helm chart\nâ\nFollow these steps to install the Secure Agent and its dependencies into your AWS EKS cluster using Helm charts.\nInstall the Argo Custom Resource Definitions (CRDs) required by the Secure Agent. This step installs only the CRDs. The Secure Agent is installed in the subsequent step using a Helm upgrade.\nhelm install <helm-app-name> oci://registry-1.docker.io/atlanhq/workflow-offline-agent \\\n--version 0.1.0 \\\n-n <namespace> \\\n--create-namespace -f <path/to/agent_config_values.yaml> \\\n--set agent.name=\"<secure-agent-name>\" \\\n--set agent.atlan.domain=\"<atlan-tenant-domain>\" \\\n--set agent.atlan.token=\"<atlan-api-token>\" \\\n--set argo-workflows.controller.workflowNamespaces={<namespace>} \\\n--set IsUpgrade=false\nReplace the placeholders:\n<namespace>\n: The Kubernetes namespace where you want to deploy the Secure Agent.\n<path/to/agent_config_values.yaml>\n: The path to the YAML config file.\n<secure-agent-name>\n: Unique name, like agent-us-east-cdw.\n<helm-app-name>\n: Unique Helm release name, like atlan-agent-v1.\n<atlan-tenant-domain>\n: Your Atlan domain, e.g., mycompany.atlan.com.\n<atlan-api-token>\n: Token used for authentication. See\nCreate a bearer token\n.\nUse the following kubectl command to associate the IAM role with the service account. This enables the Secure Agent to access the S3 bucket securely using IAM Roles for Service Accounts (IRSA). Make sure the IAM roleâs trust policy enables the argo-workflow service account to assume the role.\nkubectl annotate serviceaccount argo-workflow \\\n-n  \\\neks.amazonaws.com/role-arn=arn:aws:iam:::role/\nReplace the placeholders:\n<namespace\n: The Kubernetes namespace where you want to deploy the Secure Agent.\n<AWS_ACCOUNT_ID>\n: Your AWS Account ID.\n<YourAgentIAMRoleName>\n: The IAM role name you created for the Secure Agent using IRSA.\nInstall the Secure Agent by upgrading the Helm release. This step performs the actual Secure Agent installation after CRDs are in place.\nhelm upgrade <helm-app-name> oci://registry-1.docker.io/atlanhq/workflow-offline-agent \\\n--version 0.1.0 \\\n-n <namespace> \\\n--create-namespace -f <path/to/agent_config_values.yaml> \\\n--set agent.name=\"<secure-agent-name>\" \\\n--set agent.atlan.domain=\"<atlan-tenant-domain>\" \\\n--set agent.atlan.token=\"<atlan-api-token>\" \\\n--set argo-workflows.controller.workflowNamespaces={<namespace>} \\\n--set IsUpgrade=true\nReplace the placeholders:\n<namespace>\n: The Kubernetes namespace where you want to deploy the Secure Agent.\n<path/to/agent_config_values.yaml>\n: The path to the YAML config file.\n<secure-agent-name>\n: Unique name, like agent-us-east-cdw.\n<helm-app-name>\n: Unique Helm release name, like atlan-agent-v1.\n<atlan-tenant-domain>\n: Your Atlan domain, e.g., mycompany.atlan.com.\n<atlan-api-token>\n: Token used for authentication. See\nCreate a bearer token\n.\nWhile the installation is in progress, you can run the following command to verify the progress:\nkubectl get pods -n <namespace>\nReplace\n<namespace>\nwith the Kubernetes namespace used for deployment.\nVerify installation\nâ\nTo confirm successful installation:\nSign in to your Atlan tenant as an admin. For example,\nhttps://<tenant>.atlan.com\n.\nNavigate to the\nAgent\ntab.\nSearch for your Secure Agent name.\nIf the agent appears in the list and is marked\nActive\n, installation is complete.\nSystem requirements\nPermissions required\nPrerequisites\nInstall using Helm chart\nVerify installation",
  "source_type": "docs"
}