{
  "source_url": "snippets_workflows_packages_postgres-assets.html",
  "text": "Postgres assets package - Developer\nSkip to content\nPostgres assets package\n¶\nThe\nPostgres assets package\ncrawls PostgreSQL assets and publishes them to Atlan for discovery.\nDirect extraction\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it will create a new connection and new assets within that connection — which could lead to duplicate assets if you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow (see\nRe-run existing workflow\nbelow).\n4.0.0\n7.0.0\nTo crawl assets directly from PostgreSQL using basic authentication:\nJava\nPython\nKotlin\nRaw REST API\nDirect extraction from PostgreSQL\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nWorkflow\npostgres\n=\nPostgreSQLCrawler\n.\ndirectBasicAuth\n(\n// (1)\n\"production\"\n,\n// (2)\n\"postgres.x9f0ve2k1kvy.ap-south-1.rds.amazonaws.com\"\n,\n// (3)\n5432\n,\n// (4)\n\"postgres\"\n,\n// (5)\n\"nCkM685ZH9g4fVICMs6H\"\n,\n// (6)\n\"demo_db\"\n,\n// (7)\nList\n.\nof\n(\nclient\n.\ngetRoleCache\n().\ngetIdForName\n(\n\"$admin\"\n)),\n// (8)\nnull\n,\nnull\n,\ntrue\n,\n// (9)\ntrue\n,\n// (10)\n10000L\n,\n// (11)\nMap\n.\nof\n(\n\"demo_db\"\n,\nList\n.\nof\n(\n\"demo\"\n)),\n// (12)\nnull\n);\n// (13)\nWorkflowResponse\nresponse\n=\npostgres\n.\nrun\n();\n// (14)\nThe\nPostgreSQLCrawler\npackage will create a workflow to crawl assets from PostgreSQL. The\ndirectBasicAuth()\nmethod creates a workflow for crawling assets directly from PostgreSQL.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must provide the hostname of your PostgreSQL instance.\nYou must specify the port number of the PostgreSQL instance (use\n5432\nfor the default).\nYou must provide your PostgreSQL username.\nYou must provide your PostgreSQL password.\nYou must specify the name of the PostgreSQL database you want to crawl.\nYou must specify at least one connection admin, either:\neveryone in a role (in this example, all\n$admin\nusers)\na list of groups (names) that will be connection admins\na list of users (names) that will be connection admins\nYou can specify whether you want to allow queries to this connection (\ntrue\n, as in this example) or deny all query access to the connection (\nfalse\n).\nYou can specify whether you want to allow data previews on this connection (\ntrue\n, as in this example) or deny all sample data previews to the connection (\nfalse\n).\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can also optionally specify the set of assets to include in crawling. For PostgreSQL assets, this should be specified as a map keyed by database name with values as a list of schemas within that database to crawl. (If set to null, all databases and schemas will be crawled.)\nYou can also optionally specify the list of assets to exclude from crawling. For PostgreSQL assets, this should be specified as a map keyed by database name with values as a list of schemas within the database to exclude. (If set to null, no assets will be excluded.)\nYou can then run the workflow using the\nrun()\nmethod on the object you've created. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nDirect extraction from PostgreSQL using basic auth\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nPostgresCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nPostgresCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\nrow_limit\n=\n10000\n,\n# (5)\nallow_query\n=\nTrue\n,\n# (6)\nallow_query_preview\n=\nTrue\n,\n# (7)\n)\n.\ndirect\n(\nhostname\n=\n\"test.com\"\n,\ndatabase\n=\n\"test-db\"\n)\n# (8)\n.\nbasic_auth\n(\n# (9)\nusername\n=\n\"test-user\"\n,\npassword\n=\n\"test-password\"\n,\n)\n.\ninclude\n(\nassets\n=\n{\n\"test-include\"\n:\n[\n\"test-asset-1\"\n,\n\"test-asset-2\"\n]})\n# (10)\n.\nexclude\n(\nassets\n=\nNone\n)\n# (11)\n.\nexclude_regex\n(\nregex\n=\n\".*_TEST\"\n)\n# (12)\n.\nsource_level_filtering\n(\nenable\n=\nTrue\n)\n# (13)\n.\njdbc_internal_methods\n(\nenable\n=\nTrue\n)\n# (14)\n.\nto_workflow\n()\n# (15)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (16)\nBase configuration for a new PostgresCrawler crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can specify whether you want to allow queries to this connection.\n(\nTrue\n, as in this example) or deny all query access to the connection (\nFalse\n).\nYou can specify whether you want to allow data previews on this connection\n(\nTrue\n, as in this example) or deny all sample data previews to the connection (\nFalse\n).\nYou can specify the hostname of your Postgres instance and database name for direct extraction.\nWhen using\nbasic_auth()\n, you need to provide the following information:\nusername through which to access PostgreSQL.\npassword through which to access PostgreSQL.\nYou can also optionally specify the set of assets to\ninclude in crawling. For Postgres assets, this should be specified\nas a dict keyed by database name with each value being\na list of schemas to include. (If set to None, all table will be crawled.)\nYou can also optionally specify the list of assets to\nexclude from crawling. For Postgres assets, this should be\nspecified as a dict keyed by database name with each value being\na list of schemas to exclude. (If set to None, no table will be excluded.)\nYou can also optionally specify the exclude regex for\ncrawler ignore tables and views based on a naming convention.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) schema\nlevel filtering on source, schemas selected in the include filter will be fetched.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) JDBC\ninternal methods for data extraction.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the\npackages and workflows introduction\nfor details on how you can check the status\nand wait until the workflow has been completed.\nDirect extraction from PostgreSQL\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nval\npostgres\n=\nPostgreSQLCrawler\n.\ndirectBasicAuth\n(\n// (1)\n\"production\"\n,\n// (2)\n\"postgres.x9f0ve2k1kvy.ap-south-1.rds.amazonaws.com\"\n,\n// (3)\n5432\n,\n// (4)\n\"postgres\"\n,\n// (5)\n\"nCkM685ZH9g4fVICMs6H\"\n,\n// (6)\n\"demo_db\"\n,\n// (7)\nlistOf\n(\nclient\n.\nroleCache\n.\ngetIdForName\n(\n\"\\\n$\nadmin\n\"\n)),\n// (8)\nnull\n,\nnull\n,\ntrue\n,\n// (9)\ntrue\n,\n// (10)\n10000L\n,\n// (11)\nmapOf\n(\n\"demo_db\"\nto\nlistOf\n(\n\"demo\"\n)),\n// (12)\nnull\n)\n// (13)\nWorkflowResponse\nresponse\n=\npostgres\n.\nrun\n();\n// (14)\nThe\nPostgreSQLCrawler\npackage will create a workflow to crawl assets from PostgreSQL. The\ndirectBasicAuth()\nmethod creates a workflow for crawling assets directly from PostgreSQL.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must provide the hostname of your PostgreSQL instance.\nYou must specify the port number of the PostgreSQL instance (use\n5432\nfor the default).\nYou must provide your PostgreSQL username.\nYou must provide your PostgreSQL password.\nYou must specify the name of the PostgreSQL database you want to crawl.\nYou must specify at least one connection admin, either:\neveryone in a role (in this example, all\n$admin\nusers)\na list of groups (names) that will be connection admins\na list of users (names) that will be connection admins\nYou can specify whether you want to allow queries to this connection (\ntrue\n, as in this example) or deny all query access to the connection (\nfalse\n).\nYou can specify whether you want to allow data previews on this connection (\ntrue\n, as in this example) or deny all sample data previews to the connection (\nfalse\n).\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can also optionally specify the set of assets to include in crawling. For PostgreSQL assets, this should be specified as a map keyed by database name with values as a list of schemas within that database to crawl. (If set to null, all databases and schemas will be crawled.)\nYou can also optionally specify the list of assets to exclude from crawling. For PostgreSQL assets, this should be specified as a map keyed by database name with values as a list of schemas within the database to exclude. (If set to null, no assets will be excluded.)\nYou can then run the workflow using the\nrun()\nmethod on the object you've created. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI.\nTo rerun an existing workflow, see the steps below.\nIAM user authentication\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it will create a new connection and new assets within that connection — which could lead to duplicate assets if you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow (see\nRe-run existing workflow\nbelow).\n7.0.0\nTo crawl assets directly from PostgreSQL using IAM user authentication:\nJava\nPython\nRaw REST API\nComing soon\nPostgreSQL assets crawling using IAM user authentication\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nPostgresCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nPostgresCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\nrow_limit\n=\n10000\n,\n# (5)\nallow_query\n=\nTrue\n,\n# (6)\nallow_query_preview\n=\nTrue\n,\n# (7)\n)\n.\ndirect\n(\nhostname\n=\n\"test.com\"\n,\ndatabase\n=\n\"test-db\"\n)\n# (8)\n.\niam_user_auth\n(\n# (9)\nusername\n=\n\"test-user\"\n,\naccess_key\n=\n\"test-access-key\"\n,\nsecret_key\n=\n\"test-secret-key\"\n,\n)\n.\ninclude\n(\nassets\n=\n{\n\"test-include\"\n:\n[\n\"test-asset-1\"\n,\n\"test-asset-2\"\n]})\n# (10)\n.\nexclude\n(\nassets\n=\nNone\n)\n# (11)\n.\nexclude_regex\n(\nregex\n=\n\".*_TEST\"\n)\n# (12)\n.\nsource_level_filtering\n(\nenable\n=\nTrue\n)\n# (13)\n.\njdbc_internal_methods\n(\nenable\n=\nTrue\n)\n# (14)\n.\nto_workflow\n()\n# (15)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (16)\nBase configuration for a new PostgresCrawler crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can specify whether you want to allow queries to this connection.\n(\nTrue\n, as in this example) or deny all query access to the connection (\nFalse\n).\nYou can specify whether you want to allow data previews on this connection\n(\nTrue\n, as in this example) or deny all sample data previews to the connection (\nFalse\n).\nYou can specify the hostname of your Postgres instance and database name for direct extraction.\nWhen using\niam_user_auth()\n, you need to provide the following information:\ndatabase username to extract from.\naccess key through which to access PostgreSQL.\nsecret key through which to access PostgreSQL.\nYou can also optionally specify the set of assets to\ninclude in crawling. For Postgres assets, this should be specified\nas a dict keyed by database name with each value being\na list of schemas to include. (If set to None, all table will be crawled.)\nYou can also optionally specify the list of assets to\nexclude from crawling. For Postgres assets, this should be\nspecified as a dict keyed by database name with each value being\na list of schemas to exclude. (If set to None, no table will be excluded.)\nYou can also optionally specify the exclude regex for\ncrawler ignore tables and views based on a naming convention.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) schema\nlevel filtering on source, schemas selected in the include filter will be fetched.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) JDBC\ninternal methods for data extraction.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the\npackages and workflows introduction\nfor details on how you can check the status\nand wait until the workflow has been completed.\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI.\nTo rerun an existing workflow, see the steps below.\nIAM role authentication\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it will create a new connection and new assets within that connection — which could lead to duplicate assets if you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow (see\nRe-run existing workflow\nbelow).\n7.0.0\nTo crawl assets directly from PostgreSQL using IAM role authentication:\nJava\nPython\nRaw REST API\nComing soon\nPostgreSQL assets crawling using IAM role authentication\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nPostgresCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nPostgresCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\nrow_limit\n=\n10000\n,\n# (5)\nallow_query\n=\nTrue\n,\n# (6)\nallow_query_preview\n=\nTrue\n,\n# (7)\n)\n.\ndirect\n(\nhostname\n=\n\"test.com\"\n,\ndatabase\n=\n\"test-db\"\n)\n# (8)\n.\niam_role_auth\n(\n# (9)\nusername\n=\n\"test-user\"\n,\naccess_key\n=\n\"test-access-key\"\n,\nsecret_key\n=\n\"test-secret-key\"\n,\n)\n.\ninclude\n(\nassets\n=\n{\n\"test-include\"\n:\n[\n\"test-asset-1\"\n,\n\"test-asset-2\"\n]})\n# (10)\n.\nexclude\n(\nassets\n=\nNone\n)\n# (11)\n.\nexclude_regex\n(\nregex\n=\n\".*_TEST\"\n)\n# (12)\n.\nsource_level_filtering\n(\nenable\n=\nTrue\n)\n# (13)\n.\njdbc_internal_methods\n(\nenable\n=\nTrue\n)\n# (14)\n.\nto_workflow\n()\n# (15)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (16)\nBase configuration for a new PostgresCrawler crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can specify whether you want to allow queries to this connection.\n(\nTrue\n, as in this example) or deny all query access to the connection (\nFalse\n).\nYou can specify whether you want to allow data previews on this connection\n(\nTrue\n, as in this example) or deny all sample data previews to the connection (\nFalse\n).\nYou can specify the hostname of your Postgres instance and database name for direct extraction.\nWhen using\niam_role_auth()\n, you need to provide the following information:\ndatabase username to extract from.\nARN of the AWS role.\nAWS external ID.\nYou can also optionally specify the set of assets to\ninclude in crawling. For Postgres assets, this should be specified\nas a dict keyed by database name with each value being\na list of schemas to include. (If set to None, all table will be crawled.)\nYou can also optionally specify the list of assets to\nexclude from crawling. For Postgres assets, this should be\nspecified as a dict keyed by database name with each value being\na list of schemas to exclude. (If set to None, no table will be excluded.)\nYou can also optionally specify the exclude regex for\ncrawler ignore tables and views based on a naming convention.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) schema\nlevel filtering on source, schemas selected in the include filter will be fetched.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) JDBC\ninternal methods for data extraction.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the\npackages and workflows introduction\nfor details on how you can check the status\nand wait until the workflow has been completed.\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI.\nTo rerun an existing workflow, see the steps below.\nOffline extraction\n¶\nWill create a new connection\nThis should only be used to create the workflow the first time. Each time you run this method it will create a new connection and new assets within that connection — which could lead to duplicate assets if you run the workflow this way multiple times with the same settings.\nInstead, when you want to re-crawl assets, re-run the existing workflow (see\nRe-run existing workflow\nbelow).\n7.0.0\nTo crawl PostgeSQL assets from the S3 bucket:\nJava\nPython\nRaw REST API\nComing soon\nCrawling PostgreSQL assets from a bucket\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.packages\nimport\nPostgresCrawler\nclient\n=\nAtlanClient\n()\ncrawler\n=\n(\nPostgresCrawler\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nconnection_name\n=\n\"production\"\n,\n# (3)\nadmin_roles\n=\n[\nclient\n.\nrole_cache\n.\nget_id_for_name\n(\n\"$admin\"\n)],\n# (4)\nadmin_groups\n=\nNone\n,\nadmin_users\n=\nNone\n,\nrow_limit\n=\n10000\n,\n# (5)\nallow_query\n=\nTrue\n,\n# (6)\nallow_query_preview\n=\nTrue\n,\n# (7)\n)\n.\ns3\n(\n# (8)\nbucket_name\n=\n\"test-bucket\"\n,\nbucket_prefix\n=\n\"test-prefix\"\n,\nbucket_region\n=\n\"test-region\"\n,\n)\n.\nsource_level_filtering\n(\nenable\n=\nTrue\n)\n# (9)\n.\njdbc_internal_methods\n(\nenable\n=\nTrue\n)\n# (10)\n.\nto_workflow\n()\n# (11)\n)\nresponse\n=\nclient\n.\nworkflow\n.\nrun\n(\ncrawler\n)\n# (12)\nBase configuration for a new PostgresCrawler crawler.\nYou must provide a client instance.\nYou must provide a name for the connection that the PostgreSQL assets will exist within.\nYou must specify at\nleast one connection admin\n, either:\neveryone in a role (in this example, all\n$admin\nusers).\na list of groups (names) that will be connection admins.\na list of users (names) that will be connection admins.\nYou can specify a maximum number of rows that can be accessed for any asset in the connection.\nYou can specify whether you want to allow queries to this connection.\n(\nTrue\n, as in this example) or deny all query access to the connection (\nFalse\n).\nYou can specify whether you want to allow data previews on this connection\n(\nTrue\n, as in this example) or deny all sample data previews to the connection (\nFalse\n).\nWhen using\ns3()\n, you need to provide the following information:\nname of the bucket/storage that contains the extracted metadata files.\nprefix is everything after the bucket/storage name, including the\npath\n.\n(Optional) name of the region if applicable.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) schema\nlevel filtering on source, schemas selected in the include filter will be fetched.\nYou can also optionally specify whether to enable (\nTrue\n) or disable (\nFalse\n) JDBC\ninternal methods for data extraction.\nNow, you can convert the package into a\nWorkflow\nobject.\nRun the workflow by invoking the\nrun()\nmethod on the workflow client, passing the created object.\nWorkflows run asynchronously\nRemember that workflows run asynchronously.\nSee the\npackages and workflows introduction\nfor details on how you can check the status\nand wait until the workflow has been completed.\nCreate the workflow via UI only\nWe recommend creating the workflow only via the UI.\nTo rerun an existing workflow, see the steps below.\nRe-run existing workflow\n¶\n4.0.0\nTo re-run an existing workflow for PostgreSQL assets:\nJava\nPython\nKotlin\nRaw REST API\nRe-run existing PostgreSQL workflow\n1\n2\n3\n4\nList\n<\nWorkflowSearchResult\n>\nexisting\n=\nWorkflowSearchRequest\n// (1)\n.\nfindByType\n(\nclient\n,\nPostgreSQLCrawler\n.\nPREFIX\n,\n5\n);\n// (2)\n// Determine which of the results is the PostgreSQL workflow you want to re-run...\nWorkflowRunResponse\nresponse\n=\nexisting\n.\nget\n(\nn\n).\nrerun\n(\nclient\n);\n// (3)\nYou can search for existing workflows through the\nWorkflowSearchRequest\nclass.\nYou can find workflows by their type using the\nfindByType()\nhelper method and providing the prefix for one of the packages. In this example, we do so for the\nPostgreSQLCrawler\n. (You can also specify the maximum number of resulting workflows you want to retrieve as results.)\nOnce you've found the workflow you want to re-run, you can simply call the\nrerun()\nhelper method on the workflow search result. The\nWorkflowRunResponse\nis just a subtype of\nWorkflowResponse\nso has the same helper method to monitor progress of the workflow run. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nOptionally, you can use the\nrerun(client, true)\nmethod with idempotency to avoid re-running a workflow that is already in running or in a pending state. This will return details of the already running workflow if found, and by default, it is set to\nfalse\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRe-run existing DynamoDB workflow\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.enums\nimport\nWorkflowPackage\nclient\n=\nAtlanClient\n()\nexisting\n=\nclient\n.\nworkflow\n.\nfind_by_type\n(\n# (1)\nprefix\n=\nWorkflowPackage\n.\nPOSTGRES\n,\nmax_results\n=\n5\n)\n# Determine which DynamoDB workflow (n)\n# from the list of results you want to re-run.\nresponse\n=\nclient\n.\nworkflow\n.\nrerun\n(\nexisting\n[\nn\n])\n# (2)\nYou can find workflows by their type using the workflow client\nfind_by_type()\nmethod and providing the\nprefix\nfor one of the packages.\nIn this example, we do so for the\nPostgreSQLCrawler\n. (You can also specify\nthe\nmaximum number of resulting workflows\nyou want to retrieve as results.)\nOnce you've found the workflow you want to re-run,\nyou can simply call the workflow client\nrerun()\nmethod.\nOptionally, you can use\nrerun(idempotent=True)\nto avoid re-running a workflow that is already in running or in a pending state.\nThis will return details of the already running workflow if found, and by default, it is set to\nFalse\n.\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRe-run existing PostgreSQL workflow\n1\n2\n3\n4\nval\nexisting\n=\nWorkflowSearchRequest\n// (1)\n.\nfindByType\n(\nclient\n,\nPostgreSQLCrawler\n.\nPREFIX\n,\n5\n)\n// (2)\n// Determine which of the results is the PostgreSQL workflow you want to re-run...\nval\nresponse\n=\nexisting\n.\nget\n(\nn\n).\nrerun\n(\nclient\n)\n// (3)\nYou can search for existing workflows through the\nWorkflowSearchRequest\nclass.\nYou can find workflows by their type using the\nfindByType()\nhelper method and providing the prefix for one of the packages. In this example, we do so for the\nPostgreSQLCrawler\n. (You can also specify the maximum number of resulting workflows you want to retrieve as results.)\nOnce you've found the workflow you want to re-run, you can simply call the\nrerun()\nhelper method on the workflow search result. The\nWorkflowRunResponse\nis just a subtype of\nWorkflowResponse\nso has the same helper method to monitor progress of the workflow run. Because this operation will execute work in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nOptionally, you can use the\nrerun(client, true)\nmethod with idempotency to avoid re-running a workflow that is already in running or in a pending state. This will return details of the already running workflow if found, and by default, it is set to\nfalse\nWorkflows run asynchronously\nRemember that workflows run asynchronously. See the\npackages and workflows introduction\nfor details on how you can check the status and wait until the workflow has been completed.\nRequires multiple steps through the raw REST API\nFind the existing workflow.\nSend through the resulting re-run request.\nPOST /api/service/workflows/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n{\n\"from\"\n:\n0\n,\n\"size\"\n:\n5\n,\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n,\n\"query\"\n:\n{\n\"prefix\"\n:\n{\n\"metadata.name.keyword\"\n:\n{\n\"value\"\n:\n\"atlan-postgres\"\n// (1)\n}\n}\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"metadata.creationTimestamp\"\n:\n{\n\"nested\"\n:\n{\n\"path\"\n:\n\"metadata\"\n},\n\"order\"\n:\n\"desc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n}\nSearching by the\natlan-postgres\nprefix will ensure you only find existing PostgreSQL assets workflows.\nName of the workflow\nThe name of the workflow will be nested within the\n_source.metadata.name\nproperty of the response object. (Remember since this is a search, there could be multiple results, so you may want to use the other details in each result to determine which workflow you really want.)\nPOST /api/service/workflows/submit\n100\n101\n102\n103\n104\n{\n\"namespace\"\n:\n\"default\"\n,\n\"resourceKind\"\n:\n\"WorkflowTemplate\"\n,\n\"resourceName\"\n:\n\"atlan-postgres-1684500411\"\n// (1)\n}\nSend the name of the workflow as the\nresourceName\nto rerun it.\n2022-12-28\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}