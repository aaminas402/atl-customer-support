{
  "source_url": "snippets_access_personas.html",
  "text": "Managing personas - Developer\nSkip to content\nPersonas\n¶\nPersonas\nare a way of curating assets for a group of users.\nList personas\n¶\n0.0.12\n1.4.0\n4.0.0\nTo retrieve a listing of personas, run a search and page the results:\nJava\nPython\nKotlin\nGo\nRaw REST API\nList personas\n1\n2\n3\n4\n5\n6\nPersona\n.\nselect\n(\nclient\n)\n// (1)\n.\nstream\n()\n// (2)\n.\nfilter\n(\na\n->\na\ninstanceof\nPersona\n)\n// (3)\n.\nforEach\n(\np\n->\n{\n// (4)\nlog\n.\ninfo\n(\n\"Persona: {}\"\n,\np\n);\n});\nTo start building up a query specifically for personas, you can use the\nselect()\nconvenience method on\nPersona\nitself. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nList personas\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.fluent_search\nimport\nCompoundQuery\n,\nFluentSearch\nclient\n=\nAtlanClient\n()\nsearch_request\n=\n(\nFluentSearch\n()\n# (1)\n.\nwhere\n(\nCompoundQuery\n.\nactive_assets\n())\n.\nwhere\n(\nCompoundQuery\n.\nasset_type\n(\nPersona\n))\n# (2)\n)\n.\nto_request\n()\n# (3)\nresults\n=\nclient\n.\nasset\n.\nsearch\n(\nsearch_request\n)\n# (4)\nfor\nasset\nin\nresults\n:\n# (5)\nif\nisinstance\n(\nasset\n,\nPersona\n):\n# Do something with the Persona\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPersona\n.\nBuild this query into a new search request.\nRun the search.\nPage through the results (each asset in the results will be a persona).\nList personas\n1\n2\n3\n4\n5\n6\nPersona\n.\nselect\n(\nclient\n)\n// (1)\n.\nstream\n()\n// (2)\n.\nfilter\n{\nit\nis\nPersona\n}\n// (3)\n.\nforEach\n{\n// (4)\nlog\n.\ninfo\n{\n\"Persona:\n$\nit\n\"\n}\n}\nTo start building up a query specifically for personas, you can use the\nselect()\nconvenience method on\nPersona\nitself. Because this operation may need to retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nThe search will only run when you call the\nstream()\nmethod, which will then lazily-load each page of results into a stream.\n(Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type.\nThis is the pattern for iterating through all results (across pages) covered in the\nSearching for assets\nportion of the SDK documentation.\nList personas\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nresponse\n,\natlanErr\n:=\nassets\n.\nNewFluentSearch\n().\n// (1)\nPageSizes\n(\n20\n).\nActiveAssets\n().\nAssetType\n(\n\"Persona\"\n).\n// (2)\nExecute\n()\n// (3)\nif\natlanErr\n!=\nnil\n{\nfmt\n.\nPrintln\n(\n\"Error:\"\n,\natlanErr\n)\n}\nfor\n_\n,\nentity\n:=\nrange\nresponse\n[\n0\n].\nEntities\n{\n// (4)\nif\nentity\n.\nTypeName\n!=\nnil\n&&\n*\nentity\n.\nTypeName\n==\n\"Persona\"\n{\n// Do something with the Persona\n}\n}\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPersona\n.\nRun the search.\nPage through the results (each asset in the results will be a persona).\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\"dsl\"\n:\n{\n\"query\"\n:\n{\n// (1)\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Persona\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nBegin building up a query combining multiple conditions.\nEnsure that we include only objects of type\nPersona\n.\nCreate a persona\n¶\n0.0.12\n2.0.0\n4.0.0\nTo create a new persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nCreate a persona\n1\n2\n3\nPersona\ntoCreate\n=\nPersona\n.\ncreator\n(\n\"Data Assets\"\n).\nbuild\n();\n// (1)\nAssetMutationResponse\nresponse\n=\ntoCreate\n.\nsave\n(\nclient\n);\n// (2)\nPersona\npersona\n=\n(\nPersona\n)\nresponse\n.\ngetCreatedAssets\n().\nget\n(\n0\n);\n// (3)\nLike other builder patterns in the SDK, the\ncreator()\nmethod ensures all required information is provided for the persona.\nTo create the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then retrieve the resulting details of the created persona from the response (you may of course want to do some type checking first).\nCreate a persona\n1\n2\n3\n4\n5\n6\n7\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nclient\n=\nAtlanClient\n()\nto_create\n=\nPersona\n.\ncreator\n(\nname\n=\n\"Data Assets\"\n)\n# (1)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_create\n)\n# (2)\np\n=\nresponse\n.\nassets_created\n(\nasset_type\n=\nPersona\n)[\n0\n]\n# (3)\nLike other builder patterns in the SDK, the\ncreate()\nmethod ensures all required information is provided for the persona.\nTo create the persona in Atlan, call the\nsave()\nmethod against the object you've built.\nYou can then retrieve the resulting details of the created persona from the response (you may of course want to do some type checking first).\nCreate a persona\n1\n2\n3\nval\ntoCreate\n=\nPersona\n.\ncreator\n(\n\"Data Assets\"\n).\nbuild\n()\n// (1)\nval\nresponse\n=\ntoCreate\n.\nsave\n(\nclient\n)\n// (2)\nval\npersona\n=\nresponse\n.\ncreatedAssets\n[\n0\n]\nas\nPersona\n// (3)\nLike other builder patterns in the SDK, the\ncreator()\nmethod ensures all required information is provided for the persona.\nTo create the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can then retrieve the resulting details of the created persona from the response (you may of course want to do some type checking first).\nCreate a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\ntoCreate\n:=\n&\nassets\n.\nPersona\n{}\ntoCreate\n.\nCreator\n(\n\"Data Assets\"\n)\n// (1)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoCreate\n)\n// (2)\nif\natlanErr\n!=\nnil\n{\nfmt\n.\nPrintln\n(\n\"Error:\"\n,\natlanErr\n)\n}\nelse\n{\nfor\n_\n,\nentity\n:=\nrange\nresponse\n.\nMutatedEntities\n.\nCREATE\n{\n// (3)\nfmt\n.\nPrintln\n(\n\"Persona ID:\"\n,\nentity\n.\nGuid\n,\n\"Display Text:\"\n,\nentity\n.\nDisplayText\n)\n// Do something with the Persona\n}\n}\nLike other builder patterns in the SDK, the\nCreator()\nmethod ensures all required information is provided for the persona.\nTo create the persona in Atlan, call the\nSave()\nmethod against the object you've built.\nYou can then retrieve the resulting details of the created persona from the response (you may of course want to do some type checking first).\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Persona\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"displayName\"\n:\n\"Data Assets\"\n,\n// (3)\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (4)\n\"qualifiedName\"\n:\n\"Data Assets\"\n,\n// (5)\n\"name\"\n:\n\"Data Assets\"\n// (6)\n}\n}\n]\n}\nWrap the persona definition in an\nentities\narray.\nEnsure the type of each nested object is exactly\nPersona\n.\nUse the\ndisplayName\nto provide the name for the persona as you want it to appear in the UI.\nEnsure you explicitly set the access control to enabled when creating it.\nYou must provide a\nqualifiedName\nfor the persona, although this will be generated and overwritten by the back-end\nYou must provide a\nname\nfor the persona, although this will also be normalized by the back-end so will be slightly different once created.\nRetrieve a persona\n¶\n0.0.12\n1.4.0\n4.0.0\nTo retrieve a persona by its name:\nJava\nPython\nKotlin\nGo\nRaw REST API\nRetrieve a persona\n1\nList\n<\nPersona\n>\nlist\n=\nPersona\n.\nfindByName\n(\nclient\n,\n\"Data Assets\"\n);\n// (1)\nThe\nfindByName()\nmethod handles searching for the persona based on its name, which could therefore return more than one result. You can also (optionally) provide a second parameter with a list of attributes to retrieve for each persona. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve a persona\n1\n2\n3\n4\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nresult\n=\nclient\n.\nasset\n.\nfind_personas_by_name\n(\n\"Data Assets\"\n)\n# (1)\nThe\nasset.find_personas_by_name()\nmethod handles searching for the persona based on its name, which could therefore return more than one result.\nRetrieve a persona\n1\nval\nlist\n=\nPersona\n.\nfindByName\n(\nclient\n,\n\"Data Assets\"\n)\n// (1)\nThe\nfindByName()\nmethod handles searching for the persona based on its name, which could therefore return more than one result. You can also (optionally) provide a second parameter with a list of attributes to retrieve for each persona. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nRetrieve a persona\n1\nresponse\n,\natlanErr\n:=\nassets\n.\nFindPersonasByName\n(\n\"Data Assets\"\n)\n// (1)\nThe\nassets.FindPersonasByName()\nmethod handles searching for the persona based on its name, which could therefore return more than one result.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n{\n\"dsl\"\n:\n{\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Persona\"\n// (1)\n}\n}\n},\n{\n\"term\"\n:\n{\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"Data Assets\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"track_total_hits\"\n:\ntrue\n},\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nDefine the search to include results for a type exactly matching\nPersona\n, and...\n... with the exact name of the persona you want to find.\nUpdate a persona\n¶\n0.0.12\n2.0.0\n4.0.0\nTo update a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nUpdate a persona\n1\n2\n3\n4\n5\n6\n7\nPersona\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndescription\n(\n\"Now with a description!\"\n)\n// (5)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (6)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain on any other updates, such as changing the description of the persona.\nTo update the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nclient\n=\nAtlanClient\n()\nto_update\n=\nPersona\n.\nupdater\n(\n# (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n# (2)\n\"Data Assets\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndescription\n=\n\"Now with a description!\"\n# (5)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (7)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the persona.\nTo update the persona in Atlan, call the\nsave()\nmethod with the object you've built.\nUpdate a persona\n1\n2\n3\n4\n5\n6\n7\nval\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndescription\n(\n\"Now with a description!\"\n)\n// (5)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (6)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain on any other updates, such as changing the description of the persona.\nTo update the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nUpdate a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\ntoUpdate\n:=\n&\nassets\n.\nPersona\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n,\n// (4)\n)\ndescription\n:=\n\"Now with a description \"\ntoUpdate\n.\nDescription\n=\n&\ndescription\n// (5)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (6)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the persona.\nTo update the persona in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Persona\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (3)\n\"name\"\n:\n\"Data Assets\"\n// (4)\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (5)\n\"description\"\n:\n\"Now with a description!\"\n,\n// (6)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPersona\n.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add on any other updates, such as changing the description of the persona.\nDelete a persona\n¶\n0.0.12\n1.4.0\n4.0.0\nTo permanently delete a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nDelete a persona\n1\nPersona\n.\npurge\n(\nclient\n,\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n);\n// (1)\nTo permanently delete a persona in Atlan, call the\npurge()\nmethod with the GUID of the persona. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a persona\n1\n2\n3\n4\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nclient\n=\nAtlanClient\n()\nclient\n.\nasset\n.\npurge_by_guid\n(\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n)\n# (1)\nTo permanently delete a persona in Atlan, call the\nasset.purge_by_guid()\nmethod with the GUID of the persona.\nDelete a persona\n1\nPersona\n.\npurge\n(\nclient\n,\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n)\n// (1)\nTo permanently delete a persona in Atlan, call the\npurge()\nmethod with the GUID of the persona. Because this operation will remove the structure from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDelete a persona\n1\nassets\n.\nPurgeByGuid\n([]\nstring\n{\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n})\n// (1)\nTo permanently delete a persona in Atlan, call the\nassets.PurgeByGuid()\nmethod with the GUID of the persona.\nDELETE /api/meta/entity/bulk?guid=67e08ab7-9688-40bc-ae4a-da2bc06b1588&deleteType=PURGE\n1\n// (1)\nAll the details for deleting the persona are specified in the URL directly. Note that you must provide the GUID of the persona to delete it.\nActivate or deactivate a persona\n¶\n0.0.12\n1.4.0\n4.0.0\nAlternatively, if you only want to temporarily deactivate a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nDeactivate a persona\n1\n2\n3\n4\n5\n6\nPersona\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n)\n// (4)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (5)\nUse the\nupdater()\nmethod to update the persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the persona, while setting it to\ntrue\nwill activate the persona.\nTo then apply that activation / deactivation to the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the state in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDeactivate a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nclient\n=\nAtlanClient\n()\nto_update\n=\nPersona\n.\nupdater\n(\n# (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n# (2)\n\"Data Assets\"\n,\n# (3)\nFalse\n# (4)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (5)\nUse the\nupdater()\nmethod to update the persona.\nYou must provide the qualified_name of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update. Setting this to\nFalse\nwill deactivate the persona, while setting it to\nTrue\nwill activate the persona.\nTo then apply that activation / deactivation to the persona in Atlan, call the\nsave()\nmethod with the object you've built.\nDeactivate a persona\n1\n2\n3\n4\n5\n6\nval\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n)\n// (4)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (5)\nUse the\nupdater()\nmethod to update the persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the persona, while setting it to\ntrue\nwill activate the persona.\nTo then apply that activation / deactivation to the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the state in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nDeactivate a persona\n1\n2\n3\n4\n5\n6\n7\ntoUpdate\n:=\n&\nassets\n.\nPersona\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n,\n// (4)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (5)\nUse the\nUpdater()\nmethod to update the persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update. Setting this to\nFalse\nwill deactivate the persona, while setting it to\nTrue\nwill activate the persona.\nTo then apply that activation / deactivation to the persona in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Persona\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (3)\n\"name\"\n:\n\"Data Assets\"\n// (4)\n\"isAccessControlEnabled\"\n:\nfalse\n// (5)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPersona\n.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update. Setting this to\nfalse\nwill deactivate the persona, while setting it to\ntrue\nwill activate the persona.\nAdd subjects to a persona\n¶\n0.0.12\n1.4.0\n4.0.0\nSimilarly, adding subjects to a persona is a matter of updating the persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd subjects to a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nPersona\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n)\n// (4)\n.\npersonaGroup\n(\n\"group1\"\n)\n// (5)\n.\npersonaGroup\n(\n\"group2\"\n)\n.\npersonaUser\n(\n\"jsmith\"\n)\n// (6)\n.\npersonaUser\n(\n\"jdoe\"\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (7)\nUse the\nupdater()\nmethod to update the persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain any number of updates to the\npersonaGroup()\nproperty. These should be internal names of groups that you want to be controlled through the persona's policies.\nSimilarly, you can chain any number of updates to the\npersonaUser()\nproperty. These should be usernames of users that you want to be controlled through the persona's policies.\nTo then apply those membership updates to the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd subjects to a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nclient\n=\nAtlanClient\n()\nto_update\n=\nPersona\n.\nupdater\n(\n# (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n# (2)\n\"Data Assets\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\npersona_groups\n=\n[\n\"group1\"\n,\n\"group2\"\n]\n# (5)\nto_update\n.\npersona_users\n=\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n# (6)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (7)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add any number of groups to the\npersona_groups\nproperty. These should be internal names of groups that you want to be controlled through the persona's policies.\nSimilarly, you can add any number of users to the\npersona_users\nproperty. These should be usernames of users that you want to be controlled through the persona's policies.\nTo then apply those membership updates to the persona in Atlan, call the\nsave()\nmethod against the object you've built.\nAdd subjects to a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nval\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n)\n// (4)\n.\npersonaGroup\n(\n\"group1\"\n)\n// (5)\n.\npersonaGroup\n(\n\"group2\"\n)\n.\npersonaUser\n(\n\"jsmith\"\n)\n// (6)\n.\npersonaUser\n(\n\"jdoe\"\n)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (7)\nUse the\nupdater()\nmethod to update the persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain any number of updates to the\npersonaGroup()\nproperty. These should be internal names of groups that you want to be controlled through the persona's policies.\nSimilarly, you can chain any number of updates to the\npersonaUser()\nproperty. These should be usernames of users that you want to be controlled through the persona's policies.\nTo then apply those membership updates to the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd subjects to a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\ntoUpdate\n:=\n&\nassets\n.\nPersona\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\nfalse\n,\n// (4)\n)\ntoUpdate\n.\nPersonaGroups\n=\n&\n[]\nstring\n{\n\"group1\"\n,\n\"group2\"\n}\n// (5)\ntoUpdate\n.\nPersonaUsers\n=\n&\n[]\nstring\n{\n\"jsmith\"\n,\n\"jdoe\"\n}\n// (6)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (7)\nUse the\nUpdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add any number of groups to the\nPersonaGroups\nproperty. These should be internal names of groups that you want to be controlled through the persona's policies.\nSimilarly, you can add any number of users to the\nPersonaUsers\nproperty. These should be usernames of users that you want to be controlled through the persona's policies.\nTo then apply those membership updates to the persona in Atlan, call the\nSave()\nmethod against the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Persona\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (3)\n\"name\"\n:\n\"Data Assets\"\n// (4)\n\"isAccessControlEnabled\"\n:\nfalse\n,\n// (5)\n\"personaGroups\"\n:\n[\n\"group1\"\n,\n\"group2\"\n],\n// (6)\n\"personaUsers\"\n:\n[\n\"jsmith\"\n,\n\"jdoe\"\n]\n// (7)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPersona\n.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then add any number of groups to the\npersonaGroups\nproperty. These should be internal names of groups that you want to be controlled through the persona's policies.\nSimilarly, you can add any number of users to the\npersonaUsers\nproperty. These should be usernames of users that you want to be controlled through the persona's policies.\nAdd policies to a persona\n¶\nDo not add policies in bulk\nBe careful to only add policies one-by-one to a persona. While the SDKs will allow you to add them in bulk, currently this results in a persona where only the final policy in the batch is active at the end of the operation.\nAPI token must be a connection admin\nTo manage policies for a connection, the API token must be a connection admin on that connection. When you create a connection using an API token, the API token is\nautomatically\nmade a connection admin; however, for any other connection you must\ncarry out extra steps to make the API token a connection admin\n.\nAdd a metadata policy\n¶\n0.0.12\n7.0.0\n4.0.0\nTo add a metadata policy to a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd metadata policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\nAuthPolicy\nmetadata\n=\nPersona\n.\ncreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nSet\n.\nof\n(\nPersonaMetadataAction\n.\nREAD\n),\n// (5)\n\"default/snowflake/1234567890\"\n,\n// (6)\nSet\n.\nof\n(\n\"entity:default/snowflake/1234567890\"\n))\n// (7)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n);\n// (8)\nUse the\ncreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nArrays.asList(PersonaMetadataAction.values())\n.\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd metadata policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\n,\nPersonaMetadataAction\nclient\n=\nAtlanClient\n()\nmetadata\n=\nPersona\n.\ncreate_metadata_policy\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"Simple read access\"\n,\n# (3)\npersona_id\n=\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n# (4)\npolicy_type\n=\nAuthPolicyType\n.\nALLOW\n,\n# (5)\nactions\n=\n{\nPersonaMetadataAction\n.\nREAD\n},\n# (6)\nconnection_qualified_name\n=\n\"default/snowflake/1234567890\"\n,\n# (7)\nresources\n=\n{\n\"entity:default/snowflake/1234567890\"\n},\n# (8)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nmetadata\n)\n# (9)\nUse the\ncreate_metadata_policy()\nmethod to start building a metadata policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nSpecify the\nqualified_name\nof the connection whose assets this policy should control.\nSpecify the set of\nqualified_name\nprefixes for the assets this policy should control. Each\nqualified_name\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualified_name\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd metadata policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\nval\nmetadata\n=\nPersona\n.\ncreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nsetOf\n(\nPersonaMetadataAction\n.\nREAD\n),\n// (5)\n\"default/snowflake/1234567890\"\n,\n// (6)\nsetOf\n(\n\"entity:default/snowflake/1234567890\"\n))\n// (7)\n.\nbuild\n()\nval\nresponse\n=\nmetadata\n.\nsave\n(\nclient\n)\n// (8)\nUse the\ncreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nPersonaMetadataAction.values().toList()\n.\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd metadata policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nPersona\n:=\n&\nassets\n.\nPersona\n{}\nmetadata\n,\n_\n:=\nPersona\n.\nCreateMetadataPolicy\n(\n// (1)\n\"Simple read access\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\natlan\n.\nAuthPolicyTypeAllow\n,\n// (4)\n[]\natlan\n.\nPersonaMetadataAction\n{\natlan\n.\nPersonaMetadataActionRead\n},\n// (5)\n\"default/snowflake/1234567890\"\n,\n// (6)\n[]\nstring\n{\n\"entity:default/snowflake/1234567890\"\n},\n// (7)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\nmetadata\n)\n// (8)\nUse the\nCreateMetadataPolicy()\nmethod to start building a metadata policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod with the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"metadata\"\n,\n// (3)\n\"policyCategory\"\n:\n\"persona\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"atlas\"\n,\n// (6)\n\"connectionQualifiedName\"\n:\n\"default/snowflake/1234567890\"\n,\n// (7)\n\"policyResources\"\n:\n[\n\"entity:default/snowflake/1234567890\"\n// (8)\n],\n\"name\"\n:\n\"Simple read access\"\n,\n// (9)\n\"qualifiedName\"\n:\n\"Simple read access\"\n,\n// (10)\n\"policyActions\"\n:\n[\n\"persona-asset-read\"\n// (11)\n],\n\"accessControl\"\n:\n{\n// (12)\n\"typeName\"\n:\n\"Persona\"\n,\n// (13)\n\"guid\"\n:\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n// (14)\n},\n\"policyResourceCategory\"\n:\n\"CUSTOM\"\n// (15)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\nmetadata\n.\nYou must use a policy category of\npersona\n.\nSpecify the type of policy (granting or denying the actions specified next).\nYou must use a policy service name of\natlas\n.\nSpecify the\nqualifiedName\nof the connection whose assets will be controlled by this policy.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo review available permissions\nTo review the available permissions, see the SDKs — for example, the\nPersonaMetadataAction\nenum in the Java SDK.\nUse an embedded\naccessControl\nobject to define the persona to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPersona\n.\nYou must provide the GUID of the persona to attach this policy to.\nYou must set the policy resource category to\nCUSTOM\n.\nAdd a data policy\n¶\n0.0.12\n7.0.0\n4.0.0\nTo add a data policy to a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd data policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\nAuthPolicy\ndata\n=\nPersona\n.\ncreateDataPolicy\n(\n// (1)\n\"Allow access to data\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\n\"default/snowflake/1234567890\"\n,\n// (5)\nSet\n.\nof\n(\n\"entity:default/snowflake/1234567890\"\n))\n// (6)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ndata\n.\nsave\n(\nclient\n);\n// (7)\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying access to the data of the resources specified next).\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd data policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\nclient\n=\nAtlanClient\n()\ndata\n=\nPersona\n.\ncreate_data_policy\n(\n# (1)\nclient\n=\nclient\n,\n# (2)\nname\n=\n\"Allow access to data\"\n,\n# (3)\npersona_id\n=\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n# (4)\npolicy_type\n=\nAuthPolicyType\n.\nALLOW\n,\n# (5)\nconnection_qualified_name\n=\n\"default/snowflake/1234567890\"\n,\n# (6)\nresources\n=\n{\n\"entity:default/snowflake/1234567890\"\n},\n# (7)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndata\n)\n# (8)\nUse the\ncreate_data_policy()\nmethod to start building a data policy with the minimal required information.\nYou must provide a client instance.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying access to the data of the resources specified next).\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualified_name\nprefixes for the assets this policy should control. Each\nqualified_name\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualified_name\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd data policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\nval\ndata\n=\nPersona\n.\ncreateDataPolicy\n(\n// (1)\n\"Allow access to data\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\n\"default/snowflake/1234567890\"\n,\n// (5)\nsetOf\n(\n\"entity:default/snowflake/1234567890\"\n))\n// (6)\n.\nbuild\n()\nval\nresponse\n=\ndata\n.\nsave\n(\nclient\n)\n// (7)\nUse the\ncreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying access to the data of the resources specified next).\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd data policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPersona\n:=\n&\nassets\n.\nPersona\n{}\ndata\n,\n_\n:=\nPersona\n.\nCreateDataPolicy\n(\n// (1)\n\"Allow access to data\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\natlan\n.\nAuthPolicyTypeAllow\n,\n// (4)\n\"default/snowflake/1234567890\"\n,\n// (5)\n[]\nstring\n{\n\"entity:default/snowflake/1234567890\"\n},\n// (6)\n)\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ndata\n)\n// (7)\nUse the\nCreateDataPolicy()\nmethod to start building a data policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying access to the data of the resources specified next).\nSpecify the\nqualifiedName\nof the connection whose assets this policy should control.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nTo then add the policy to the persona in Atlan, call the\nSave()\nmethod with the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"data\"\n,\n// (3)\n\"policyCategory\"\n:\n\"persona\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"heka\"\n,\n// (6)\n\"connectionQualifiedName\"\n:\n\"default/snowflake/1234567890\"\n,\n// (7)\n\"policyResources\"\n:\n[\n\"entity-type:*\"\n,\n// (8)\n\"entity:default/snowflake/1234567890\"\n// (9)\n],\n\"name\"\n:\n\"Allow access to data\"\n,\n// (10)\n\"qualifiedName\"\n:\n\"Allow access to data\"\n,\n// (11)\n\"policyActions\"\n:\n[\n\"select\"\n// (12)\n],\n\"accessControl\"\n:\n{\n// (13)\n\"typeName\"\n:\n\"Persona\"\n,\n// (14)\n\"guid\"\n:\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n// (15)\n},\n\"policyResourceCategory\"\n:\n\"ENTITY\"\n// (16)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\ndata\n.\nYou must use a policy category of\npersona\n.\nSpecify the type of policy (granting or denying the actions specified next).\nYou must use a policy service name of\nheka\n.\nSpecify the\nqualifiedName\nof the connection whose assets will be controlled by this policy.\nYou must include a resource of\nentity-type:*\nin the list of resources.\nSpecify the set of\nqualifiedName\nprefixes for the assets this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all assets within a connection, this can simply be the\nqualifiedName\nof the connection itself.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow (or deny) in this policy. A data policy for a persona can only allow or deny\nselect\npermissions.\nUse an embedded\naccessControl\nobject to define the persona to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPersona\n.\nYou must provide the GUID of the persona to attach this policy to.\nYou must set the policy resource category to\nENTITY\n.\nAdd a glossary policy\n¶\n0.0.12\n1.4.0\n4.0.0\nTo add a glossary policy to a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd glossary policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\nAuthPolicy\nglossary\n=\nPersona\n.\ncreateGlossaryPolicy\n(\n// (1)\n\"All glossaries\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nSet\n.\nof\n(\nPersonaGlossaryAction\n.\nCREATE\n,\nPersonaGlossaryAction\n.\nUPDATE\n),\n// (5)\nSet\n.\nof\n(\n\"entity:OpU9a9kG825gAqpamXugf\"\n))\n// (6)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\nglossary\n.\nsave\n(\nclient\n);\n// (7)\nUse the\ncreateGlossaryPolicy()\nmethod to start building a glossary policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nArrays.asList(PersonaGlossaryAction.values())\n.\nSpecify the set of\nqualifiedName\ns of glossaries this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd glossary policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\n,\nPersonaGlossaryAction\nclient\n=\nAtlanClient\n()\nglossary\n=\nPersona\n.\ncreate_glossary_policy\n(\n# (1)\nname\n=\n\"All glossaries\"\n,\n# (2)\npersona_id\n=\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n# (3)\npolicy_type\n=\nAuthPolicyType\n.\nALLOW\n,\n# (4)\nactions\n=\n{\nPersonaGlossaryAction\n.\nCREATE\n,\nPersonaGlossaryAction\n.\nUPDATE\n},\n# (5)\nresources\n=\n{\n\"entity:OpU9a9kG825gAqpamXugf\"\n},\n# (6)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nglossary\n)\n# (7)\nUse the\ncreate_glossary_policy()\nmethod to start building a glossary policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nSpecify the set of\nqualified_name\ns of glossaries this policy should control. Each\nqualified_name\nshould itself be prefixed with\nentity:\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd glossary policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\nval\nglossary\n=\nPersona\n.\ncreateGlossaryPolicy\n(\n// (1)\n\"All glossaries\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nAuthPolicyType\n.\nALLOW\n,\n// (4)\nsetOf\n(\nPersonaGlossaryAction\n.\nCREATE\n,\nPersonaGlossaryAction\n.\nUPDATE\n),\n// (5)\nsetOf\n(\n\"entity:OpU9a9kG825gAqpamXugf\"\n))\n// (6)\n.\nbuild\n()\nval\nresponse\n=\nglossary\n.\nsave\n(\nclient\n)\n// (7)\nUse the\ncreateGlossaryPolicy()\nmethod to start building a glossary policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nPersonaGlossaryAction.values().toList()\n.\nSpecify the set of\nqualifiedName\ns of glossaries this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd glossary policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPersona\n:=\n&\nassets\n.\nPersona\n{}\nglossary\n,\n_\n:=\nPersona\n.\nCreateGlossaryPolicy\n(\n// (1)\n\"All glossaries\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\natlan\n.\nAuthPolicyTypeAllow\n,\n// (4)\n[]\natlan\n.\nPersonaGlossaryAction\n{\natlan\n.\nPersonaGlossaryActionCreate\n,\natlan\n.\nPersonaGlossaryActionUpdate\n},\n// (5)\n[]\nstring\n{\n\"entity:OpU9a9kG825gAqpamXugf\"\n},\n// (6)\n)\nresponse\n,\nerr\n:=\nassets\n.\nSave\n(\nglossary\n)\n// (7)\nUse the\nCreateGlossaryPolicy()\nmethod to start building a glossary policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the type of policy (granting or denying the actions specified next).\nSpecify the set of permissions you want to allow (or deny) in this policy.\nSpecify the set of\nqualifiedName\ns of glossaries this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n.\nTo then add the policy to the persona in Atlan, call the\nSave()\nmethod with the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"glossary\"\n,\n// (3)\n\"policyCategory\"\n:\n\"persona\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"atlas\"\n,\n// (6)\n\"policyResources\"\n:\n[\n\"entity:OpU9a9kG825gAqpamXugf\"\n// (7)\n],\n\"name\"\n:\n\"All glossaries\"\n,\n// (8)\n\"qualifiedName\"\n:\n\"All glossaries\"\n,\n// (9)\n\"policyActions\"\n:\n[\n\"persona-glossary-create\"\n,\n// (10)\n\"persona-glossary-update\"\n],\n\"accessControl\"\n:\n{\n// (11)\n\"typeName\"\n:\n\"Persona\"\n,\n// (12)\n\"guid\"\n:\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n// (13)\n},\n\"policyResourceCategory\"\n:\n\"CUSTOM\"\n// (14)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\nglossary\n.\nYou must use a policy category of\npersona\n.\nSpecify the type of policy (granting or denying the actions specified next).\nYou must use a policy service name of\natlas\n.\nSpecify the set of\nqualifiedName\ns of glossaries this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow (or deny) in this policy.\nTo review available permissions\nTo review the available permissions, see the SDKs — for example, the\nPersonaGlossaryAction\nenum in the Java SDK.\nUse an embedded\naccessControl\nobject to define the persona to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPersona\n.\nYou must provide the GUID of the persona to attach this policy to.\nYou must set the policy resource category to\nCUSTOM\n.\nAdd a domain policy\n¶\n0.0.12\n1.7.0\n4.0.0\nTo add a domain policy to a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nAdd domain policy to persona\n1\n2\n3\n4\n5\n6\n7\nAuthPolicy\ndomain\n=\nPersona\n.\ncreateDomainPolicy\n(\n// (1)\n\"Read access to some domains\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nSet\n.\nof\n(\nPersonaDomainAction\n.\nREAD_DOMAIN\n,\nPersonaDomainAction\n.\nREAD_SUBDOMAIN\n,\nPersonaDomainAction\n.\nREAD_PRODUCTS\n),\n// (4)\nSet\n.\nof\n(\n\"entity:default/domain/marketing\"\n,\n\"entity:default/domain/finance\"\n))\n// (5)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ndomain\n.\nsave\n(\nclient\n);\n// (6)\nUse the\ncreateDomainPolicy()\nmethod to start building a domain policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the set of permissions you want to allow in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nArrays.asList(PersonaDomainAction.values())\n.\nSpecify the set of\nqualifiedName\ns for the domains this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all domains, this can simply be a single value of\nentity:All domains\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd domain policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.enums\nimport\nAuthPolicyType\n,\nPersonaDomainAction\nclient\n=\nAtlanClient\n()\ndomain\n=\nPersona\n.\ncreate_domain_policy\n(\n# (1)\nname\n=\n\"Read access to some domains\"\n,\n# (2)\npersona_id\n=\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n# (3)\nactions\n=\n{\nPersonaDomainAction\n.\nREAD_DOMAIN\n,\nPersonaDomainAction\n.\nREAD_SUBDOMAIN\n,\nPersonaDomainAction\n.\nREAD_PRODUCTS\n},\n# (4)\nresources\n=\n{\n\"entity:default/domain/marketing\"\n,\n\"entity:default/domain/finance\"\n},\n# (5)\n)\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\ndomain\n)\n# (6)\nUse the\ncreate_domain_policy()\nmethod to start building a domain policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the set of permissions you want to allow in this policy.\nSpecify the set of\nqualified_name\ns for the domains this policy should control. Each\nqualified_name\nshould itself be prefixed with\nentity:\n. To control all domains, this can simply be a single value of\nentity:All domains\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod with the policy object you've built.\nAdd domain policy to persona\n1\n2\n3\n4\n5\n6\n7\nval\ndomain\n=\nPersona\n.\ncreateDomainPolicy\n(\n// (1)\n\"Read access to some domains\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\nsetOf\n(\nPersonaDomainAction\n.\nREAD_DOMAIN\n,\nPersonaDomainAction\n.\nREAD_SUBDOMAIN\n,\nPersonaDomainAction\n.\nREAD_PRODUCTS\n),\n// (4)\nsetOf\n(\n\"entity:default/domain/marketing\"\n,\n\"entity:default/domain/finance\"\n))\n// (5)\n.\nbuild\n()\nval\nresponse\n=\ndomain\n.\nsave\n(\nclient\n)\n// (6)\nUse the\ncreateDomainPolicy()\nmethod to start building a domain policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the set of permissions you want to allow in this policy.\nTo include all permissions\nIf you want to include all permissions, you can simply use\nPersonaDomainAction.values().toList()\n.\nSpecify the set of\nqualifiedName\ns for the domains this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all domains, this can simply be a single value of\nentity:All domains\n.\nTo then add the policy to the persona in Atlan, call the\nsave()\nmethod against the policy object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nAdd domain policy to persona\n1\n2\n3\n4\n5\n6\n7\n8\nPersona\n:=\n&\nassets\n.\nPersona\n{}\ndomain\n,\n_\n:=\nPersona\n.\nCreateDomainPolicy\n(\n// (1)\n\"Allow access to domain\"\n,\n// (2)\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n,\n// (3)\n[]\natlan\n.\nPersonaDomainAction\n{\natlan\n.\nPersonaDomainActionRead\n,\natlan\n.\nPersonaDomainActionReadSubdomain\n,\natlan\n.\nPersonaDomainActionReadProducts\n},\n// (4)\n[]\nstring\n{\n\"entity:default/domain/marketing\"\n,\n\"entity:default/domain/finance\"\n},\n// (5)\n)\nresponse\n,\nerr\n:=\nassets\n.\nSave\n(\ndomain\n)\n// (6)\nUse the\nCreateDomainPolicy()\nmethod to start building a domain policy with the minimal required information.\nYou must give the policy a name.\nYou must provide the GUID of the persona to attach this policy to.\nSpecify the set of permissions you want to allow in this policy.\nSpecify the set of\nqualifiedName\ns for the domains this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all domains, this can simply be a single value of\nentity:All domains\n.\nTo then add the policy to the persona in Atlan, call the\nSave()\nmethod with the policy object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"AuthPolicy\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"policySubCategory\"\n:\n\"domain\"\n,\n// (3)\n\"policyCategory\"\n:\n\"persona\"\n,\n// (4)\n\"policyType\"\n:\n\"allow\"\n,\n// (5)\n\"policyServiceName\"\n:\n\"atlas\"\n,\n// (6)\n\"policyResources\"\n:\n[\n\"entity:default/domain/marketing\"\n,\n// (7)\n\"entity:default/domain/finance\"\n],\n\"name\"\n:\n\"Read access to some domains\"\n,\n// (8)\n\"qualifiedName\"\n:\n\"Read access to some domains\"\n,\n// (9)\n\"policyActions\"\n:\n[\n\"persona-domain-read\"\n,\n// (10)\n\"persona-domain-sub-domain-read\"\n,\n\"persona-domain-product-read\"\n],\n\"accessControl\"\n:\n{\n// (11)\n\"typeName\"\n:\n\"Persona\"\n,\n// (12)\n\"guid\"\n:\n\"67e08ab7-9688-40bc-ae4a-da2bc06b1588\"\n// (13)\n},\n\"policyResourceCategory\"\n:\n\"CUSTOM\"\n// (14)\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nAuthPolicy\n.\nYou must use a policy subcategory of\ndomain\n.\nYou must use a policy category of\npersona\n.\nThe type of policy should always be\nallow\n.\nYou must use a policy service name of\natlas\n.\nSpecify the set of\nqualifiedName\ns for the domains this policy should control. Each\nqualifiedName\nshould itself be prefixed with\nentity:\n. To control all domains, this can simply be a single value of\nentity:All domains\n.\nYou must give the policy a name.\nYou must give the policy itself a\nqualifiedName\n, although this will be overwritten by a generated value by the back-end.\nSpecify the set of permissions you want to allow in this policy.\nTo review available permissions\nTo review the available permissions, see the SDKs — for example, the\nPersonaDomainAction\nenum in the Java SDK.\nUse an embedded\naccessControl\nobject to define the persona to attach this policy to.\nThe embedded type name of the\naccessControl\nobject must be exactly\nPersona\n.\nYou must provide the GUID of the persona to attach this policy to.\nYou must set the policy resource category to\nCUSTOM\n.\nList policies in a persona\n¶\n0.0.12\n1.4.0\n4.0.0\nTo list all the policies in a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nList all policies in a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nPersona\n.\nselect\n(\nclient\n)\n// (1)\n.\nwhere\n(\nPersona\n.\nNAME\n.\neq\n(\n\"Data Assets\"\n))\n// (2)\n.\nincludeOnResults\n(\nPersona\n.\nPOLICIES\n)\n// (3)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nNAME\n)\n// (4)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_RESOURCES\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n(\na\n->\na\ninstanceof\nPersona\n)\n.\nforEach\n(\np\n->\n{\n// (6)\nSet\n<\nIAuthPolicy\n>\npolicies\n=\n((\nPersona\n)\np\n).\ngetPolicies\n();\nfor\n(\nIAuthPolicy\npolicy\n:\npolicies\n)\n{\n// Do something with each policy\n}\n});\nStart by selecting a persona, here using a FluentSearch-based approach. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can select the persona by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the persona as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and resources controlled by each policy.\nYou can then directly stream the results of the search.\nFor each result of the search (itself a Persona), you can then retrieve its policies and iterate through them.\nList all policies in a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nfrom\ntyping\nimport\ncast\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\n,\nAuthPolicy\nfrom\npyatlan.model.fluent_search\nimport\nFluentSearch\nclient\n=\nAtlanClient\n()\nrequest\n=\n(\nFluentSearch\n()\n.\nwhere\n(\nFluentSearch\n.\nasset_type\n(\nPersona\n))\n# (1)\n.\nwhere\n(\nPersona\n.\nNAME\n.\neq\n(\n\"Data Assets\"\n))\n# (2)\n.\ninclude_on_results\n(\nPersona\n.\nPOLICIES\n)\n# (3)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nNAME\n)\n# (4)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_RESOURCES\n)\n.\ninclude_on_relations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n)\n.\nto_request\n()\n# (5)\nresponse\n=\nclient\n.\nasset\n.\nsearch\n(\nrequest\n)\n# (6)\nfor\np\nin\nresponse\n:\n# (7)\npolicies\n=\ncast\n(\nPersona\n,\np\n)\n.\npolicies\nfor\npolicy\nin\npolicies\n:\n# Do something with each policy\nStart by selecting a persona, here using a FluentSearch-based approach.\nYou can select the persona by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the persona as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and resources controlled by each policy.\nYou can then translate the FluentSearch into a search request.\nRun a search using the search request.\nFor each result of the search (itself a Persona), you can then retrieve its policies and iterate through them.\nList all policies in a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nPersona\n.\nselect\n(\nclient\n)\n// (1)\n.\nwhere\n(\nPersona\n.\nNAME\n.\neq\n(\n\"Data Assets\"\n))\n// (2)\n.\nincludeOnResults\n(\nPersona\n.\nPOLICIES\n)\n// (3)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nNAME\n)\n// (4)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_TYPE\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_RESOURCES\n)\n.\nincludeOnRelations\n(\nAuthPolicy\n.\nPOLICY_ACTIONS\n)\n.\nstream\n()\n// (5)\n.\nfilter\n{\nit\nis\nPersona\n}\n.\nforEach\n{\n// (6)\nval\npolicies\n=\n(\nit\nas\nPersona\n).\npolicies\nfor\n(\npolicy\nin\npolicies\n)\n{\n// Do something with each policy\n}\n}\nStart by selecting a persona, here using a FluentSearch-based approach. Because this operation will retrieve information from Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nYou can select the persona by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the persona as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and resources controlled by each policy.\nYou can then directly stream the results of the search.\nFor each result of the search (itself a Persona), you can then retrieve its policies and iterate through them.\nList all policies in a persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nresponse\n,\natlanErr\n:=\nassets\n.\nNewFluentSearch\n().\nPageSizes\n(\n20\n).\nAssetType\n(\n\"Persona\"\n).\n// (1)\nWhere\n(\nctx\n.\nPersona\n.\nNAME\n.\nEq\n(\n\"Data Assets\"\n)).\n// (2)\nIncludeOnResults\n(\n\"policies\"\n).\n// (3)\nIncludeOnRelations\n(\n\"name\"\n).\n// (4)\nIncludeOnRelations\n(\n\"policyActions\"\n).\nIncludeOnRelations\n(\n\"policyResources\"\n).\nIncludeOnRelations\n(\n\"policyType\"\n).\nExecute\n()\n// (5)\nif\natlanErr\n!=\nnil\n{\nfmt\n.\nPrintln\n(\n\"Error:\"\n,\natlanErr\n)\n}\nfor\n_\n,\nentity\n:=\nrange\nresponse\n[\n0\n].\nEntities\n{\n// (6)\nif\nentity\n.\nTypeName\n!=\nnil\n&&\n*\nentity\n.\nTypeName\n==\n\"Persona\"\n{\nfmt\n.\nPrintln\n(\n\"Persona Found: Name:\"\n,\n*\nentity\n.\nName\n,\n\"QualifiedName:\"\n,\n*\nentity\n.\nQualifiedName\n)\nfor\n_\n,\npolicy\n:=\nrange\n*\nentity\n.\nPolicies\n{\nfmt\n.\nPrintln\n(\n\"Policy Found: QualifiedName:\"\n,\n*\npolicy\n.\nUniqueAttributes\n.\nQualifiedName\n)\n// Do something with the policies\n}\n}\n}\nStart by selecting a persona, here using a FluentSearch-based approach.\nYou can select the persona by whatever you like, in this example we are selecting based on its name.\nInclude the policies for the persona as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and resources controlled by each policy.\nRun a fluent search request using the\nExecute()\n.\nFor each result of the search (itself a Persona), you can then retrieve its policies and iterate through them.\nPOST /api/meta/search/indexsearch\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n{\n\"dsl\"\n:\n{\n// (1)\n\"query\"\n:\n{\n\"bool\"\n:\n{\n\"filter\"\n:\n[\n{\n\"term\"\n:\n{\n\"__typeName.keyword\"\n:\n{\n\"value\"\n:\n\"Persona\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"__state\"\n:\n{\n\"value\"\n:\n\"ACTIVE\"\n}\n}\n},\n{\n\"term\"\n:\n{\n\"name.keyword\"\n:\n{\n\"value\"\n:\n\"Data Assets\"\n// (2)\n}\n}\n}\n]\n}\n},\n\"sort\"\n:\n[\n{\n\"__guid\"\n:\n{\n\"order\"\n:\n\"asc\"\n}\n}\n],\n\"track_total_hits\"\n:\ntrue\n},\n\"attributes\"\n:\n[\n\"policies\"\n// (3)\n],\n\"relationAttributes\"\n:\n[\n// (4)\n\"name\"\n,\n\"policyType\"\n,\n\"policyResources\"\n,\n\"policyActions\"\n],\n\"suppressLogs\"\n:\ntrue\n,\n\"showSearchScore\"\n:\nfalse\n,\n\"excludeMeanings\"\n:\nfalse\n,\n\"excludeClassifications\"\n:\nfalse\n}\nStart by running a search for personas.\nYou can select the persona by whatever you like, in this example we are selecting based on its name.\nInclude the\npolicies\nfor the persona as part of the search results.\nInclude all the attributes you want about each policy on the relations of the search results. Here we are including the name, type, actions and resources controlled by each policy.\nPersonalize the persona\n¶\n0.0.12\n2.1.4\n4.0.0\nTo personalize which details to show for assets within a persona:\nJava\nPython\nKotlin\nGo\nRaw REST API\nPersonalize the persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nPersona\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nLINEAGE\n)\n// (5)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nRELATIONS\n)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nQUERIES\n)\n.\ndenyAssetType\n(\n\"Table\"\n)\n// (6)\n.\ndenyAssetType\n(\n\"Column\"\n)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nTAGS\n)\n// (7)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nOWNERS\n)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nCERTIFICATE\n)\n.\ndenyCustomMetadataGuid\n(\n\"59220d25-5d39-4f3a-8de5-072098bee793\"\n)\n// (8)\n.\ndenyCustomMetadataGuid\n(\n\"bb0c9836-94fd-4a54-9007-0f25fb802c2c\"\n)\n.\nbuild\n();\nAssetMutationResponse\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n);\n// (9)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain preferences on which metadata tabs should be hidden when using this persona.\nYou can then set preferences on which asset types should be hidden when using this persona.\nYou can then set preferences on which asset filters should be hidden when using this persona.\nYou can then set preferences on which custom metadata should be hidden when using this persona.\nTo update the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPersonalize the persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\npyatlan.client.atlan\nimport\nAtlanClient\nfrom\npyatlan.model.assets\nimport\nPersona\nfrom\npyatlan.model.enums\nimport\nAssetSidebarTab\n,\nAssetFilterGroup\nclient\n=\nAtlanClient\n()\nto_update\n=\nPersona\n.\nupdater\n(\n# (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n# (2)\n\"Data Assets\"\n,\n# (3)\nTrue\n# (4)\n)\nto_update\n.\ndeny_asset_tabs\n=\n{\n# (5)\nAssetSidebarTab\n.\nLINEAGE\n.\nvalue\n,\nAssetSidebarTab\n.\nRELATIONS\n.\nvalue\n,\nAssetSidebarTab\n.\nQUERIES\n.\nvalue\n,\n}\nto_update\n.\ndeny_asset_types\n=\n{\n\"Table\"\n,\n\"Column\"\n}\n# (6)\nto_update\n.\ndeny_asset_filters\n=\n{\n# (7)\nAssetFilterGroup\n.\nTAGS\n.\nvalue\n,\nAssetFilterGroup\n.\nOWNERS\n.\nvalue\n,\nAssetFilterGroup\n.\nCERTIFICATE\n.\nvalue\n,\n}\nto_update\n.\ndeny_custom_metadata_guids\n=\n{\n# (8)\n\"59220d25-5d39-4f3a-8de5-072098bee793\"\n,\n\"bb0c9836-94fd-4a54-9007-0f25fb802c2c\"\n,\n}\nresponse\n=\nclient\n.\nasset\n.\nsave\n(\nto_update\n)\n# (9)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this persona.\nYou can then set preferences on which asset types should be hidden when using this persona.\nYou can then set preferences on which asset filters should be hidden when using this persona.\nYou can then set preferences on which custom metadata should be hidden when using this persona.\nTo update the persona in Atlan, call the\nsave()\nmethod with the object you've built.\nPersonalize the persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nval\ntoUpdate\n=\nPersona\n.\nupdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n)\n// (4)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nLINEAGE\n)\n// (5)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nRELATIONS\n)\n.\ndenyAssetTab\n(\nAssetSidebarTab\n.\nQUERIES\n)\n.\ndenyAssetType\n(\n\"Table\"\n)\n// (6)\n.\ndenyAssetType\n(\n\"Column\"\n)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nTAGS\n)\n// (7)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nOWNERS\n)\n.\ndenyAssetFilter\n(\nAssetFilterGroup\n.\nCERTIFICATE\n)\n.\ndenyCustomMetadataGuid\n(\n\"59220d25-5d39-4f3a-8de5-072098bee793\"\n)\n// (8)\n.\ndenyCustomMetadataGuid\n(\n\"bb0c9836-94fd-4a54-9007-0f25fb802c2c\"\n)\n.\nbuild\n()\nval\nresponse\n=\ntoUpdate\n.\nsave\n(\nclient\n)\n// (9)\nUse the\nupdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then chain preferences on which metadata tabs should be hidden when using this persona.\nYou can then set preferences on which asset types should be hidden when using this persona.\nYou can then set preferences on which asset filters should be hidden when using this persona.\nYou can then set preferences on which custom metadata should be hidden when using this persona.\nTo update the persona in Atlan, call the\nsave()\nmethod against the object you've built. Because this operation will persist the structure in Atlan, you must\nprovide it an\nAtlanClient\nthrough which to connect to the tenant.\nPersonalize the persona\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ntoUpdate\n:=\n&\nassets\n.\nPersona\n{}\ntoUpdate\n.\nUpdater\n(\n// (1)\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (2)\n\"Data Assets\"\n,\n// (3)\ntrue\n,\n// (4)\n)\ntoUpdate\n.\nDenyAssetTabs\n=\n&\n[]\nstring\n{\n// (5)\natlan\n.\nAssetSidebarTabLineage\n.\nName\n,\natlan\n.\nAssetSidebarTabRelations\n.\nName\n,\natlan\n.\nAssetSidebarTabQueries\n.\nName\n,\n}\ntoUpdate\n.\nDenyAssetTypes\n=\n&\n[]\nstring\n{\n\"Table\"\n,\n\"Column\"\n}\n// (6)\ntoUpdate\n.\nDenyAssetFilters\n=\n&\n[]\nstring\n{\n// (7)\natlan\n.\nAssetFilterGroupTags\n.\nName\n,\natlan\n.\nAssetFilterGroupOwners\n.\nName\n,\natlan\n.\nAssetFilterGroupCertificate\n.\nName\n,\n}\ntoUpdate\n.\nDenyCustomMetadataGuids\n=\n&\n[]\nstring\n{\n// (8)\n\"59220d25-5d39-4f3a-8de5-072098bee793\"\n,\n\"bb0c9836-94fd-4a54-9007-0f25fb802c2c\"\n,\n}\nresponse\n,\natlanErr\n:=\nassets\n.\nSave\n(\ntoUpdate\n)\n// (9)\nUse the\nUpdater()\nmethod to update a persona.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this persona.\nYou can then set preferences on which asset types should be hidden when using this persona.\nYou can then set preferences on which asset filters should be hidden when using this persona.\nYou can then set preferences on which custom metadata should be hidden when using this persona.\nTo update the persona in Atlan, call the\nSave()\nmethod with the object you've built.\nPOST /api/meta/entity/bulk\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n{\n\"entities\"\n:\n[\n// (1)\n{\n\"typeName\"\n:\n\"Persona\"\n,\n// (2)\n\"attributes\"\n:\n{\n\"qualifiedName\"\n:\n\"default/M5HnBQ8QWhrAVGuvBx8iSW\"\n,\n// (3)\n\"name\"\n:\n\"Data Assets\"\n// (4)\n\"isAccessControlEnabled\"\n:\ntrue\n,\n// (5)\n\"denyAssetTabs\"\n:\n[\n// (6)\n\"Lineage\"\n,\n\"Relations\"\n,\n\"Queries\"\n],\n\"denyAssetTypes\"\n:\n[\n// (7)\n\"Table\"\n,\n\"Column\"\n],\n\"denyAssetFilters\"\n:\n[\n// (8)\n\"__traitNames\"\n,\n\"owners\"\n,\n\"certificateStatus\"\n],\n\"denyCustomMetadataGuids\"\n:\n[\n// (9)\n\"59220d25-5d39-4f3a-8de5-072098bee793\"\n,\n\"bb0c9836-94fd-4a54-9007-0f25fb802c2c\"\n],\n}\n}\n]\n}\nWrap all updates in an\nentities\narray.\nFor each embedded object, use the exact type name\nPersona\n.\nYou must provide the qualifiedName of the persona.\nYou must provide the name of the persona.\nYou must provide whether the persona should be active (enabled) or deactivated after the update.\nYou can then set preferences on which metadata tabs should be hidden when using this persona.\nYou can then set preferences on which asset types should be hidden when using this persona.\nYou can then set preferences on which asset filters should be hidden when using this persona.\nYou can then set preferences on which custom metadata should be hidden when using this persona.\nTo review available tabs/filters\nTo review the values of tabs and filters, refer to the SDKs.\nFor example, check the\nAssetSidebarTab\nand\nAssetFilterGroup\nenums in the SDKs.\n2023-01-27\n2025-06-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better 💙\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}