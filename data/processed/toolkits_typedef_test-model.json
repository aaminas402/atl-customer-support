{
  "source_url": "toolkits_typedef_test-model.html",
  "text": "Test your model - Developer\nSkip to content\nTest your model\nÂ¶\nAdd to\natlanhq/models\nÂ¶\nOnce your model is rendered, you then need to add it to the\natlanhq/models\nrepository:\nClone\natlanhq/models\nto your local machine (if you have not already):\ngit\nclone\ngit@github.com:atlanhq/models.git\n# (1)!\ncd\nmodels\nThis assumes you have configured your Git client with appropriate credentials. If this step fails, you'll need to setup\ngit\nfirst.\nStart from an up-to-date\nmaster\nbranch (in particular if you already have the repository cloned locally):\ngit\ncheckout\nmaster\ngit\nmerge\norigin/master\nCreate a branch in the local repository:\ngit\nbranch\nJIRA-TASK-ID\n# (1)!\ngit\ncheckout\nJIRA-TASK-ID\nReplace\nJIRA-TASK-ID\nwith the unique ID of the task in Jira where you are tracking your work.\nMove the generated model files to the cloned repository:\nmv\n.../tmp/models/*\natlas/entityDefs/Referenceable/Asset/Catalog/.\n# (1)!\nThe first directory should be the path to wherever you generated the files from the\npkl\ncommand when rendering your model. The second directory is the appropriate location within the\nmodels\nrepository for the rendered JSON.\nIn this example, since our top-level supertype was\nCatalog\n, we place the files under\nReferenceable/Asset/Catalog/.\n.\nIf you had instead directly extended\nAsset\n, you would move the files under\nReferenceable/Asset/.\n.\nStage your new model files:\ngit\nadd\natlas/entityDefs/Referenceable/Asset/Catalog/\n# (1)!\nAs above, if the files you added are in a different path, stage them from that different path. (This tells\ngit\nwhich files to include all together in your next commit.)\nCommit your new model files to the branch:\ngit\ncommit\n-m\n'New model for ...'\n# (1)!\nProvide a meaningful message for the new model you're adding. (This tells\ngit\nto take a (local) snapshot of all the changes you staged (above).)\nPush your committed changes to the remote repository:\ngit\npush\n--set-upstream\norigin\nJIRA-TASK-ID\n# (1)!\nRemember that\nJIRA-TASK-ID\nis just a placeholder â€” replace with the name of your actual branch. (This tells\ngit\nto push all the (local) commits you've made against this branch to the remote GitHub repository, so they're available to everyone there.)\nCanary your model\nÂ¶\nDevelopment purposes only\nThese steps should\nonly\nbe applied to internal development tenants, where you can safely reset the tenant (erasing all metadata) to make changes.\nkubectl\nGitHub\nIf you have\nkubectl\naccess to your cluster, you can \"canary\" your model directly:\nEnsure you are on your cluster:\nloft\nuse\nvcluster\n<tenant-name>\n--project\ndefault\n# (1)!\nReplace\n<tenant-name>\nwith the name of your tenant. (This assumes you are already logged in to Loft â€” naturally log in there first, if you are not already.)\nModify the\nmodelsBranch\nvalue in the\natlan-runtime-packages-config\nconfigmap:\nEDITOR\n=\nvim\n\\\n# (1)!\nkubectl\nedit\ncm\natlan-runtime-packages-config\nSet whatever editor you prefer, but be sure it blocks until you have completed editing the configmap.\natlan-runtime-packages-config\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n# Please edit the object below. Lines beginning with a '#' will be ignored,\n# and an empty file will abort the edit. If an error occurs while saving this file will be\n# reopened with the relevant failures.\n#\napiVersion\n:\nv1\ndata\n:\nchannel\n:\nmaster\nmarketplacePackagesBranch\n:\nmaster\nmarketplaceScriptsBranch\n:\nmaster\nmodelsBranch\n:\nJIRA-TASK-ID\n# (1)!\npackagesConfig\n:\n|\n{}\nversion\n:\nlatest\nkind\n:\nConfigMap\nmetadata\n:\n...\nSet the value of\nmodelsBranch\nto the name of the branch you pushed to\natlanhq/models\n.\nQuickly run the steps below to seed the development tenant. (A cron job may overwrite the value you just changed above back to\nmaster\nor whatever value is defined in the alternative approach described in the GitHub tab.)\nIf you do not have\nkubectl\naccess to your cluster, you will need to \"canary\" the model through the\natlanhq/marketplace-packages\nrepository.\nClone\natlanhq/marketplace-packages\nto your local machine (if you have not already):\ngit\nclone\ngit@github.com:atlanhq/marketplace-packages.git\n# (1)!\ncd\nmarketplace-packages\nThis assumes you have configured your Git client with appropriate credentials. If this step fails, you'll need to setup\ngit\nfirst.\nStart from an up-to-date\nmaster\nbranch (in particular if you already have the repository cloned locally):\ngit\ncheckout\nmaster\ngit\nmerge\norigin/master\nCreate a branch in the local repository:\ngit\nbranch\nJIRA-TASK-ID\n# (1)!\ngit\ncheckout\nJIRA-TASK-ID\nReplace\nJIRA-TASK-ID\nwith the unique ID of the task in Jira where you are tracking your work.\nCreate or edit the file\ndeployment/tenants/<tenant-name>.pkl\nfor the tenant where you want to canary the typedefs, with at least the following content:\ndeployment/tenants/<tenant-name>.pkl\n1\n2\n3\namends\n\"../Deployment.pkl\"\nmodelsBranch\n=\n\"JIRA-TASK-ID\"\nStage your new (or modified)\n.pkl\nfile:\ngit\nadd\ndeployment/tenants/<tenant-name>.pkl\n# (1)!\nRemember to replace\n<tenant-name>\nwith your actual tenant name. (This tells\ngit\nwhich files to include all together in your next commit.)\nCommit your new (or modified) file to the branch:\ngit\ncommit\n-m\n'Model canary for ...'\n# (1)!\nProvide a meaningful message for the new model you're canarying. (This tells\ngit\nto take a (local) snapshot of all the changes you staged (above).)\nPush your committed changes to the remote repository:\ngit\npush\n--set-upstream\norigin\nJIRA-TASK-ID\n# (1)!\nRemember that\nJIRA-TASK-ID\nis just a placeholder â€” replace with the name of your actual branch. (This tells\ngit\nto push all the (local) commits you've made against this branch to the remote GitHub repository, so they're available to everyone there.)\nRaise a pull request (PR) from your branch (\nJIRA-TASK-ID\n) to\nmaster\non\natlanhq/marketplace-packages\n.\nAs long as you did not make any mistakes in the filename or its contents, your PR will be automatically approved by a bot within a few minutes. You can then self-merge it.\nOnce the PR is merged, wait for the\natlan-update\nscript to run and complete on your tenant. By default it will run every 30 minutes, so could take up to 1 hour before it has completed on your tenant.\n1\nSeed development tenant\nÂ¶\nOnce the canary is set:\nLog in to Argo on your tenant by going to\nhttps://tenant-name.atlan.com/api/orchestration\nand clicking the left-most\nLogin\nbutton.\nThen open\nhttps://tenant-name.atlan.com/api/orchestration/cluster-workflow-templates/atlan-typedef-seeder\nand click the\nSubmit\nbutton in the upper-right.\nIn the resulting dialog, click the\nSubmit\nbutton.\nOnce this workflow completes (successfully), the typedefs will be available in that tenant.\nIt is also possible that synchronization has been disabled on your tenant, in which case\natlan-update\nmay not run at all. If that is the case, you will need to speak with whoever manages your tenant to see how you can test your typedefs.\nâ†©\n2025-03-11\n2025-03-11\nWas this page helpful?\nThanks for your feedback!\nThanks for your feedback! Help us improve this page by using our\nfeedback form\nto provide us with more information.\nBack to top\nCookie consent\nWe use cookies to:\nAnonymously measure page views, and\nAllow you to give us one-click feedback on any page.\nWe do\nnot\ncollect or store:\nAny personally identifiable information.\nAny information for any (re)marketing purposes.\nWith your consent, you're helping us to make our documentation better ðŸ’™\nGoogle Analytics\nAccept\nReject\nManage settings",
  "source_type": "sdk"
}